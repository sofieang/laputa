// generated by Fast Light User Interface Designer (fluid) version 1.0305

#include "UserInterface.h"

void UserInterface::cb_New_i(Fl_Menu_*, void*) {
  app->newSociety();
}
void UserInterface::cb_New(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_New_i(o,v);
}

void UserInterface::cb_Open_i(Fl_Menu_*, void*) {
  app->openSociety();
}
void UserInterface::cb_Open(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Open_i(o,v);
}

void UserInterface::cb_Save_i(Fl_Menu_*, void*) {
  app->saveSociety();
}
void UserInterface::cb_Save(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save_i(o,v);
}

void UserInterface::cb_Save1_i(Fl_Menu_*, void*) {
  app->saveSocietyAs();
}
void UserInterface::cb_Save1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save1_i(o,v);
}

void UserInterface::cb_Pajek_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_EXPORT_TOPOLOGY, 0);
}
void UserInterface::cb_Pajek(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Pajek_i(o,v);
}

void UserInterface::cb_Quit_i(Fl_Menu_*, void*) {
  app->quit();
}
void UserInterface::cb_Quit(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Quit_i(o,v);
}

void UserInterface::cb_Undo_i(Fl_Menu_*, void*) {
  app->doUndo();
}
void UserInterface::cb_Undo(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Undo_i(o,v);
}

void UserInterface::cb_Redo_i(Fl_Menu_*, void*) {
  app->doRedo();
}
void UserInterface::cb_Redo(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Redo_i(o,v);
}

void UserInterface::cb_Cut_i(Fl_Menu_*, void*) {
  societyWindow->view->doCutSelection();
}
void UserInterface::cb_Cut(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cut_i(o,v);
}

void UserInterface::cb_Copy_i(Fl_Menu_*, void*) {
  societyWindow->view->doCopySelection();
}
void UserInterface::cb_Copy(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Copy_i(o,v);
}

void UserInterface::cb_Paste_i(Fl_Menu_*, void*) {
  societyWindow->view->doPaste();
}
void UserInterface::cb_Paste(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Paste_i(o,v);
}

void UserInterface::cb_Delete_i(Fl_Menu_*, void*) {
  societyWindow->view->deleteSelectedInquirersAndLinks();
}
void UserInterface::cb_Delete(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Delete_i(o,v);
}

void UserInterface::cb_Select_i(Fl_Menu_*, void*) {
  societyWindow->view->selectAll();
}
void UserInterface::cb_Select(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Select_i(o,v);
}

void UserInterface::cb_Deselect_i(Fl_Menu_*, void*) {
  societyWindow->view->deselectAll();
}
void UserInterface::cb_Deselect(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Deselect_i(o,v);
}

void UserInterface::cb_Interactive_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_SIMULATION);
}
void UserInterface::cb_Interactive(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Interactive_i(o,v);
}

void UserInterface::cb_Batch_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_BATCH_SIMULATION, &app->curBatchSimulation);
}
void UserInterface::cb_Batch(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Batch_i(o,v);
}

void UserInterface::cb_Multibatch_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_MULTIBATCH);
}
void UserInterface::cb_Multibatch(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Multibatch_i(o,v);
}

void UserInterface::cb_Generate_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_BATCH_SIMULATION_GENERATE, &app->curBatchSimulation);
}
void UserInterface::cb_Generate(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Generate_i(o,v);
}

void UserInterface::cb_Randomise_i(Fl_Menu_*, void*) {
  Society soc(&batchSimulationWindow->bs.setup[0], curSociety);
soc.organise();
*curSociety = soc;
societyWindow->view->redraw();
societyWindow->view->updateStatistics();
}
void UserInterface::cb_Randomise(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Randomise_i(o,v);
}

void UserInterface::cb_Society_i(Fl_Menu_*, void*) {
  societyWindow->show();
}
void UserInterface::cb_Society(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Society_i(o,v);
}

void UserInterface::cb_Inquirer_i(Fl_Menu_*, void*) {
  inquirerWindow->show();
}
void UserInterface::cb_Inquirer(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Inquirer_i(o,v);
}

void UserInterface::cb_Link_i(Fl_Menu_*, void*) {
  linkWindow->show();
}
void UserInterface::cb_Link(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Link_i(o,v);
}

void UserInterface::cb_About_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_ABOUT);
}
void UserInterface::cb_About(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_About_i(o,v);
}

void UserInterface::cb_Manual_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_MANUAL);
}
void UserInterface::cb_Manual(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Manual_i(o,v);
}

void UserInterface::cb_Tooltips_i(Fl_Menu_*, void*) {
  app->toggleTooltips();
}
void UserInterface::cb_Tooltips(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Tooltips_i(o,v);
}

Fl_Menu_Item UserInterface::menu_societyWindow[] = {
 {"File", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"New Society...", 0x4006e,  (Fl_Callback*)UserInterface::cb_New, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Open Society...", 0x4006f,  (Fl_Callback*)UserInterface::cb_Open, 0, 128, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Save", 0x40073,  (Fl_Callback*)UserInterface::cb_Save, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Save As...", 0,  (Fl_Callback*)UserInterface::cb_Save1, 0, 128, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Export As", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Pajek...", 0,  (Fl_Callback*)UserInterface::cb_Pajek, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Quit", 0x40071,  (Fl_Callback*)UserInterface::cb_Quit, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Edit", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Undo", 0x4007a,  (Fl_Callback*)UserInterface::cb_Undo, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Redo", 0x40079,  (Fl_Callback*)UserInterface::cb_Redo, 0, 128, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Cut", 0x40078,  (Fl_Callback*)UserInterface::cb_Cut, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Copy", 0x40063,  (Fl_Callback*)UserInterface::cb_Copy, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Paste", 0x40076,  (Fl_Callback*)UserInterface::cb_Paste, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Delete", 0,  (Fl_Callback*)UserInterface::cb_Delete, 0, 128, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Select All", 0x40061,  (Fl_Callback*)UserInterface::cb_Select, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Deselect All", 0x40064,  (Fl_Callback*)UserInterface::cb_Deselect, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Simulation", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Interactive...", 0x40069,  (Fl_Callback*)UserInterface::cb_Interactive, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Batch...", 0x40062,  (Fl_Callback*)UserInterface::cb_Batch, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Multibatch...", 0x4006d,  (Fl_Callback*)UserInterface::cb_Multibatch, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Society", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Generate Society...", 0,  (Fl_Callback*)UserInterface::cb_Generate, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Randomise Again", 0x40072,  (Fl_Callback*)UserInterface::cb_Randomise, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Window", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Society", 0,  (Fl_Callback*)UserInterface::cb_Society, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Inquirer Inspector", 0,  (Fl_Callback*)UserInterface::cb_Inquirer, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Link Inspector", 0,  (Fl_Callback*)UserInterface::cb_Link, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Help", 0,  0, 0, 64, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"About Laputa...", 0,  (Fl_Callback*)UserInterface::cb_About, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Manual...", 0,  (Fl_Callback*)UserInterface::cb_Manual, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Tooltips", 0x40074,  (Fl_Callback*)UserInterface::cb_Tooltips, 0, 6, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_societyWindow_i(ToolButton*, void*) {
  app->setTool(TOOL_SELECT);
}
void UserInterface::cb_societyWindow(ToolButton* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow_i(o,v);
}

void UserInterface::cb_Select1_i(Fl_Menu_*, void*) {
  app->toggleSelectionSetting(SELECT_INQUIRERS);
}
void UserInterface::cb_Select1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Select1_i(o,v);
}

void UserInterface::cb_Select2_i(Fl_Menu_*, void*) {
  app->toggleSelectionSetting(SELECT_INTERNAL_LINKS);
}
void UserInterface::cb_Select2(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Select2_i(o,v);
}

void UserInterface::cb_Select3_i(Fl_Menu_*, void*) {
  app->toggleSelectionSetting(SELECT_EXTERNAL_LINKS);
}
void UserInterface::cb_Select3(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Select3_i(o,v);
}

Fl_Menu_Item UserInterface::menu_societyWindow1[] = {
 {"Select Inquirers", 0,  (Fl_Callback*)UserInterface::cb_Select1, 0, 6, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Select Internal Links", 0,  (Fl_Callback*)UserInterface::cb_Select2, 0, 6, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Select External Links", 0,  (Fl_Callback*)UserInterface::cb_Select3, 0, 6, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_societyWindow1_i(ToolButton*, void*) {
  app->setTool(TOOL_ADD_LINK);
}
void UserInterface::cb_societyWindow1(ToolButton* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow1_i(o,v);
}

void UserInterface::cb_Set_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_CREATE_LINK_PREFS);
}
void UserInterface::cb_Set(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Set_i(o,v);
}

Fl_Menu_Item UserInterface::menu_societyWindow2[] = {
 {"Set New Link Preferences...", 0,  (Fl_Callback*)UserInterface::cb_Set, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_societyWindow2_i(ToolButton*, void*) {
  app->setTool(TOOL_ADD_INQUIRER);
}
void UserInterface::cb_societyWindow2(ToolButton* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow2_i(o,v);
}

void UserInterface::cb_Set1_i(Fl_Menu_*, void*) {
  societyWindow->showDialog(DIALOG_CREATE_INQUIRER_PREFS);
}
void UserInterface::cb_Set1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Set1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_societyWindow3[] = {
 {"Set New Inquirer Preferences...", 0,  (Fl_Callback*)UserInterface::cb_Set1, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Show_i(Fl_Check_Button* o, void*) {
  societyWindow->view->setShowInqNumbers(((Fl_Check_Button*)o)->value());
societyWindow->view->redraw();
}
void UserInterface::cb_Show(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

void UserInterface::cb_societyWindow3_i(Fl_Value_Input* o, void*) {
  societyWindow->view->setZoom(o->value() / 100.0);
}
void UserInterface::cb_societyWindow3(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow3_i(o,v);
}

void UserInterface::cb_societyWindow4_i(Fl_Button*, void*) {
  societyWindow->view->setZoomToDefault(1);
}
void UserInterface::cb_societyWindow4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow4_i(o,v);
}

void UserInterface::cb_societyWindow5_i(Fl_Button*, void*) {
  societyWindow->view->setZoomToDefault(-1);
}
void UserInterface::cb_societyWindow5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow5_i(o,v);
}

void UserInterface::cb_societyWindow6_i(Fl_Button*, void*) {
  societyWindow->view->setZoomToDefault(0);
}
void UserInterface::cb_societyWindow6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow6_i(o,v);
}

void UserInterface::cb_societyWindow7_i(Fl_Button*, void*) {
  societyWindow->view->setZoomToFit();
}
void UserInterface::cb_societyWindow7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow7_i(o,v);
}

void UserInterface::cb_societyWindow8_i(Fl_Button*, void*) {
  curSociety->calculateDegrees();
societyWindow->showDialog(DIALOG_DEGREE_DISTRIBUTION, curSociety->degrees);
}
void UserInterface::cb_societyWindow8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_societyWindow8_i(o,v);
}

void UserInterface::cb_societyWindow9_i(Fl_Scrollbar* o, void*) {
  societyWindow->view->setMidpoint(o->value(), societyWindow->scrollbarVertical->value()); 
societyWindow->view->redraw();
}
void UserInterface::cb_societyWindow9(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_societyWindow9_i(o,v);
}

void UserInterface::cb_societyWindowa_i(Fl_Scrollbar* o, void*) {
  societyWindow->view->setMidpoint(societyWindow->scrollbarHorizontal->value(), o->value()); 
societyWindow->view->redraw();
}
void UserInterface::cb_societyWindowa(Fl_Scrollbar* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_societyWindowa_i(o,v);
}

void UserInterface::cb_inquirerWindow_i(Fl_Input* o, void*) {
  inquirerWindow->setSelectedInquirerNames(((Fl_Input*)o)->value());
}
void UserInterface::cb_inquirerWindow(Fl_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow_i(o,v);
}

void UserInterface::cb_inquirerWindow1_i(Fl_Value_Slider* o, void*) {
  inquirerWindow->setSelectedInquirerBeliefs(((Fl_Value_Slider*)o)->value());
}
void UserInterface::cb_inquirerWindow1(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow1_i(o,v);
}

void UserInterface::cb_inquirerWindow2_i(Fl_Value_Slider* o, void*) {
  inquirerWindow->setSelectedInquirerInquiryChances(((Fl_Value_Slider*)o)->value());
}
void UserInterface::cb_inquirerWindow2(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow2_i(o,v);
}

void UserInterface::cb_inquirerWindow3_i(Fl_Value_Slider* o, void*) {
  inquirerWindow->setSelectedInquirerInquiryAccuracies(((Fl_Value_Slider*)o)->value());
}
void UserInterface::cb_inquirerWindow3(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow3_i(o,v);
}

void UserInterface::cb_inquirerWindow4_i(Fl_Button*, void*) {
  inquirerWindow->showDialog(DIALOG_INQUIRER_PARAMETERS);
}
void UserInterface::cb_inquirerWindow4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow4_i(o,v);
}

void UserInterface::cb_inquirerWindow5_i(TrustView* o, void*) {
  inquirerWindow->showDialog(DIALOG_TRUSTFUNCTION, o);
}
void UserInterface::cb_inquirerWindow5(TrustView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow5_i(o,v);
}

void UserInterface::cb_inquirerWindow6_i(Fl_Check_Button* o, void*) {
  inquirerWindow->setSelectedInquirerUpdateInquiryTrust(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_inquirerWindow6(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow6_i(o,v);
}

void UserInterface::cb_returnarrow_i(Fl_Button*, void*) {
  inquirerWindow->showDialog(DIALOG_SET_VALUES, inquirerWindow->sliderBelief);
app->touchFile();
}
void UserInterface::cb_returnarrow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_returnarrow_i(o,v);
}

void UserInterface::cb_returnarrow1_i(Fl_Button*, void*) {
  inquirerWindow->showDialog(DIALOG_SET_VALUES, inquirerWindow->sliderInquiryChance);
app->touchFile();
}
void UserInterface::cb_returnarrow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_returnarrow1_i(o,v);
}

void UserInterface::cb_returnarrow2_i(Fl_Button*, void*) {
  inquirerWindow->showDialog(DIALOG_SET_VALUES, inquirerWindow->sliderVeracityChance);
app->touchFile();
}
void UserInterface::cb_returnarrow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_returnarrow2_i(o,v);
}

void UserInterface::cb_inquirerWindow7_i(Fl_Check_Button* o, void*) {
  inquirerWindow->setSelectedInquirerIsTemplate(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_inquirerWindow7(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow7_i(o,v);
}

void UserInterface::cb_inquirerWindow8_i(Fl_Check_Button* o, void*) {
  inquirerWindow->setSelectedInquirerIncludeInStatistics(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_inquirerWindow8(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerWindow8_i(o,v);
}

void UserInterface::cb__i(Fl_Button*, void*) {
  inquirerWindow->showDialog(DIALOG_MANUAL, "inquirers.htm");
}
void UserInterface::cb_(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb__i(o,v);
}

void UserInterface::cb_linkWindow_i(Fl_Value_Slider* o, void*) {
  linkWindow->setSelectedLinkListenChances(((Fl_Value_Slider*)o)->value());
}
void UserInterface::cb_linkWindow(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow_i(o,v);
}

void UserInterface::cb_linkWindow1_i(Fl_Button*, void*) {
  linkWindow->showDialog(DIALOG_LINK_PARAMETERS);
app->touchFile();
}
void UserInterface::cb_linkWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow1_i(o,v);
}

void UserInterface::cb_linkWindow2_i(Fl_Value_Slider* o, void*) {
  linkWindow->setSelectedLinkThresholds(((Fl_Value_Slider*)o)->value());
}
void UserInterface::cb_linkWindow2(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow2_i(o,v);
}

void UserInterface::cb_linkWindow3_i(TrustView* o, void*) {
  linkWindow->showDialog(DIALOG_TRUSTFUNCTION, o);
}
void UserInterface::cb_linkWindow3(TrustView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow3_i(o,v);
}

void UserInterface::cb_linkWindow4_i(Fl_Check_Button* o, void*) {
  linkWindow->setSelectedLinkUpdateTrust(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_linkWindow4(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow4_i(o,v);
}

void UserInterface::cb_returnarrow3_i(Fl_Button*, void*) {
  linkWindow->showDialog(DIALOG_SET_VALUES, linkWindow->sliderListenChance);
app->touchFile();
}
void UserInterface::cb_returnarrow3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_returnarrow3_i(o,v);
}

void UserInterface::cb_returnarrow4_i(Fl_Button*, void*) {
  linkWindow->showDialog(DIALOG_SET_VALUES, linkWindow->sliderThreshold);
app->touchFile();
}
void UserInterface::cb_returnarrow4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_returnarrow4_i(o,v);
}

void UserInterface::cb_linkWindow5_i(Fl_Round_Button*, void*) {
  linkWindow->setSelectedLinkNewEvidenceReq(NEW_EVIDENCE_NONE);
}
void UserInterface::cb_linkWindow5(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_linkWindow5_i(o,v);
}

void UserInterface::cb_linkWindow6_i(Fl_Round_Button*, void*) {
  linkWindow->setSelectedLinkNewEvidenceReq(NEW_EVIDENCE_INQUIRY);
}
void UserInterface::cb_linkWindow6(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_linkWindow6_i(o,v);
}

void UserInterface::cb_linkWindow7_i(Fl_Round_Button*, void*) {
  linkWindow->setSelectedLinkNewEvidenceReq(NEW_EVIDENCE_ANY);
}
void UserInterface::cb_linkWindow7(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_linkWindow7_i(o,v);
}

void UserInterface::cb_linkWindow8_i(Fl_Check_Button* o, void*) {
  linkWindow->setSelectedLinkExcludePrior(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_linkWindow8(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow8_i(o,v);
}

void UserInterface::cb_linkWindow9_i(Fl_Check_Button* o, void*) {
  linkWindow->setSelectedLinkIsTemplate(((Fl_Check_Button*)o)->value());
}
void UserInterface::cb_linkWindow9(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkWindow9_i(o,v);
}

void UserInterface::cb_1_i(Fl_Button*, void*) {
  linkWindow->showDialog(DIALOG_MANUAL, "links.htm");
}
void UserInterface::cb_1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_1_i(o,v);
}

void UserInterface::cb_simulationWindow_i(Fl_Button*, void*) {
  if(!Fl::has_idle(RunSimulation, app->getCurSimulation())) {
	Fl::add_idle(RunSimulation, app->getCurSimulation());
	simulationWindow->buttonPause->activate();
	simulationWindow->buttonRun->deactivate();
	simulationWindow->buttonStep->deactivate();
};
}
void UserInterface::cb_simulationWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_simulationWindow_i(o,v);
}

void UserInterface::cb_simulationWindow1_i(Fl_Button*, void*) {
  if(!Fl::has_idle(RunSimulation, app->getCurSimulation())) {
	app->getCurSimulation()->step();
	app->getCurSimulation()->setSimulationWindowFrom();
};
}
void UserInterface::cb_simulationWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_simulationWindow1_i(o,v);
}

void UserInterface::cb_simulationWindow2_i(Fl_Button*, void*) {
  if(Fl::has_idle(RunSimulation, app->getCurSimulation())) {
	Fl::remove_idle(RunSimulation, app->getCurSimulation());
	simulationWindow->buttonPause->deactivate();
	simulationWindow->buttonRun->activate();
	simulationWindow->buttonStep->activate();

};
}
void UserInterface::cb_simulationWindow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_simulationWindow2_i(o,v);
}

void UserInterface::cb_None_i(Fl_Menu_*, void*) {
  app->curSimulation.logLevel = LOG_NONE;
app->curSimulation.setSimulationWindowFrom();
}
void UserInterface::cb_None(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_None_i(o,v);
}

void UserInterface::cb_Summary_i(Fl_Menu_*, void*) {
  app->curSimulation.logLevel = LOG_SUMMARY;
app->curSimulation.setSimulationWindowFrom();
}
void UserInterface::cb_Summary(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Summary_i(o,v);
}

void UserInterface::cb_Standard_i(Fl_Menu_*, void*) {
  app->curSimulation.logLevel = LOG_STANDARD;
app->curSimulation.setSimulationWindowFrom();
}
void UserInterface::cb_Standard(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Standard_i(o,v);
}

void UserInterface::cb_Detailed_i(Fl_Menu_*, void*) {
  app->curSimulation.logLevel = LOG_DETAILED;
app->curSimulation.setSimulationWindowFrom();
}
void UserInterface::cb_Detailed(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Detailed_i(o,v);
}

Fl_Menu_Item UserInterface::menu_simulationWindow[] = {
 {"None", 0,  (Fl_Callback*)UserInterface::cb_None, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Summary", 0,  (Fl_Callback*)UserInterface::cb_Summary, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Standard", 0,  (Fl_Callback*)UserInterface::cb_Standard, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Detailed", 0,  (Fl_Callback*)UserInterface::cb_Detailed, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_Cancel_i(Fl_Button*, void*) {
  simulationWindow->closeDialog(false);
}
void UserInterface::cb_Cancel(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel_i(o,v);
}

void UserInterface::cb_simulationWindow3_i(Fl_Button*, void*) {
  if(Fl::has_idle(RunSimulation, app->getCurSimulation())) {
	Fl::remove_idle(RunSimulation, app->getCurSimulation());
	simulationWindow->buttonPause->deactivate();
	simulationWindow->buttonRun->activate();
	simulationWindow->buttonStep->activate();
}
*curSociety = *(simulationWindow->templateSoc);
app->curSimulation.reset();
app->curSimulation.setSimulationWindowFrom();
simulationWindow->outputLog->buffer()->remove(0, simulationWindow->outputLog->buffer()->length() - 1);
}
void UserInterface::cb_simulationWindow3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_simulationWindow3_i(o,v);
}

void UserInterface::cb_Apply_i(Fl_Return_Button*, void*) {
  simulationWindow->closeDialog(true);
}
void UserInterface::cb_Apply(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Apply_i(o,v);
}

void UserInterface::cb_2_i(Fl_Button*, void*) {
  app->df.showDialog(DIALOG_MANUAL, "simulation.htm");
}
void UserInterface::cb_2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_2_i(o,v);
}

void UserInterface::cb_OK_i(Fl_Return_Button*, void*) {
  distributionWindow->closeDialog(true);
}
void UserInterface::cb_OK(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK_i(o,v);
}

void UserInterface::cb_Cancel1_i(Fl_Button*, void*) {
  distributionWindow->closeDialog(false);
}
void UserInterface::cb_Cancel1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel1_i(o,v);
}

void UserInterface::cb_Combined_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_ALL);
distributionWindow->view->redraw();
}
void UserInterface::cb_Combined(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Combined_i(o,v);
}

void UserInterface::cb_Point_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_POINT);
distributionWindow->view->redraw();
}
void UserInterface::cb_Point(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Point_i(o,v);
}

void UserInterface::cb_Interval_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_INTERVAL);
distributionWindow->view->redraw();
}
void UserInterface::cb_Interval(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Interval_i(o,v);
}

void UserInterface::cb_Normal_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_NORMAL);
distributionWindow->view->redraw();
}
void UserInterface::cb_Normal(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Normal_i(o,v);
}

void UserInterface::cb_Beta_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_BETA);
distributionWindow->view->redraw();
}
void UserInterface::cb_Beta(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Beta_i(o,v);
}

void UserInterface::cb_Freeform_i(Fl_Menu_*, void*) {
  distributionWindow->view->setFilter(DISTR_FREEFORM);
distributionWindow->view->redraw();
}
void UserInterface::cb_Freeform(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Freeform_i(o,v);
}

Fl_Menu_Item UserInterface::menu_distributionWindow[] = {
 {"Combined Distribution", 0,  (Fl_Callback*)UserInterface::cb_Combined, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Point Aspect", 0,  (Fl_Callback*)UserInterface::cb_Point, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Interval Aspect", 0,  (Fl_Callback*)UserInterface::cb_Interval, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Normal Aspect", 0,  (Fl_Callback*)UserInterface::cb_Normal, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Beta Aspect", 0,  (Fl_Callback*)UserInterface::cb_Beta, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Freeform Aspect", 0,  (Fl_Callback*)UserInterface::cb_Freeform, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_distributionWindow_i(Fl_Button*, void*) {
  distributionWindow->saveDistribution();
}
void UserInterface::cb_distributionWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionWindow_i(o,v);
}

void UserInterface::cb_distributionWindow1_i(Fl_Button*, void*) {
  distributionWindow->loadDistribution();
}
void UserInterface::cb_distributionWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionWindow1_i(o,v);
}

void UserInterface::cb_distributionWindow2_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.dPt.value = (o->value() - distributionWindow->view->curDistribution.min) / 
	(distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min);
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindow2(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow2_i(o,v);
}

void UserInterface::cb_returnarrow5_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderPtValue);
}
void UserInterface::cb_returnarrow5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow5_i(o,v);
}

void UserInterface::cb_returnarrow6_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderWeight[DISTR_POINT]);
}
void UserInterface::cb_returnarrow6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow6_i(o,v);
}

void UserInterface::cb_distributionWindow3_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.setWeight(DISTR_POINT, o->value());
distributionWindow->view->redraw();
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) 
	distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
}
void UserInterface::cb_distributionWindow3(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow3_i(o,v);
}

void UserInterface::cb_distributionWindow4_i(Fl_Value_Slider* o, void*) {
  if(o->value() < distributionWindow->sliderIntUpper->value())distributionWindow->view->curDistribution.dInt.lower = (o->value() - distributionWindow->view->curDistribution.min) / (distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min);
else o->value(distributionWindow->sliderIntUpper->value() - 0.001);
o->redraw();
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindow4(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow4_i(o,v);
}

void UserInterface::cb_returnarrow7_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderIntLower);
}
void UserInterface::cb_returnarrow7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow7_i(o,v);
}

void UserInterface::cb_returnarrow8_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderWeight[DISTR_INTERVAL]);
}
void UserInterface::cb_returnarrow8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow8_i(o,v);
}

void UserInterface::cb_distributionWindow5_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.setWeight(DISTR_INTERVAL, o->value());
distributionWindow->view->redraw();
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) 
	distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
}
void UserInterface::cb_distributionWindow5(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow5_i(o,v);
}

void UserInterface::cb_distributionWindow6_i(Fl_Value_Slider* o, void*) {
  if(o->value() > distributionWindow->sliderIntLower->value())distributionWindow->view->curDistribution.dInt.upper = (o->value() - distributionWindow->view->curDistribution.min) / (distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min);
else o->value(distributionWindow->sliderIntLower->value() + 0.001);
o->redraw();
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindow6(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow6_i(o,v);
}

void UserInterface::cb_returnarrow9_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderIntUpper);
}
void UserInterface::cb_returnarrow9(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow9_i(o,v);
}

void UserInterface::cb_distributionWindow7_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.dNrm.midpt = (o->value() - distributionWindow->view->curDistribution.min) / 
	(distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min);

distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindow7(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow7_i(o,v);
}

void UserInterface::cb_returnarrowa_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderNrmMidpt);
}
void UserInterface::cb_returnarrowa(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowa_i(o,v);
}

void UserInterface::cb_returnarrowb_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderWeight[DISTR_POINT]);
}
void UserInterface::cb_returnarrowb(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowb_i(o,v);
}

void UserInterface::cb_distributionWindow8_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.setWeight(DISTR_NORMAL, o->value());
distributionWindow->view->redraw();
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) 
	distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
}
void UserInterface::cb_distributionWindow8(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow8_i(o,v);
}

void UserInterface::cb_distributionWindow9_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.dNrm.stddev = o->value() / 
	(distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min);
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindow9(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindow9_i(o,v);
}

void UserInterface::cb_returnarrowc_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderNrmStddev);
}
void UserInterface::cb_returnarrowc(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowc_i(o,v);
}

void UserInterface::cb_distributionWindowa_i(Fl_Value_Slider* o, void*) {
  if(distributionWindow->buttonAlphaBeta->value()) distributionWindow->view->curDistribution.dBt.alpha = o->value();
else distributionWindow->setBetaDistributionFromMean((o->value() - distributionWindow->view->curDistribution.min) / (distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min));
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindowa(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindowa_i(o,v);
}

void UserInterface::cb_returnarrowd_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderBtAlpha);
}
void UserInterface::cb_returnarrowd(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowd_i(o,v);
}

void UserInterface::cb_returnarrowe_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderWeight[DISTR_BETA]);
}
void UserInterface::cb_returnarrowe(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowe_i(o,v);
}

void UserInterface::cb_distributionWindowb_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.setWeight(DISTR_BETA, o->value());
distributionWindow->view->redraw();
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) 
	distributionWindow->sliderWeight[i]->value(distributionWindow->view->getDistribution()->weights[i]);
}
void UserInterface::cb_distributionWindowb(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindowb_i(o,v);
}

void UserInterface::cb_distributionWindowc_i(Fl_Value_Slider* o, void*) {
  if(distributionWindow->buttonAlphaBeta->value()) distributionWindow->view->curDistribution.dBt.beta = o->value();
else distributionWindow->setBetaDistributionFromDev((o->value() - distributionWindow->view->curDistribution.min) / (distributionWindow->view->curDistribution.max - distributionWindow->view->curDistribution.min));
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindowc(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindowc_i(o,v);
}

void UserInterface::cb_returnarrowf_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderBtBeta);
}
void UserInterface::cb_returnarrowf(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrowf_i(o,v);
}

void UserInterface::cb_returnarrow10_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_SET_VALUES, distributionWindow->sliderWeight[DISTR_FREEFORM]);
}
void UserInterface::cb_returnarrow10(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_returnarrow10_i(o,v);
}

void UserInterface::cb_distributionWindowd_i(Fl_Value_Slider* o, void*) {
  distributionWindow->view->curDistribution.setWeight(DISTR_FREEFORM, o->value());
distributionWindow->view->redraw();
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) 
	distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
}
void UserInterface::cb_distributionWindowd(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindowd_i(o,v);
}

void UserInterface::cb_distributionWindowe_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_DISTRIBUTION_FREEFORM_VALUES, distributionWindow->view->getDistribution());
distributionWindow->view->curDistribution.dFf.changed();
}
void UserInterface::cb_distributionWindowe(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_distributionWindowe_i(o,v);
}

void UserInterface::cb_3_i(Fl_Button*, void*) {
  distributionWindow->view->getDistribution()->dFf.nudge(-1);
distributionWindow->view->redraw();
distributionWindow->view->curDistribution.dFf.changed();
}
void UserInterface::cb_3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_3_i(o,v);
}

void UserInterface::cb_4_i(Fl_Button*, void*) {
  distributionWindow->view->curDistribution.dFf.nudge(1);
distributionWindow->view->redraw();
distributionWindow->view->curDistribution.dFf.changed();
}
void UserInterface::cb_4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_4_i(o,v);
}

void UserInterface::cb_Clear_i(Fl_Button*, void*) {
  distributionWindow->view->curDistribution.dFf.clear();
distributionWindow->view->redraw();
distributionWindow->view->curDistribution.dFf.changed();
}
void UserInterface::cb_Clear(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

void UserInterface::cb_Set2_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_EXPRESSION, distributionWindow->view->getDistribution());
distributionWindow->view->curDistribution.dFf.changed();
}
void UserInterface::cb_Set2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_Set2_i(o,v);
}

void UserInterface::cb_distributionWindowf_i(Fl_Spinner* o, void*) {
  distributionWindow->view->curDistribution.setResolution(o->value() + 1);
distributionWindow->view->redraw();
}
void UserInterface::cb_distributionWindowf(Fl_Spinner* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionWindowf_i(o,v);
}

void UserInterface::cb_5_i(Fl_Button*, void*) {
  distributionWindow->view->setFilter(DISTR_POINT);
distributionWindow->view->curDistribution.setWeight(DISTR_POINT, 1.0);
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
distributionWindow->choiceFilter->value(1);
}
void UserInterface::cb_5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_5_i(o,v);
}

void UserInterface::cb_6_i(Fl_Button*, void*) {
  distributionWindow->view->setFilter(DISTR_INTERVAL);
distributionWindow->view->curDistribution.setWeight(DISTR_INTERVAL, 1.0);
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
distributionWindow->choiceFilter->value(2);
}
void UserInterface::cb_6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_6_i(o,v);
}

void UserInterface::cb_7_i(Fl_Button*, void*) {
  distributionWindow->view->setFilter(DISTR_NORMAL);
distributionWindow->view->curDistribution.setWeight(DISTR_NORMAL, 1.0);
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
distributionWindow->choiceFilter->value(3);
}
void UserInterface::cb_7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_7_i(o,v);
}

void UserInterface::cb_8_i(Fl_Button*, void*) {
  distributionWindow->view->setFilter(DISTR_BETA);
distributionWindow->view->curDistribution.setWeight(DISTR_BETA, 1.0);
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
distributionWindow->choiceFilter->value(4);
}
void UserInterface::cb_8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_8_i(o,v);
}

void UserInterface::cb_9_i(Fl_Button*, void*) {
  distributionWindow->view->setFilter(DISTR_FREEFORM);
distributionWindow->view->curDistribution.setWeight(DISTR_FREEFORM, 1.0);
for(int i = 0; i < N_DISTRIBUTION_TYPES; ++i) distributionWindow->sliderWeight[i]->value(distributionWindow->view->curDistribution.weights[i]);
distributionWindow->choiceFilter->value(5);
}
void UserInterface::cb_9(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_9_i(o,v);
}

void UserInterface::cb_distributionWindow10_i(Fl_Light_Button*, void*) {
  distributionWindow->setBetaDistributionInterface(0);
}
void UserInterface::cb_distributionWindow10(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionWindow10_i(o,v);
}

void UserInterface::cb_distributionWindow11_i(Fl_Light_Button*, void*) {
  distributionWindow->setBetaDistributionInterface(1);
}
void UserInterface::cb_distributionWindow11(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionWindow11_i(o,v);
}

void UserInterface::cb_a_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_MANUAL, "randomdistributions.htm");
}
void UserInterface::cb_a(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_a_i(o,v);
}

void UserInterface::cb_OK1_i(Fl_Return_Button*, void*) {
  createInquirerPrefsWindow->closeDialog(true);
}
void UserInterface::cb_OK1(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK1_i(o,v);
}

void UserInterface::cb_Cancel2_i(Fl_Button*, void*) {
  createInquirerPrefsWindow->closeDialog(false);
}
void UserInterface::cb_Cancel2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel2_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow_i(Fl_Check_Button* o, void*) {
  app->workingSetup.includeInStatistics = ((Fl_Check_Button*)o)->value();
}
void UserInterface::cb_createInquirerPrefsWindow(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow1_i(DistributionView* o, void*) {
  createInquirerPrefsWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_createInquirerPrefsWindow1(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow1_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow2_i(DistributionView* o, void*) {
  createInquirerPrefsWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_createInquirerPrefsWindow2(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow2_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow3_i(MetaDistributionView* o, void*) {
  createInquirerPrefsWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_createInquirerPrefsWindow3(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow3_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow4_i(DistributionView* o, void*) {
  createInquirerPrefsWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_createInquirerPrefsWindow4(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow4_i(o,v);
}

void UserInterface::cb_createInquirerPrefsWindow5_i(Fl_Check_Button* o, void*) {
  app->workingSetup.updateInquiryTrust = ((Fl_Check_Button*)o)->value();
}
void UserInterface::cb_createInquirerPrefsWindow5(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createInquirerPrefsWindow5_i(o,v);
}

void UserInterface::cb_OK2_i(Fl_Return_Button*, void*) {
  createLinkPrefsWindow->closeDialog(true);
}
void UserInterface::cb_OK2(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK2_i(o,v);
}

void UserInterface::cb_Cancel3_i(Fl_Button*, void*) {
  createLinkPrefsWindow->closeDialog(false);
}
void UserInterface::cb_Cancel3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel3_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow_i(DistributionView* o, void*) {
  createLinkPrefsWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_createLinkPrefsWindow(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createLinkPrefsWindow_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow1_i(DistributionView* o, void*) {
  createLinkPrefsWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_createLinkPrefsWindow1(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createLinkPrefsWindow1_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow2_i(MetaDistributionView* o, void*) {
  createLinkPrefsWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_createLinkPrefsWindow2(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createLinkPrefsWindow2_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow3_i(Fl_Check_Button* o, void*) {
  app->workingSetup.updateTrust = ((Fl_Check_Button*)o)->value();
}
void UserInterface::cb_createLinkPrefsWindow3(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createLinkPrefsWindow3_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow4_i(Fl_Round_Button*, void*) {
  app->workingSetup.evidencePolicy = NEW_EVIDENCE_NONE;
}
void UserInterface::cb_createLinkPrefsWindow4(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_createLinkPrefsWindow4_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow5_i(Fl_Round_Button*, void*) {
  app->workingSetup.evidencePolicy = NEW_EVIDENCE_INQUIRY;
}
void UserInterface::cb_createLinkPrefsWindow5(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_createLinkPrefsWindow5_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow6_i(Fl_Round_Button*, void*) {
  app->workingSetup.evidencePolicy = NEW_EVIDENCE_ANY;
}
void UserInterface::cb_createLinkPrefsWindow6(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_createLinkPrefsWindow6_i(o,v);
}

void UserInterface::cb_createLinkPrefsWindow7_i(Fl_Check_Button* o, void*) {
  app->workingSetup.countPriorAsEvidence = ((Fl_Check_Button*)o)->value();
}
void UserInterface::cb_createLinkPrefsWindow7(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_createLinkPrefsWindow7_i(o,v);
}

void UserInterface::cb_batchSimulationWindow_i(Fl_Button*, void*) {
  batchSimulationWindow->closeDialog(false);
}
void UserInterface::cb_batchSimulationWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow_i(o,v);
}

void UserInterface::cb_OK3_i(Fl_Return_Button*, void*) {
  batchSimulationWindow->closeDialog(true);
}
void UserInterface::cb_OK3(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK3_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1_i(Fl_Button*, void*) {
  batchSimulationWindow->loadBatchSimulation();
}
void UserInterface::cb_batchSimulationWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow1_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2_i(Fl_Button*, void*) {
  batchSimulationWindow->saveBatchSimulation();
}
void UserInterface::cb_batchSimulationWindow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow2_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.nSteps[batchSimulationWindow->bs.curStage] = o->value();
}
void UserInterface::cb_batchSimulationWindow3(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow3_i(o,v);
}

void UserInterface::cb_batchSimulationWindow4_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].varyPopulation = true;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].varyPopulation = false;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow4(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow4_i(o,v);
}

void UserInterface::cb_batchSimulationWindow5_i(Fl_Value_Input* o, void*) {
  if(o->value() > batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max = o->value();
batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.setDiscreteRange(o->value(), batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max);
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow5(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow5_i(o,v);
}

void UserInterface::cb_batchSimulationWindow6_i(Fl_Value_Input* o, void*) {
  if(o->value() < batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.min) {
	batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max = batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.min;
	batchSimulationWindow->maxValid[batchSimulationWindow->bs.curStage] = false;
}
else {
	batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max = o->value();
	batchSimulationWindow->maxValid[batchSimulationWindow->bs.curStage] = true;
}
batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.setDiscreteRange(batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.min, batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].populationDistribution.max);
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow6(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow6_i(o,v);
}

void UserInterface::cb_batchSimulationWindow7_i(Fl_Check_Button* o, void*) {
  if(o->value())batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].varyLinks = true;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].varyLinks = false;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow7(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow7_i(o,v);
}

void UserInterface::cb_batchSimulationWindow8_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow8(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow8_i(o,v);
}

void UserInterface::cb_batchSimulationWindow9_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow9(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow9_i(o,v);
}

void UserInterface::cb_batchSimulationWindowa_i(Fl_Check_Button* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].limitLinksToOnePerPair = o->value();
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindowa(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowa_i(o,v);
}

void UserInterface::cb_batchSimulationWindowb_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkWeights[WT_SYMMETRY] = o->value();
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindowb(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowb_i(o,v);
}

void UserInterface::cb_batchSimulationWindowc_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkWeights[WT_TRANSITIVITY] = o->value();
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindowc(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowc_i(o,v);
}

void UserInterface::cb_batchSimulationWindowd_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkWeights[WT_CLUSTERING] = o->value();
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindowd(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowd_i(o,v);
}

void UserInterface::cb_batchSimulationWindowe_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkWeights[WT_BASE] = o->value();
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindowe(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowe_i(o,v);
}

void UserInterface::cb_in_i(Fl_Menu_*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod = (batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod  & ~LDM_MASK) | LDM_TOTAL;
batchSimulationWindow->configure();
}
void UserInterface::cb_in(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_in_i(o,v);
}

void UserInterface::cb_per_i(Fl_Menu_*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod = (batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod  & ~LDM_MASK) | LDM_PER_INQUIRER;
batchSimulationWindow->configure();
}
void UserInterface::cb_per(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_per_i(o,v);
}

void UserInterface::cb_per1_i(Fl_Menu_*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod = (batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod  & ~LDM_MASK) | LDM_PER_INQUIRER_SQUARED;
batchSimulationWindow->configure();
}
void UserInterface::cb_per1(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_per1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_batchSimulationWindow[] = {
 {"in total", 0,  (Fl_Callback*)UserInterface::cb_in, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"per inquirer", 0,  (Fl_Callback*)UserInterface::cb_per, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"per inq. sq.", 0,  (Fl_Callback*)UserInterface::cb_per1, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_batchSimulationWindowf_i(Fl_Value_Slider* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].initialPopulationPart = 1.0 - o->value();
}
void UserInterface::cb_batchSimulationWindowf(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindowf_i(o,v);
}

void UserInterface::cb_batchSimulationWindow10_i(Fl_Value_Slider* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].growthBalance = o->value();
}
void UserInterface::cb_batchSimulationWindow10(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow10_i(o,v);
}

void UserInterface::cb_batchSimulationWindow11_i(Fl_Check_Button* o, void*) {
  if(o->value()) {
batchSimulationWindow->sliderInitialPopulationPart->activate();
batchSimulationWindow->sliderGrowthBalance->activate();
}
else {
	batchSimulationWindow->sliderInitialPopulationPart->value(0);
	batchSimulationWindow->sliderInitialPopulationPart->deactivate();
	batchSimulationWindow->sliderGrowthBalance->deactivate();
};
}
void UserInterface::cb_batchSimulationWindow11(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow11_i(o,v);
}

void UserInterface::cb_Density_i(Fl_Menu_*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod &= ~LDM_TO_NUMBER_BIT;
batchSimulationWindow->configure();
}
void UserInterface::cb_Density(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Density_i(o,v);
}

void UserInterface::cb_Number_i(Fl_Menu_*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkDistributionMethod |= LDM_TO_NUMBER_BIT;
batchSimulationWindow->configure();
}
void UserInterface::cb_Number(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Number_i(o,v);
}

Fl_Menu_Item UserInterface::menu_batchSimulationWindow1[] = {
 {"Density", 0,  (Fl_Callback*)UserInterface::cb_Density, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"Number", 0,  (Fl_Callback*)UserInterface::cb_Number, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_batchSimulationWindow12_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyStartBelief = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyStartBelief = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow12(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow12_i(o,v);
}

void UserInterface::cb_batchSimulationWindow13_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow13(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow13_i(o,v);
}

void UserInterface::cb_batchSimulationWindow14_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryAccuracy = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryAccuracy = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow14(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow14_i(o,v);
}

void UserInterface::cb_batchSimulationWindow15_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow15(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow15_i(o,v);
}

void UserInterface::cb_batchSimulationWindow16_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryTrust = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryTrust = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow16(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow16_i(o,v);
}

void UserInterface::cb_batchSimulationWindow17_i(MetaDistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow17(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow17_i(o,v);
}

void UserInterface::cb_batchSimulationWindow18_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow18(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow18_i(o,v);
}

void UserInterface::cb_batchSimulationWindow19_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryChance = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].inqParams.varyInquiryChance = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow19(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow19_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1a_i(Fl_Check_Button* o, void*) {
  if(o->value())batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyListenChance = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyListenChance = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow1a(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1a_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1b_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow1b(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1b_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1c_i(Fl_Check_Button* o, void*) {
  if(o->value()) batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyThreshold = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyThreshold = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow1c(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1c_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1d_i(DistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow1d(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1d_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1e_i(Fl_Check_Button* o, void*) {
  if(o->value())batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyTrust = VARY_GLOBALLY;
else batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].linkParams.varyTrust = KEEP_CONSTANT;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow1e(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1e_i(o,v);
}

void UserInterface::cb_batchSimulationWindow1f_i(MetaDistributionView* o, void*) {
  batchSimulationWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_batchSimulationWindow1f(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow1f_i(o,v);
}

void UserInterface::cb_batchSimulationWindow20_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].evidencePolicy = NEW_EVIDENCE_NONE;
}
void UserInterface::cb_batchSimulationWindow20(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow20_i(o,v);
}

void UserInterface::cb_batchSimulationWindow21_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].evidencePolicy = NEW_EVIDENCE_INQUIRY;
}
void UserInterface::cb_batchSimulationWindow21(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow21_i(o,v);
}

void UserInterface::cb_batchSimulationWindow22_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].evidencePolicy = NEW_EVIDENCE_ANY;
}
void UserInterface::cb_batchSimulationWindow22(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow22_i(o,v);
}

void UserInterface::cb_batchSimulationWindow23_i(Fl_Check_Button* o, void*) {
  batchSimulationWindow->bs.setup[batchSimulationWindow->bs.curStage].countPriorAsEvidence = ((Fl_Check_Button*)o)->value();
}
void UserInterface::cb_batchSimulationWindow23(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow23_i(o,v);
}

void UserInterface::cb_batchSimulationWindow24_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.sim.val.applicationMethod = APPLY_INDIVIDUALLY;
batchSimulationWindow->inputMajorityAmount->deactivate();
batchSimulationWindow->inputMajorityPCertainty->deactivate();
batchSimulationWindow->inputMajorityNotPCertainty->deactivate();
batchSimulationWindow->boxAmt->deactivate();
batchSimulationWindow->boxBlfP->deactivate();
batchSimulationWindow->boxBlfNotP->deactivate();
batchSimulationWindow->btnAmtMethod->deactivate();
batchSimulationWindow->btnBlfPMethod->deactivate();
batchSimulationWindow->btnBlfNotPMethod->deactivate();
}
void UserInterface::cb_batchSimulationWindow24(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow24_i(o,v);
}

void UserInterface::cb_batchSimulationWindow25_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.sim.val.applicationMethod = APPLY_TO_MAJORITY;
batchSimulationWindow->inputMajorityAmount->activate();
batchSimulationWindow->inputMajorityPCertainty->activate();
batchSimulationWindow->inputMajorityNotPCertainty->activate();
batchSimulationWindow->boxAmt->activate();
batchSimulationWindow->boxBlfP->activate();
batchSimulationWindow->boxBlfNotP->activate();
batchSimulationWindow->btnAmtMethod->activate();
batchSimulationWindow->btnBlfPMethod->activate();
batchSimulationWindow->btnBlfNotPMethod->activate();
}
void UserInterface::cb_batchSimulationWindow25(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow25_i(o,v);
}

void UserInterface::cb_batchSimulationWindow26_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.majorityAmt = o->value() / 100.0;
}
void UserInterface::cb_batchSimulationWindow26(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow26_i(o,v);
}

void UserInterface::cb_batchSimulationWindow27_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.majorityPCert = o->value() / 100.0;
}
void UserInterface::cb_batchSimulationWindow27(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow27_i(o,v);
}

void UserInterface::cb_batchSimulationWindow28_i(Fl_Round_Button*, void*) {
  batchSimulationWindow->bs.sim.val.applicationMethod = APPLY_TO_AVERAGE;
batchSimulationWindow->inputMajorityAmount->deactivate();
batchSimulationWindow->inputMajorityPCertainty->deactivate();
batchSimulationWindow->inputMajorityNotPCertainty->deactivate();
batchSimulationWindow->boxAmt->deactivate();
batchSimulationWindow->boxBlfP->deactivate();
batchSimulationWindow->boxBlfNotP->deactivate();
batchSimulationWindow->btnAmtMethod->deactivate();
batchSimulationWindow->btnBlfPMethod->deactivate();
batchSimulationWindow->btnBlfNotPMethod->deactivate();
}
void UserInterface::cb_batchSimulationWindow28(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow28_i(o,v);
}

void UserInterface::cb_batchSimulationWindow29_i(Fl_Button* o, void*) {
  if(strcmp(o->label(), ">") == 0){
	char str[8];
	wchar_t wstr = 0x2265;
	fl_utf8fromwc(str, 8, &wstr, 1);		
	o->copy_label(str);
	batchSimulationWindow->bs.sim.val.amtStrictlyGreater = false;
}
else {
	o->copy_label(">");
	batchSimulationWindow->bs.sim.val.amtStrictlyGreater = true;
};
}
void UserInterface::cb_batchSimulationWindow29(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow29_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2a_i(Fl_Button* o, void*) {
  if(strcmp(o->label(), ">") == 0){
	char str[8];
	wchar_t wstr = 0x2265;
	fl_utf8fromwc(str, 8, &wstr, 1);		
	o->copy_label(str);
	batchSimulationWindow->bs.sim.val.blfPStrictlyGreater = false;

}
else {
	o->copy_label(">");
	batchSimulationWindow->bs.sim.val.blfPStrictlyGreater = false;
};
}
void UserInterface::cb_batchSimulationWindow2a(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2a_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2b_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.majorityNotPCert = o->value() / 100.0;
}
void UserInterface::cb_batchSimulationWindow2b(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2b_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2c_i(Fl_Button* o, void*) {
  if(strcmp(o->label(), ">") == 0){
	char str[8];
	wchar_t wstr = 0x2264;
	fl_utf8fromwc(str, 8, &wstr, 1);		
	o->copy_label(str);
	batchSimulationWindow->bs.sim.val.blfNotPStrictlyLess = false;

}
else {
	o->copy_label("<");
	batchSimulationWindow->bs.sim.val.blfNotPStrictlyLess = false;
};
}
void UserInterface::cb_batchSimulationWindow2c(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2c_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2d_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.eValues[2] = o->value();
}
void UserInterface::cb_batchSimulationWindow2d(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2d_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2e_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.eValues[1] = o->value();
}
void UserInterface::cb_batchSimulationWindow2e(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2e_i(o,v);
}

void UserInterface::cb_batchSimulationWindow2f_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.eValues[0] = o->value();
}
void UserInterface::cb_batchSimulationWindow2f(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow2f_i(o,v);
}

void UserInterface::cb_batchSimulationWindow30_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.sim.val.exponent = o->value();
}
void UserInterface::cb_batchSimulationWindow30(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow30_i(o,v);
}

void UserInterface::cb_batchSimulationWindow31_i(Fl_Check_Button* o, void*) {
  batchSimulationWindow->bs.stats.recordEValueStats = o->value();
if(o->value()) {
	batchSimulationWindow->fieldSocietiesPerEValue->activate();
	batchSimulationWindow->labelEValueSocieties->activate();
	batchSimulationWindow->fieldTimePerEValue->activate();
	batchSimulationWindow->labelEValueTimeSteps->activate();
}
else {
	batchSimulationWindow->fieldSocietiesPerEValue->deactivate();
	batchSimulationWindow->labelEValueSocieties->deactivate();
	batchSimulationWindow->fieldTimePerEValue->deactivate();
	batchSimulationWindow->labelEValueTimeSteps->deactivate();

};
}
void UserInterface::cb_batchSimulationWindow31(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow31_i(o,v);
}

void UserInterface::cb_batchSimulationWindow32_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.stats.societiesPerEValueStat = o->value();
}
void UserInterface::cb_batchSimulationWindow32(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow32_i(o,v);
}

void UserInterface::cb_batchSimulationWindow33_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.stats.timePerEValueStat = o->value();
}
void UserInterface::cb_batchSimulationWindow33(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow33_i(o,v);
}

void UserInterface::cb_batchSimulationWindow34_i(Fl_Check_Button* o, void*) {
  batchSimulationWindow->bs.stats.recordTopologies = o->value();
if(o->value()) {
	batchSimulationWindow->fieldSocietiesPerTopology->activate();
	batchSimulationWindow->labelTopologySocieties->activate();
}
else {
	batchSimulationWindow->fieldSocietiesPerTopology->deactivate();
	batchSimulationWindow->labelTopologySocieties->deactivate();

};
}
void UserInterface::cb_batchSimulationWindow34(Fl_Check_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow34_i(o,v);
}

void UserInterface::cb_batchSimulationWindow35_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.stats.societiesPerTopology = o->value();
}
void UserInterface::cb_batchSimulationWindow35(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_batchSimulationWindow35_i(o,v);
}

void UserInterface::cb_batchSimulationWindow36_i(Fl_Spinner* o, void*) {
  batchSimulationWindow->setNumStages(o->value());
}
void UserInterface::cb_batchSimulationWindow36(Fl_Spinner* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow36_i(o,v);
}

void UserInterface::cb_batchSimulationWindow37_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(0, 1);
batchSimulationWindow->setStage(1);
}
void UserInterface::cb_batchSimulationWindow37(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow37_i(o,v);
}

void UserInterface::cb_batchSimulationWindow38_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(1, 0);
batchSimulationWindow->setStage(0);
}
void UserInterface::cb_batchSimulationWindow38(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow38_i(o,v);
}

void UserInterface::cb_batchSimulationWindow39_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(1, 2);
batchSimulationWindow->setStage(2);
}
void UserInterface::cb_batchSimulationWindow39(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow39_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3a_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(2, 1);
batchSimulationWindow->setStage(1);
}
void UserInterface::cb_batchSimulationWindow3a(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3a_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3b_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(2, 3);
batchSimulationWindow->setStage(3);
}
void UserInterface::cb_batchSimulationWindow3b(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3b_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3c_i(Fl_Button*, void*) {
  batchSimulationWindow->copyBatch(3, 2);
batchSimulationWindow->setStage(2);
}
void UserInterface::cb_batchSimulationWindow3c(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3c_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3d_i(Fl_Light_Button*, void*) {
  batchSimulationWindow->setStage(0);
}
void UserInterface::cb_batchSimulationWindow3d(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3d_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3e_i(Fl_Light_Button*, void*) {
  batchSimulationWindow->setStage(1);
}
void UserInterface::cb_batchSimulationWindow3e(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3e_i(o,v);
}

void UserInterface::cb_batchSimulationWindow3f_i(Fl_Light_Button*, void*) {
  batchSimulationWindow->setStage(2);
}
void UserInterface::cb_batchSimulationWindow3f(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow3f_i(o,v);
}

void UserInterface::cb_batchSimulationWindow40_i(Fl_Light_Button*, void*) {
  batchSimulationWindow->setStage(3);
}
void UserInterface::cb_batchSimulationWindow40(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow40_i(o,v);
}

void UserInterface::cb_batchSimulationWindow41_i(Fl_Value_Input* o, void*) {
  batchSimulationWindow->bs.nTrials = o->value();
}
void UserInterface::cb_batchSimulationWindow41(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow41_i(o,v);
}

void UserInterface::cb_batchSimulationWindow42_i(CoordinateSelector* o, void*) {
  batchSimulationWindow->mb->generateBatch(o->xVal->value(), o->yVal->value());
batchSimulationWindow->bs = batchSimulationWindow->mb->curBatch;
batchSimulationWindow->configure();
}
void UserInterface::cb_batchSimulationWindow42(CoordinateSelector* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_batchSimulationWindow42_i(o,v);
}

void UserInterface::cb_b_i(Fl_Button*, void*) {
  if(batchSimulationWindow->dialogForm == BS_FORM_GENERATE) batchSimulationWindow->showDialog(DIALOG_MANUAL, "generation.htm");
else batchSimulationWindow->showDialog(DIALOG_MANUAL, "batchsimulation.htm");
}
void UserInterface::cb_b(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_b_i(o,v);
}

void UserInterface::cb_Cancel4_i(Fl_Button*, void*) {
  progressWindow->closeDialog(false);
}
void UserInterface::cb_Cancel4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel4_i(o,v);
}

void UserInterface::cb_Close_i(Fl_Button*, void*) {
  statisticsWindow->closeDialog(true);
}
void UserInterface::cb_Close(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void UserInterface::cb_90_i(Fl_Menu_*, void*) {
  statisticsWindow->computeConfidences(0.9f);
}
void UserInterface::cb_90(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_90_i(o,v);
}

void UserInterface::cb_95_i(Fl_Menu_*, void*) {
  statisticsWindow->computeConfidences(0.95f);
}
void UserInterface::cb_95(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_95_i(o,v);
}

void UserInterface::cb_99_i(Fl_Menu_*, void*) {
  statisticsWindow->computeConfidences(0.99f);
}
void UserInterface::cb_99(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_99_i(o,v);
}

void UserInterface::cb_991_i(Fl_Menu_*, void*) {
  statisticsWindow->computeConfidences(0.999f);
}
void UserInterface::cb_991(Fl_Menu_* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_991_i(o,v);
}

Fl_Menu_Item UserInterface::menu_statisticsWindow[] = {
 {"90%", 0,  (Fl_Callback*)UserInterface::cb_90, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"95%", 0,  (Fl_Callback*)UserInterface::cb_95, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"99%", 0,  (Fl_Callback*)UserInterface::cb_99, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {"99.9%", 0,  (Fl_Callback*)UserInterface::cb_991, 0, 0, (uchar)FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_c_i(Fl_Button*, void*) {
  statisticsWindow->showDialog(DIALOG_MANUAL, "statistics.htm");
}
void UserInterface::cb_c(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_c_i(o,v);
}

void UserInterface::cb_View_i(Fl_Button*, void*) {
  statisticsWindow->showDialog(DIALOG_DEGREE_DISTRIBUTION, statisticsWindow->bsShown->stats.degrees);
}
void UserInterface::cb_View(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_View_i(o,v);
}

void UserInterface::cb_statisticsWindow_i(Fl_Button*, void*) {
  statisticsWindow->showDialog(DIALOG_EXPORT_TOPOLOGY, statisticsWindow->bsShown);
}
void UserInterface::cb_statisticsWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_statisticsWindow_i(o,v);
}

void UserInterface::cb_statisticsWindow1_i(Fl_Choice* o, void*) {
  statisticsWindow->setDiagramView(o->value());
}
void UserInterface::cb_statisticsWindow1(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_statisticsWindow1_i(o,v);
}

Fl_Menu_Item UserInterface::menu_statisticsWindow1[] = {
 {"Belief <  0.2", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"0.2 <= Belief < 0.4", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"0.4 <= Belief <= 0.6", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"0.6 < Belief <= 0.8", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"0.8 < Belief", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {"All Inquirers", 0,  0, 0, 0, (uchar)FL_NORMAL_LABEL, 2, 14, 0},
 {0,0,0,0,0,0,0,0,0}
};

void UserInterface::cb_statisticsWindow2_i(Fl_Button*, void*) {
  statisticsWindow->showDialog(DIALOG_EXPORT_STATISTICS, statisticsWindow->bsShown);
}
void UserInterface::cb_statisticsWindow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_statisticsWindow2_i(o,v);
}

void UserInterface::cb_aboutWindow_i(Fl_Button*, void*) {
  aboutWindow->closeDialog(true);
}
void UserInterface::cb_aboutWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_aboutWindow_i(o,v);
}

void UserInterface::cb_OK4_i(Fl_Return_Button*, void*) {
  inquirerParametersWindow->closeDialog(true);
}
void UserInterface::cb_OK4(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK4_i(o,v);
}

void UserInterface::cb_Cancel5_i(Fl_Button*, void*) {
  inquirerParametersWindow->closeDialog(false);
}
void UserInterface::cb_Cancel5(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel5_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow_i(Fl_Slider* o, void*) {
  app->workingSetup.inqParams.varyStartBelief = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setInquirerParametersWindowFrom();
}
void UserInterface::cb_inquirerParametersWindow(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow1_i(Fl_Slider* o, void*) {
  app->workingSetup.inqParams.varyInquiryChance = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setInquirerParametersWindowFrom();
}
void UserInterface::cb_inquirerParametersWindow1(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow1_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow2_i(Fl_Slider* o, void*) {
  app->workingSetup.inqParams.varyInquiryAccuracy = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setInquirerParametersWindowFrom();
}
void UserInterface::cb_inquirerParametersWindow2(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow2_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow3_i(DistributionView* o, void*) {
  inquirerParametersWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_inquirerParametersWindow3(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow3_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow4_i(DistributionView* o, void*) {
  inquirerParametersWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_inquirerParametersWindow4(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow4_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow5_i(MetaDistributionView* o, void*) {
  inquirerParametersWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_inquirerParametersWindow5(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow5_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow6_i(DistributionView* o, void*) {
  inquirerParametersWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_inquirerParametersWindow6(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow6_i(o,v);
}

void UserInterface::cb_inquirerParametersWindow7_i(Fl_Slider* o, void*) {
  app->workingSetup.inqParams.varyInquiryTrust = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setInquirerParametersWindowFrom();
}
void UserInterface::cb_inquirerParametersWindow7(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_inquirerParametersWindow7_i(o,v);
}

void UserInterface::cb_d_i(Fl_Button*, void*) {
  inquirerParametersWindow->showDialog(DIALOG_MANUAL, "simulationparameters.htm");
}
void UserInterface::cb_d(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_d_i(o,v);
}

void UserInterface::cb_OK5_i(Fl_Return_Button*, void*) {
  linkParametersWindow->closeDialog(true);
}
void UserInterface::cb_OK5(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK5_i(o,v);
}

void UserInterface::cb_Cancel6_i(Fl_Button*, void*) {
  linkParametersWindow->closeDialog(false);
}
void UserInterface::cb_Cancel6(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel6_i(o,v);
}

void UserInterface::cb_linkParametersWindow_i(Fl_Slider* o, void*) {
  app->workingSetup.linkParams.varyListenChance = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setLinkParametersWindowFrom();
}
void UserInterface::cb_linkParametersWindow(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow_i(o,v);
}

void UserInterface::cb_linkParametersWindow1_i(Fl_Slider* o, void*) {
  app->workingSetup.linkParams.varyThreshold = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setLinkParametersWindowFrom();
}
void UserInterface::cb_linkParametersWindow1(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow1_i(o,v);
}

void UserInterface::cb_linkParametersWindow2_i(DistributionView* o, void*) {
  linkParametersWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_linkParametersWindow2(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow2_i(o,v);
}

void UserInterface::cb_linkParametersWindow3_i(DistributionView* o, void*) {
  linkParametersWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_linkParametersWindow3(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow3_i(o,v);
}

void UserInterface::cb_linkParametersWindow4_i(MetaDistributionView* o, void*) {
  linkParametersWindow->showDialog(DIALOG_METADISTRIBUTION, o);
}
void UserInterface::cb_linkParametersWindow4(MetaDistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow4_i(o,v);
}

void UserInterface::cb_linkParametersWindow5_i(Fl_Slider* o, void*) {
  app->workingSetup.linkParams.varyTrust = 2 - ((Fl_Value_Slider*)o)->value();
app->workingSetup.setLinkParametersWindowFrom();
}
void UserInterface::cb_linkParametersWindow5(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_linkParametersWindow5_i(o,v);
}

void UserInterface::cb_e_i(Fl_Button*, void*) {
  linkParametersWindow->showDialog(DIALOG_MANUAL, "simulationparameters.htm");
}
void UserInterface::cb_e(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_e_i(o,v);
}

void UserInterface::cb_Set3_i(Fl_Return_Button*, void*) {
  distributionFreeformValuesWindow->setDistributionValues();
}
void UserInterface::cb_Set3(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Set3_i(o,v);
}

void UserInterface::cb_distributionFreeformValuesWindow_i(Fl_Multi_Browser*, void*) {
  distributionFreeformValuesWindow->getDistributionValues();
}
void UserInterface::cb_distributionFreeformValuesWindow(Fl_Multi_Browser* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_distributionFreeformValuesWindow_i(o,v);
}

void UserInterface::cb_Done_i(Fl_Button*, void*) {
  distributionFreeformValuesWindow->closeDialog(true);
}
void UserInterface::cb_Done(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Done_i(o,v);
}

void UserInterface::cb_OK6_i(Fl_Return_Button*, void*) {
  metaDistributionWindow->closeDialog(true);
}
void UserInterface::cb_OK6(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK6_i(o,v);
}

void UserInterface::cb_Cancel7_i(Fl_Button*, void*) {
  metaDistributionWindow->closeDialog(false);
}
void UserInterface::cb_Cancel7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel7_i(o,v);
}

void UserInterface::cb_metaDistributionWindow_i(DistributionView* o, void*) {
  metaDistributionWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_metaDistributionWindow(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_metaDistributionWindow_i(o,v);
}

void UserInterface::cb_metaDistributionWindow1_i(DistributionView* o, void*) {
  metaDistributionWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_metaDistributionWindow1(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_metaDistributionWindow1_i(o,v);
}

void UserInterface::cb_metaDistributionWindow2_i(DistributionView* o, void*) {
  metaDistributionWindow->showDialog(DIALOG_DISTRIBUTION, o);
}
void UserInterface::cb_metaDistributionWindow2(DistributionView* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_metaDistributionWindow2_i(o,v);
}

void UserInterface::cb_metaDistributionWindow3_i(Fl_Slider* o, void*) {
  metaDistributionWindow->setPreview(o->value());
}
void UserInterface::cb_metaDistributionWindow3(Fl_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_metaDistributionWindow3_i(o,v);
}

void UserInterface::cb_f_i(Fl_Button*, void*) {
  metaDistributionWindow->showDialog(DIALOG_MANUAL, "metadistributions.htm");
}
void UserInterface::cb_f(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_f_i(o,v);
}

void UserInterface::cb_Set4_i(Fl_Return_Button*, void*) {
  setValuesWindow->closeDialog(true);
}
void UserInterface::cb_Set4(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Set4_i(o,v);
}

void UserInterface::cb_Cancel8_i(Fl_Button*, void*) {
  setValuesWindow->closeDialog(false);
}
void UserInterface::cb_Cancel8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel8_i(o,v);
}

void UserInterface::cb_OK7_i(Fl_Return_Button*, void*) {
  multiBatchWindow->closeDialog(true);
}
void UserInterface::cb_OK7(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK7_i(o,v);
}

void UserInterface::cb_Cancel9_i(Fl_Button*, void*) {
  multiBatchWindow->closeDialog(false);
}
void UserInterface::cb_Cancel9(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancel9_i(o,v);
}

void UserInterface::cb_multiBatchWindow_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_BATCH_SIMULATION_MULTIBATCH, &(multiBatchWindow->mb.batches[BATCH_A]));
}
void UserInterface::cb_multiBatchWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow_i(o,v);
}

void UserInterface::cb_multiBatchWindow1_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_BATCH_SIMULATION_MULTIBATCH, &(multiBatchWindow->mb.batches[BATCH_B]));
}
void UserInterface::cb_multiBatchWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow1_i(o,v);
}

void UserInterface::cb_multiBatchWindow2_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_BATCH_SIMULATION_MULTIBATCH, &(multiBatchWindow->mb.batches[BATCH_C]));
}
void UserInterface::cb_multiBatchWindow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow2_i(o,v);
}

void UserInterface::cb_multiBatchWindow3_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_C] = multiBatchWindow->mb.batches[BATCH_A];
}
void UserInterface::cb_multiBatchWindow3(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow3_i(o,v);
}

void UserInterface::cb_multiBatchWindow4_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_A] = multiBatchWindow->mb.batches[BATCH_C];
}
void UserInterface::cb_multiBatchWindow4(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow4_i(o,v);
}

void UserInterface::cb_multiBatchWindow5_i(Fl_Spinner* o, void*) {
  multiBatchWindow->mb.stepsAtoC = o->value();
}
void UserInterface::cb_multiBatchWindow5(Fl_Spinner* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow5_i(o,v);
}

void UserInterface::cb_multiBatchWindow6_i(Fl_Spinner* o, void*) {
  multiBatchWindow->mb.stepsAtoB = o->value();
}
void UserInterface::cb_multiBatchWindow6(Fl_Spinner* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow6_i(o,v);
}

void UserInterface::cb_multiBatchWindow7_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_BATCH_SIMULATION_MULTIBATCH, &(multiBatchWindow->mb.batches[BATCH_D]));
}
void UserInterface::cb_multiBatchWindow7(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow7_i(o,v);
}

void UserInterface::cb_multiBatchWindow8_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_B] = multiBatchWindow->mb.batches[BATCH_A];
}
void UserInterface::cb_multiBatchWindow8(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow8_i(o,v);
}

void UserInterface::cb_multiBatchWindow9_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_A] = multiBatchWindow->mb.batches[BATCH_C];
}
void UserInterface::cb_multiBatchWindow9(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindow9_i(o,v);
}

void UserInterface::cb_multiBatchWindowa_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_D] = multiBatchWindow->mb.batches[BATCH_B];
}
void UserInterface::cb_multiBatchWindowa(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowa_i(o,v);
}

void UserInterface::cb_multiBatchWindowb_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_B] = multiBatchWindow->mb.batches[BATCH_D];
}
void UserInterface::cb_multiBatchWindowb(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowb_i(o,v);
}

void UserInterface::cb_multiBatchWindowc_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_D] = multiBatchWindow->mb.batches[BATCH_C];
}
void UserInterface::cb_multiBatchWindowc(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowc_i(o,v);
}

void UserInterface::cb_multiBatchWindowd_i(Fl_Button*, void*) {
  multiBatchWindow->mb.batches[BATCH_C] = multiBatchWindow->mb.batches[BATCH_C];
}
void UserInterface::cb_multiBatchWindowd(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowd_i(o,v);
}

void UserInterface::cb_multiBatchWindowe_i(Fl_Light_Button*, void*) {
  multiBatchWindow->inputStepsAtoC->value(1);
multiBatchWindow->inputStepsAtoC->deactivate();
multiBatchWindow->mb.stepsAtoC = 1;
for(int i = 2; i < 8; ++i) multiBatchWindow->btnCopyBatch[i]->deactivate();
multiBatchWindow->btnSetBatchC->deactivate();
multiBatchWindow->btnSetBatchD->deactivate();
}
void UserInterface::cb_multiBatchWindowe(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowe_i(o,v);
}

void UserInterface::cb_multiBatchWindowf_i(Fl_Light_Button*, void*) {
  multiBatchWindow->mb.stepsAtoC = 10;
multiBatchWindow->inputStepsAtoC->activate();
multiBatchWindow->inputStepsAtoC->value(10);
for(int i = 2; i < 8; ++i) multiBatchWindow->btnCopyBatch[i]->activate();
multiBatchWindow->btnSetBatchC->activate();
multiBatchWindow->btnSetBatchD->activate();
}
void UserInterface::cb_multiBatchWindowf(Fl_Light_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_multiBatchWindowf_i(o,v);
}

void UserInterface::cb_multiBatchWindow10_i(Fl_Button*, void*) {
  multiBatchWindow->showPreview();
}
void UserInterface::cb_multiBatchWindow10(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_multiBatchWindow10_i(o,v);
}

void UserInterface::cb_Load_i(Fl_Button*, void*) {
  multiBatchWindow->loadMultibatch();
}
void UserInterface::cb_Load(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Load_i(o,v);
}

void UserInterface::cb_Save2_i(Fl_Button*, void*) {
  multiBatchWindow->saveMultibatch();
}
void UserInterface::cb_Save2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save2_i(o,v);
}

void UserInterface::cb_10_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_MANUAL, "multibatch.htm");
}
void UserInterface::cb_10(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_10_i(o,v);
}

void UserInterface::cb_Cancela_i(Fl_Button*, void*) {
  doubleProgressWindow->closeDialog(false);
}
void UserInterface::cb_Cancela(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancela_i(o,v);
}

void UserInterface::cb_manualWindow_i(Fl_Button*, void*) {
  manualWindow->goBack();
}
void UserInterface::cb_manualWindow(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_manualWindow_i(o,v);
}

void UserInterface::cb_manualWindow1_i(Fl_Button*, void*) {
  manualWindow->goForward();
}
void UserInterface::cb_manualWindow1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_manualWindow1_i(o,v);
}

void UserInterface::cb_manualWindow2_i(Fl_Button*, void*) {
  manualWindow->goHome();
}
void UserInterface::cb_manualWindow2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_manualWindow2_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow_i(Fl_Choice* o, void*) {
  degreeDistributionWindow->calculateFit(DD_IN, o->value());
}
void UserInterface::cb_degreeDistributionWindow(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow1_i(Fl_Value_Slider* o, void*) {
  degreeDistributionWindow->setCutoff(DD_IN, o->value());
}
void UserInterface::cb_degreeDistributionWindow1(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow1_i(o,v);
}

void UserInterface::cb_Fit_i(Fl_Button*, void*) {
  degreeDistributionWindow->fitToCutoff(DD_IN, degreeDistributionWindow->sliderCutoff[DD_IN]->value());
}
void UserInterface::cb_Fit(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Fit_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow2_i(Fl_Choice* o, void*) {
  degreeDistributionWindow->calculateFit(DD_OUT, o->value());
}
void UserInterface::cb_degreeDistributionWindow2(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow2_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow3_i(Fl_Value_Slider* o, void*) {
  degreeDistributionWindow->setCutoff(DD_OUT, o->value());
}
void UserInterface::cb_degreeDistributionWindow3(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow3_i(o,v);
}

void UserInterface::cb_Fit1_i(Fl_Button*, void*) {
  degreeDistributionWindow->fitToCutoff(DD_OUT, degreeDistributionWindow->sliderCutoff[DD_OUT]->value());
}
void UserInterface::cb_Fit1(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Fit1_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow4_i(Fl_Choice* o, void*) {
  degreeDistributionWindow->calculateFit(DD_TOTAL, o->value());
}
void UserInterface::cb_degreeDistributionWindow4(Fl_Choice* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow4_i(o,v);
}

void UserInterface::cb_degreeDistributionWindow5_i(Fl_Value_Slider* o, void*) {
  degreeDistributionWindow->setCutoff(DD_TOTAL, o->value());
}
void UserInterface::cb_degreeDistributionWindow5(Fl_Value_Slider* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_degreeDistributionWindow5_i(o,v);
}

void UserInterface::cb_Fit2_i(Fl_Button*, void*) {
  degreeDistributionWindow->fitToCutoff(DD_TOTAL, degreeDistributionWindow->sliderCutoff[DD_TOTAL]->value());
}
void UserInterface::cb_Fit2(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->parent()->user_data()))->cb_Fit2_i(o,v);
}

void UserInterface::cb_Close1_i(Fl_Return_Button*, void*) {
  degreeDistributionWindow->closeDialog(true);
}
void UserInterface::cb_Close1(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void UserInterface::cb_11_i(Fl_Button*, void*) {
  statisticsWindow->showDialog(DIALOG_MANUAL, "degreedistributions.htm");
}
void UserInterface::cb_11(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_11_i(o,v);
}

void UserInterface::cb_OK8_i(Fl_Return_Button*, void*) {
  if(expressionWindow->tabs->value() == expressionWindow->groupPDF) {
	if(expressionWindow->inputFormulaPDF->validateFormula()) expressionWindow->closeDialog(true);
	else fl_alert("Error in parsing PDF expression: \n%s", expressionWindow->inputFormulaPDF->errorMessage());	
}
else {
	if(expressionWindow->inputFormulaCDF->validateFormula()) expressionWindow->closeDialog(true);
	else fl_alert("Error in parsing CDF expression: \n%s", expressionWindow->inputFormulaCDF->errorMessage());	
};
}
void UserInterface::cb_OK8(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_OK8_i(o,v);
}

void UserInterface::cb_Cancelb_i(Fl_Button*, void*) {
  expressionWindow->closeDialog(false);
}
void UserInterface::cb_Cancelb(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancelb_i(o,v);
}

void UserInterface::cb_12_i(Fl_Button*, void*) {
  distributionWindow->showDialog(DIALOG_MANUAL, "expressions.htm");
}
void UserInterface::cb_12(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_12_i(o,v);
}

void UserInterface::cb_Save3_i(Fl_Return_Button*, void*) {
  if(exportStatisticsWindow->save()) exportStatisticsWindow->closeDialog(true);
}
void UserInterface::cb_Save3(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save3_i(o,v);
}

void UserInterface::cb_Cancelc_i(Fl_Button*, void*) {
  exportStatisticsWindow->closeDialog(false);
}
void UserInterface::cb_Cancelc(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Cancelc_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(0, 0);
}
void UserInterface::cb_exportStatisticsWindow(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow1_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(0, 1);
}
void UserInterface::cb_exportStatisticsWindow1(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow1_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow2_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(0, 2);
}
void UserInterface::cb_exportStatisticsWindow2(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow2_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow3_i(Fl_Value_Input* o, void*) {
  if(o->value() > exportStatisticsWindow->inputTo[0]->value()) exportStatisticsWindow->inputTo[0]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindow3(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow3_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow4_i(Fl_Value_Input* o, void*) {
  if(o->value() < exportStatisticsWindow->inputFrom[0]->value()) exportStatisticsWindow->inputFrom[0]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindow4(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow4_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow5_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(1, 0);
}
void UserInterface::cb_exportStatisticsWindow5(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow5_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow6_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(1, 1);
}
void UserInterface::cb_exportStatisticsWindow6(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow6_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow7_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(1, 2);
}
void UserInterface::cb_exportStatisticsWindow7(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow7_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow8_i(Fl_Value_Input* o, void*) {
  if(o->value() > exportStatisticsWindow->inputTo[1]->value()) exportStatisticsWindow->inputTo[1]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindow8(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow8_i(o,v);
}

void UserInterface::cb_exportStatisticsWindow9_i(Fl_Value_Input* o, void*) {
  if(o->value() < exportStatisticsWindow->inputFrom[1]->value()) exportStatisticsWindow->inputFrom[1]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindow9(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindow9_i(o,v);
}

void UserInterface::cb_exportStatisticsWindowa_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(2, 0);
}
void UserInterface::cb_exportStatisticsWindowa(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindowa_i(o,v);
}

void UserInterface::cb_exportStatisticsWindowb_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(2, 1);
}
void UserInterface::cb_exportStatisticsWindowb(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindowb_i(o,v);
}

void UserInterface::cb_exportStatisticsWindowc_i(Fl_Round_Button*, void*) {
  exportStatisticsWindow->choose(2, 2);
}
void UserInterface::cb_exportStatisticsWindowc(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindowc_i(o,v);
}

void UserInterface::cb_exportStatisticsWindowd_i(Fl_Value_Input* o, void*) {
  if(o->value() > exportStatisticsWindow->inputTo[2]->value()) exportStatisticsWindow->inputTo[2]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindowd(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindowd_i(o,v);
}

void UserInterface::cb_exportStatisticsWindowe_i(Fl_Value_Input* o, void*) {
  if(o->value() < exportStatisticsWindow->inputFrom[1]->value()) exportStatisticsWindow->inputFrom[1]->value(o->value());
}
void UserInterface::cb_exportStatisticsWindowe(Fl_Value_Input* o, void* v) {
  ((UserInterface*)(o->parent()->parent()->user_data()))->cb_exportStatisticsWindowe_i(o,v);
}

void UserInterface::cb_13_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_MANUAL, "exportstatistics.htm");
}
void UserInterface::cb_13(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_13_i(o,v);
}

void UserInterface::cb_Save4_i(Fl_Return_Button*, void*) {
  if(exportTopologyWindow->save()) exportTopologyWindow->closeDialog(true);
}
void UserInterface::cb_Save4(Fl_Return_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Save4_i(o,v);
}

void UserInterface::cb_Canceld_i(Fl_Button*, void*) {
  exportTopologyWindow->closeDialog(false);
}
void UserInterface::cb_Canceld(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_Canceld_i(o,v);
}

void UserInterface::cb_14_i(Fl_Button*, void*) {
  multiBatchWindow->showDialog(DIALOG_MANUAL, "exporttopologies.htm");
}
void UserInterface::cb_14(Fl_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_14_i(o,v);
}

void UserInterface::cb_exportTopologyWindow_i(Fl_Round_Button* o, void*) {
  exportTopologyWindow->buttonWeightListenChance->value(0);
exportTopologyWindow->buttonWeightTrust->value(0);
o->value(1);
}
void UserInterface::cb_exportTopologyWindow(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_exportTopologyWindow_i(o,v);
}

void UserInterface::cb_exportTopologyWindow1_i(Fl_Round_Button* o, void*) {
  exportTopologyWindow->buttonWeightNone->value(0);
exportTopologyWindow->buttonWeightTrust->value(0);
o->value(1);
}
void UserInterface::cb_exportTopologyWindow1(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_exportTopologyWindow1_i(o,v);
}

void UserInterface::cb_exportTopologyWindow2_i(Fl_Round_Button* o, void*) {
  exportTopologyWindow->buttonWeightNone->value(0);
exportTopologyWindow->buttonWeightListenChance->value(0);
o->value(1);
}
void UserInterface::cb_exportTopologyWindow2(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_exportTopologyWindow2_i(o,v);
}

void UserInterface::cb_exportTopologyWindow3_i(Fl_Round_Button* o, void*) {
  exportTopologyWindow->buttonFolder->value(0);
o->value(1);
}
void UserInterface::cb_exportTopologyWindow3(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_exportTopologyWindow3_i(o,v);
}

void UserInterface::cb_exportTopologyWindow4_i(Fl_Round_Button* o, void*) {
  exportTopologyWindow->buttonSingleFile->value(0);
o->value(1);
}
void UserInterface::cb_exportTopologyWindow4(Fl_Round_Button* o, void* v) {
  ((UserInterface*)(o->parent()->user_data()))->cb_exportTopologyWindow4_i(o,v);
}

void UserInterface::make_windows() {
  { societyWindow = new SocietyWindow(978, 759, "Society");
    societyWindow->box(FL_FLAT_BOX);
    societyWindow->color(FL_BACKGROUND_COLOR);
    societyWindow->selection_color(FL_BACKGROUND_COLOR);
    societyWindow->labeltype(FL_NO_LABEL);
    societyWindow->labelfont(0);
    societyWindow->labelsize(14);
    societyWindow->labelcolor(FL_FOREGROUND_COLOR);
    societyWindow->user_data((void*)(this));
    societyWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    societyWindow->when(FL_WHEN_RELEASE);
    { societyWindow->menuBar = new Fl_Sys_Menu_Bar(0, 0, 995, 25);
      societyWindow->menuBar->box(FL_THIN_UP_BOX);
      societyWindow->menuBar->color(FL_BACKGROUND_COLOR);
      societyWindow->menuBar->selection_color(FL_SELECTION_COLOR);
      societyWindow->menuBar->labeltype(FL_NORMAL_LABEL);
      societyWindow->menuBar->labelfont(0);
      societyWindow->menuBar->labelsize(14);
      societyWindow->menuBar->labelcolor(FL_FOREGROUND_COLOR);
      societyWindow->menuBar->align(Fl_Align(FL_ALIGN_CENTER));
      societyWindow->menuBar->when(FL_WHEN_RELEASE_ALWAYS);
      societyWindow->menuBar->menu(menu_societyWindow);
    } // Fl_Sys_Menu_Bar* societyWindow->menuBar
    { societyWindow->view = new SocietyView(6, 65, 959, 680);
      societyWindow->view->box(FL_DOWN_BOX);
      societyWindow->view->color(FL_BACKGROUND2_COLOR);
      societyWindow->view->selection_color(FL_BACKGROUND_COLOR);
      societyWindow->view->labeltype(FL_NORMAL_LABEL);
      societyWindow->view->labelfont(0);
      societyWindow->view->labelsize(14);
      societyWindow->view->labelcolor(FL_FOREGROUND_COLOR);
      societyWindow->view->align(Fl_Align(FL_ALIGN_CENTER));
      societyWindow->view->when(FL_WHEN_RELEASE);
      Fl_Group::current()->resizable(societyWindow->view);
    } // SocietyView* societyWindow->view
    { Fl_Pack* o = new Fl_Pack(5, 28, 895, 42);
      o->type(1);
      { societyWindow->groupToolBar = new Fl_Group(5, 28, 96, 34);
        societyWindow->groupToolBar->labeltype(FL_NO_LABEL);
        { societyWindow->buttonSelect = new ToolButton(69, 29, 32, 32);
          societyWindow->buttonSelect->tooltip("Inquirer and link selection tool. Right-click to open preferences menu.");
          societyWindow->buttonSelect->box(FL_NO_BOX);
          societyWindow->buttonSelect->color(FL_BACKGROUND_COLOR);
          societyWindow->buttonSelect->selection_color(FL_SELECTION_COLOR);
          societyWindow->buttonSelect->labeltype(FL_NORMAL_LABEL);
          societyWindow->buttonSelect->labelfont(0);
          societyWindow->buttonSelect->labelsize(14);
          societyWindow->buttonSelect->labelcolor(FL_FOREGROUND_COLOR);
          societyWindow->buttonSelect->callback((Fl_Callback*)cb_societyWindow);
          societyWindow->buttonSelect->align(Fl_Align(FL_ALIGN_TOP|FL_ALIGN_INSIDE));
          societyWindow->buttonSelect->when(FL_WHEN_CHANGED);
          societyWindow->buttonSelect->menu(menu_societyWindow1);
        } // ToolButton* societyWindow->buttonSelect
        { societyWindow->buttonCreateLink = new ToolButton(37, 29, 32, 32);
          societyWindow->buttonCreateLink->tooltip("Link creation tool; draw between inquirers to link them. Right-click to open \
preferences menu.");
          societyWindow->buttonCreateLink->box(FL_NO_BOX);
          societyWindow->buttonCreateLink->color(FL_BACKGROUND_COLOR);
          societyWindow->buttonCreateLink->selection_color(FL_SELECTION_COLOR);
          societyWindow->buttonCreateLink->labeltype(FL_NO_LABEL);
          societyWindow->buttonCreateLink->labelfont(0);
          societyWindow->buttonCreateLink->labelsize(14);
          societyWindow->buttonCreateLink->labelcolor(FL_FOREGROUND_COLOR);
          societyWindow->buttonCreateLink->callback((Fl_Callback*)cb_societyWindow1);
          societyWindow->buttonCreateLink->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          societyWindow->buttonCreateLink->when(FL_WHEN_CHANGED);
          societyWindow->buttonCreateLink->menu(menu_societyWindow2);
        } // ToolButton* societyWindow->buttonCreateLink
        { societyWindow->buttonCreateInquirer = new ToolButton(5, 29, 32, 32);
          societyWindow->buttonCreateInquirer->tooltip("Inquirer creation tool. Right-click to open preferences menu.");
          societyWindow->buttonCreateInquirer->box(FL_NO_BOX);
          societyWindow->buttonCreateInquirer->color(FL_BACKGROUND_COLOR);
          societyWindow->buttonCreateInquirer->selection_color(FL_SELECTION_COLOR);
          societyWindow->buttonCreateInquirer->labeltype(FL_NORMAL_LABEL);
          societyWindow->buttonCreateInquirer->labelfont(0);
          societyWindow->buttonCreateInquirer->labelsize(14);
          societyWindow->buttonCreateInquirer->labelcolor(FL_FOREGROUND_COLOR);
          societyWindow->buttonCreateInquirer->callback((Fl_Callback*)cb_societyWindow2);
          societyWindow->buttonCreateInquirer->align(Fl_Align(FL_ALIGN_CENTER));
          societyWindow->buttonCreateInquirer->when(FL_WHEN_CHANGED);
          societyWindow->buttonCreateInquirer->menu(menu_societyWindow3);
        } // ToolButton* societyWindow->buttonCreateInquirer
        societyWindow->groupToolBar->end();
      } // Fl_Group* societyWindow->groupToolBar
      { Fl_Group* o = new Fl_Group(105, 28, 795, 41);
        { societyWindow->outputNumInquirers = new Fl_Value_Output(390, 32, 45, 24, "Inquirers");
          societyWindow->outputNumInquirers->tooltip("Number of inquirers in society");
          societyWindow->outputNumInquirers->color(FL_BACKGROUND2_COLOR);
          societyWindow->outputNumInquirers->selection_color(FL_BACKGROUND2_COLOR);
          societyWindow->outputNumInquirers->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->outputNumInquirers->labelfont(2);
        } // Fl_Value_Output* societyWindow->outputNumInquirers
        { societyWindow->outputNumLinks = new Fl_Value_Output(485, 32, 50, 24, "Links");
          societyWindow->outputNumLinks->tooltip("Number of links in society");
          societyWindow->outputNumLinks->color(FL_BACKGROUND2_COLOR);
          societyWindow->outputNumLinks->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->outputNumLinks->labelfont(2);
        } // Fl_Value_Output* societyWindow->outputNumLinks
        { Fl_Check_Button* o = new Fl_Check_Button(635, 29, 25, 30, "Show Inquirer Numbers");
          o->tooltip("Toggle whether to show numbers of inquires, and not just their names");
          o->down_box(FL_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          o->callback((Fl_Callback*)cb_Show);
        } // Fl_Check_Button* o
        { societyWindow->inputZoom = new Fl_Value_Input(165, 32, 35, 24, "Zoom");
          societyWindow->inputZoom->tooltip("Zoom factor");
          societyWindow->inputZoom->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->inputZoom->labelfont(2);
          societyWindow->inputZoom->minimum(5);
          societyWindow->inputZoom->maximum(800);
          societyWindow->inputZoom->step(1);
          societyWindow->inputZoom->value(100);
          societyWindow->inputZoom->callback((Fl_Callback*)cb_societyWindow3);
        } // Fl_Value_Input* societyWindow->inputZoom
        { Fl_Box* o = new Fl_Box(193, 31, 30, 26, "%");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
        } // Fl_Box* o
        { societyWindow->buttonZoomIncrease = new Fl_Button(217, 34, 20, 20, "+");
          societyWindow->buttonZoomIncrease->tooltip("Zoom in");
          societyWindow->buttonZoomIncrease->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->buttonZoomIncrease->labelfont(2);
          societyWindow->buttonZoomIncrease->callback((Fl_Callback*)cb_societyWindow4);
        } // Fl_Button* societyWindow->buttonZoomIncrease
        { societyWindow->buttonZoomDecrease = new Fl_Button(241, 34, 20, 20, "-");
          societyWindow->buttonZoomDecrease->tooltip("Zoom out");
          societyWindow->buttonZoomDecrease->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->buttonZoomDecrease->labelfont(2);
          societyWindow->buttonZoomDecrease->callback((Fl_Callback*)cb_societyWindow5);
        } // Fl_Button* societyWindow->buttonZoomDecrease
        { societyWindow->buttonZoomDefault = new Fl_Button(265, 34, 20, 20, "1:1");
          societyWindow->buttonZoomDefault->tooltip("Zoom to 100%");
          societyWindow->buttonZoomDefault->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->buttonZoomDefault->labelsize(11);
          societyWindow->buttonZoomDefault->callback((Fl_Callback*)cb_societyWindow6);
        } // Fl_Button* societyWindow->buttonZoomDefault
        { societyWindow->buttonZoomToFit = new Fl_Button(290, 34, 21, 20, "Fit");
          societyWindow->buttonZoomToFit->tooltip("Zoom to fit society in view");
          societyWindow->buttonZoomToFit->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->buttonZoomToFit->labelsize(11);
          societyWindow->buttonZoomToFit->callback((Fl_Callback*)cb_societyWindow7);
        } // Fl_Button* societyWindow->buttonZoomToFit
        { societyWindow->buttonDegrees = new Fl_Button(540, 32, 70, 24, "Degrees...");
          societyWindow->buttonDegrees->labeltype(FL_ENGRAVED_LABEL);
          societyWindow->buttonDegrees->labelsize(12);
          societyWindow->buttonDegrees->callback((Fl_Callback*)cb_societyWindow8);
        } // Fl_Button* societyWindow->buttonDegrees
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Pack* o
    { societyWindow->scrollbarHorizontal = new Fl_Scrollbar(5, 745, 960, 20);
      societyWindow->scrollbarHorizontal->type(1);
      societyWindow->scrollbarHorizontal->maximum(16384);
      societyWindow->scrollbarHorizontal->Fl_Slider::value(8192);
      societyWindow->scrollbarHorizontal->callback((Fl_Callback*)cb_societyWindow9);
    } // Fl_Scrollbar* societyWindow->scrollbarHorizontal
    { societyWindow->scrollbarVertical = new Fl_Scrollbar(965, 65, 20, 680);
      societyWindow->scrollbarVertical->maximum(16384);
      societyWindow->scrollbarVertical->Fl_Slider::value(8192);
      societyWindow->scrollbarVertical->callback((Fl_Callback*)cb_societyWindowa);
    } // Fl_Scrollbar* societyWindow->scrollbarVertical
    societyWindow->size_range(600, 496);
    societyWindow->end();
  } // SocietyWindow* societyWindow
  { inquirerWindow = new InquirerWindow(352, 332, "Inquirer");
    inquirerWindow->box(FL_FLAT_BOX);
    inquirerWindow->color(FL_BACKGROUND_COLOR);
    inquirerWindow->selection_color(FL_BACKGROUND_COLOR);
    inquirerWindow->labeltype(FL_NO_LABEL);
    inquirerWindow->labelfont(2);
    inquirerWindow->labelsize(14);
    inquirerWindow->labelcolor(FL_FOREGROUND_COLOR);
    inquirerWindow->user_data((void*)(this));
    inquirerWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    inquirerWindow->when(FL_WHEN_RELEASE);
    { inquirerWindow->inputName = new Fl_Input(55, 20, 260, 20, "Name");
      inquirerWindow->inputName->tooltip("Name of inquirer (optional)");
      inquirerWindow->inputName->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->inputName->labelfont(2);
      inquirerWindow->inputName->textsize(12);
      inquirerWindow->inputName->callback((Fl_Callback*)cb_inquirerWindow);
    } // Fl_Input* inquirerWindow->inputName
    { Fl_Box* o = new Fl_Box(15, 131, 330, 159, "Inquiry");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { inquirerWindow->sliderBelief = new Fl_Value_Slider(55, 80, 235, 20, "Belief");
      inquirerWindow->sliderBelief->tooltip("Current degree of belief");
      inquirerWindow->sliderBelief->type(5);
      inquirerWindow->sliderBelief->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->sliderBelief->labelfont(2);
      inquirerWindow->sliderBelief->callback((Fl_Callback*)cb_inquirerWindow1);
      inquirerWindow->sliderBelief->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* inquirerWindow->sliderBelief
    { inquirerWindow->sliderInquiryChance = new Fl_Value_Slider(115, 139, 195, 20, "Chance");
      inquirerWindow->sliderInquiryChance->tooltip("Chance of engaging in inquiry each time step");
      inquirerWindow->sliderInquiryChance->type(5);
      inquirerWindow->sliderInquiryChance->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->sliderInquiryChance->labelfont(2);
      inquirerWindow->sliderInquiryChance->callback((Fl_Callback*)cb_inquirerWindow2);
      inquirerWindow->sliderInquiryChance->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* inquirerWindow->sliderInquiryChance
    { inquirerWindow->sliderVeracityChance = new Fl_Value_Slider(115, 169, 195, 20, "Accuracy");
      inquirerWindow->sliderVeracityChance->tooltip("Chance of any result of inquiry being true");
      inquirerWindow->sliderVeracityChance->type(5);
      inquirerWindow->sliderVeracityChance->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->sliderVeracityChance->labelfont(2);
      inquirerWindow->sliderVeracityChance->callback((Fl_Callback*)cb_inquirerWindow3);
      inquirerWindow->sliderVeracityChance->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* inquirerWindow->sliderVeracityChance
    { inquirerWindow->buttonSetParameters = new Fl_Button(235, 305, 110, 20, "Parameters...");
      inquirerWindow->buttonSetParameters->tooltip("Set parameters for how to value the link\'s properties during batch simulatio\
ns");
      inquirerWindow->buttonSetParameters->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->buttonSetParameters->callback((Fl_Callback*)cb_inquirerWindow4);
    } // Fl_Button* inquirerWindow->buttonSetParameters
    { Fl_Box* o = new Fl_Box(115, 199, 220, 80);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
    } // Fl_Box* o
    { inquirerWindow->viewTrust = new TrustView(117, 201, 216, 76);
      inquirerWindow->viewTrust->tooltip("Trust function for inquiry");
      inquirerWindow->viewTrust->box(FL_NO_BOX);
      inquirerWindow->viewTrust->color(FL_BACKGROUND_COLOR);
      inquirerWindow->viewTrust->selection_color(FL_BACKGROUND_COLOR);
      inquirerWindow->viewTrust->labeltype(FL_NORMAL_LABEL);
      inquirerWindow->viewTrust->labelfont(0);
      inquirerWindow->viewTrust->labelsize(14);
      inquirerWindow->viewTrust->labelcolor(FL_FOREGROUND_COLOR);
      inquirerWindow->viewTrust->callback((Fl_Callback*)cb_inquirerWindow5);
      inquirerWindow->viewTrust->align(Fl_Align(FL_ALIGN_CENTER));
      inquirerWindow->viewTrust->when(FL_WHEN_RELEASE);
    } // TrustView* inquirerWindow->viewTrust
    { Fl_Box* o = new Fl_Box(25, 205, 85, 20, "Trust");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { inquirerWindow->buttonUpdateTrust = new Fl_Check_Button(95, 255, 20, 20, "Update");
      inquirerWindow->buttonUpdateTrust->tooltip("Update trust function as inquiry results arrive");
      inquirerWindow->buttonUpdateTrust->down_box(FL_DOWN_BOX);
      inquirerWindow->buttonUpdateTrust->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->buttonUpdateTrust->labelfont(2);
      inquirerWindow->buttonUpdateTrust->callback((Fl_Callback*)cb_inquirerWindow6);
      inquirerWindow->buttonUpdateTrust->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* inquirerWindow->buttonUpdateTrust
    { Fl_Button* o = new Fl_Button(295, 80, 20, 20, "@returnarrow");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_returnarrow);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(315, 139, 20, 20, "@returnarrow");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_returnarrow1);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(315, 169, 20, 20, "@returnarrow");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_returnarrow2);
    } // Fl_Button* o
    { inquirerWindow->buttonIsTemplate = new Fl_Check_Button(210, 305, 20, 20, "Template");
      inquirerWindow->buttonIsTemplate->tooltip("Update trust function as information arrives along the link");
      inquirerWindow->buttonIsTemplate->down_box(FL_DOWN_BOX);
      inquirerWindow->buttonIsTemplate->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->buttonIsTemplate->labelfont(2);
      inquirerWindow->buttonIsTemplate->callback((Fl_Callback*)cb_inquirerWindow7);
      inquirerWindow->buttonIsTemplate->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* inquirerWindow->buttonIsTemplate
    { inquirerWindow->buttonIncludeInStatistics = new Fl_Check_Button(15, 305, 20, 20, "In Statistics");
      inquirerWindow->buttonIncludeInStatistics->tooltip("Include inquirer in statistics");
      inquirerWindow->buttonIncludeInStatistics->down_box(FL_DOWN_BOX);
      inquirerWindow->buttonIncludeInStatistics->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->buttonIncludeInStatistics->labelfont(2);
      inquirerWindow->buttonIncludeInStatistics->callback((Fl_Callback*)cb_inquirerWindow8);
      inquirerWindow->buttonIncludeInStatistics->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Check_Button* inquirerWindow->buttonIncludeInStatistics
    { inquirerWindow->outputSources = new Fl_Value_Output(145, 48, 50, 24, "Sources");
      inquirerWindow->outputSources->tooltip("Number of links to this inquirer / these inquirers");
      inquirerWindow->outputSources->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->outputSources->labelfont(2);
    } // Fl_Value_Output* inquirerWindow->outputSources
    { inquirerWindow->outputListeners = new Fl_Value_Output(265, 48, 50, 24, "Listeners");
      inquirerWindow->outputListeners->tooltip("Number of links from this inquirer / these inquirers");
      inquirerWindow->outputListeners->labeltype(FL_ENGRAVED_LABEL);
      inquirerWindow->outputListeners->labelfont(2);
    } // Fl_Value_Output* inquirerWindow->outputListeners
    { Fl_Button* o = new Fl_Button(327, 5, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_);
    } // Fl_Button* o
    inquirerWindow->end();
  } // InquirerWindow* inquirerWindow
  { linkWindow = new LinkWindow(360, 302, "Link");
    linkWindow->box(FL_FLAT_BOX);
    linkWindow->color(FL_BACKGROUND_COLOR);
    linkWindow->selection_color(FL_BACKGROUND_COLOR);
    linkWindow->labeltype(FL_NO_LABEL);
    linkWindow->labelfont(2);
    linkWindow->labelsize(14);
    linkWindow->labelcolor(FL_FOREGROUND_COLOR);
    linkWindow->user_data((void*)(this));
    linkWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    linkWindow->when(FL_WHEN_RELEASE);
    { linkWindow->sliderListenChance = new Fl_Value_Slider(120, 20, 180, 20, "Comm. Chance");
      linkWindow->sliderListenChance->tooltip("Chance of communication occuring across this link each time step");
      linkWindow->sliderListenChance->type(5);
      linkWindow->sliderListenChance->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->sliderListenChance->labelfont(2);
      linkWindow->sliderListenChance->callback((Fl_Callback*)cb_linkWindow);
      linkWindow->sliderListenChance->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* linkWindow->sliderListenChance
    { linkWindow->buttonSetParameters = new Fl_Button(230, 265, 110, 20, "Parameters...");
      linkWindow->buttonSetParameters->tooltip("Set parameters for how to value the link\'s properties during batch simulatio\
ns");
      linkWindow->buttonSetParameters->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->buttonSetParameters->callback((Fl_Callback*)cb_linkWindow1);
    } // Fl_Button* linkWindow->buttonSetParameters
    { linkWindow->sliderThreshold = new Fl_Value_Slider(120, 50, 180, 20, "Cert. Threshold");
      linkWindow->sliderThreshold->tooltip("Least (or for values < 0.5 highest) degree of belief required in order to say\
 that p");
      linkWindow->sliderThreshold->type(5);
      linkWindow->sliderThreshold->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->sliderThreshold->labelfont(2);
      linkWindow->sliderThreshold->callback((Fl_Callback*)cb_linkWindow2);
      linkWindow->sliderThreshold->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Value_Slider* linkWindow->sliderThreshold
    { Fl_Box* o = new Fl_Box(120, 160, 220, 80);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
    } // Fl_Box* o
    { linkWindow->viewTrust = new TrustView(122, 162, 216, 76);
      linkWindow->viewTrust->tooltip("Recipient\'s trust function for messages coming through this link");
      linkWindow->viewTrust->box(FL_NO_BOX);
      linkWindow->viewTrust->color(FL_BACKGROUND_COLOR);
      linkWindow->viewTrust->selection_color(FL_BACKGROUND_COLOR);
      linkWindow->viewTrust->labeltype(FL_NORMAL_LABEL);
      linkWindow->viewTrust->labelfont(0);
      linkWindow->viewTrust->labelsize(14);
      linkWindow->viewTrust->labelcolor(FL_FOREGROUND_COLOR);
      linkWindow->viewTrust->callback((Fl_Callback*)cb_linkWindow3);
      linkWindow->viewTrust->align(Fl_Align(FL_ALIGN_CENTER));
      linkWindow->viewTrust->when(FL_WHEN_RELEASE);
    } // TrustView* linkWindow->viewTrust
    { Fl_Box* o = new Fl_Box(30, 170, 85, 20, "Trust");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { linkWindow->buttonUpdateTrust = new Fl_Check_Button(100, 215, 20, 20, "Update");
      linkWindow->buttonUpdateTrust->tooltip("Update trust function as information arrives along the link");
      linkWindow->buttonUpdateTrust->down_box(FL_DOWN_BOX);
      linkWindow->buttonUpdateTrust->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->buttonUpdateTrust->labelfont(2);
      linkWindow->buttonUpdateTrust->callback((Fl_Callback*)cb_linkWindow4);
      linkWindow->buttonUpdateTrust->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* linkWindow->buttonUpdateTrust
    { Fl_Button* o = new Fl_Button(305, 20, 20, 20, "@returnarrow");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_returnarrow3);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(305, 50, 20, 20, "@returnarrow");
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_returnarrow4);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(120, 79, 220, 71);
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT_TOP));
      { linkWindow->buttonEvidencePolicy[0] = new Fl_Round_Button(125, 85, 75, 20, "None");
        linkWindow->buttonEvidencePolicy[0]->tooltip("Can communicate without having received any new evidence");
        linkWindow->buttonEvidencePolicy[0]->type(102);
        linkWindow->buttonEvidencePolicy[0]->down_box(FL_ROUND_DOWN_BOX);
        linkWindow->buttonEvidencePolicy[0]->labeltype(FL_ENGRAVED_LABEL);
        linkWindow->buttonEvidencePolicy[0]->labelfont(2);
        linkWindow->buttonEvidencePolicy[0]->callback((Fl_Callback*)cb_linkWindow5);
      } // Fl_Round_Button* linkWindow->buttonEvidencePolicy[0]
      { linkWindow->buttonEvidencePolicy[1] = new Fl_Round_Button(125, 105, 75, 20, "Inquiry");
        linkWindow->buttonEvidencePolicy[1]->tooltip("Must have received a result from inquiry since last to communicate");
        linkWindow->buttonEvidencePolicy[1]->type(102);
        linkWindow->buttonEvidencePolicy[1]->down_box(FL_ROUND_DOWN_BOX);
        linkWindow->buttonEvidencePolicy[1]->labeltype(FL_ENGRAVED_LABEL);
        linkWindow->buttonEvidencePolicy[1]->labelfont(2);
        linkWindow->buttonEvidencePolicy[1]->callback((Fl_Callback*)cb_linkWindow6);
      } // Fl_Round_Button* linkWindow->buttonEvidencePolicy[1]
      { linkWindow->buttonEvidencePolicy[2] = new Fl_Round_Button(125, 125, 75, 20, "Any");
        linkWindow->buttonEvidencePolicy[2]->tooltip("Must have received a result from inquiry or a message from someone else to co\
mmunicate");
        linkWindow->buttonEvidencePolicy[2]->type(102);
        linkWindow->buttonEvidencePolicy[2]->down_box(FL_ROUND_DOWN_BOX);
        linkWindow->buttonEvidencePolicy[2]->labeltype(FL_ENGRAVED_LABEL);
        linkWindow->buttonEvidencePolicy[2]->labelfont(2);
        linkWindow->buttonEvidencePolicy[2]->callback((Fl_Callback*)cb_linkWindow7);
      } // Fl_Round_Button* linkWindow->buttonEvidencePolicy[2]
      o->end();
    } // Fl_Group* o
    { Fl_Box* o = new Fl_Box(30, 85, 85, 20, "New Evidence");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(30, 105, 85, 20, "Requirement");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { linkWindow->buttonExcludePrior = new Fl_Check_Button(226, 105, 20, 20, "as fulfilling");
      linkWindow->buttonExcludePrior->tooltip("Allow communication once based just on prior, i.e. before receiving new infor\
mation");
      linkWindow->buttonExcludePrior->down_box(FL_DOWN_BOX);
      linkWindow->buttonExcludePrior->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->buttonExcludePrior->labelfont(2);
      linkWindow->buttonExcludePrior->callback((Fl_Callback*)cb_linkWindow8);
      linkWindow->buttonExcludePrior->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Check_Button* linkWindow->buttonExcludePrior
    { Fl_Box* o = new Fl_Box(245, 87, 85, 20, "Treat prior");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(246, 123, 85, 20, "requirement");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { linkWindow->buttonIsTemplate = new Fl_Check_Button(205, 265, 20, 20, "Template");
      linkWindow->buttonIsTemplate->tooltip("Update trust function as information arrives along the link");
      linkWindow->buttonIsTemplate->down_box(FL_DOWN_BOX);
      linkWindow->buttonIsTemplate->labeltype(FL_ENGRAVED_LABEL);
      linkWindow->buttonIsTemplate->labelfont(2);
      linkWindow->buttonIsTemplate->callback((Fl_Callback*)cb_linkWindow9);
      linkWindow->buttonIsTemplate->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* linkWindow->buttonIsTemplate
    { Fl_Box* o = new Fl_Box(20, 249, 320, 2);
      o->box(FL_THIN_DOWN_BOX);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(335, 5, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_1);
    } // Fl_Button* o
    linkWindow->end();
  } // LinkWindow* linkWindow
  { simulationWindow = new SimulationWindow(589, 111, "Simulation");
    simulationWindow->box(FL_UP_BOX);
    simulationWindow->color(FL_BACKGROUND_COLOR);
    simulationWindow->selection_color(FL_BACKGROUND_COLOR);
    simulationWindow->labeltype(FL_NO_LABEL);
    simulationWindow->labelfont(0);
    simulationWindow->labelsize(14);
    simulationWindow->labelcolor(FL_FOREGROUND_COLOR);
    simulationWindow->user_data((void*)(this));
    simulationWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    simulationWindow->when(FL_WHEN_CHANGED);
    { simulationWindow->buttonRun = new Fl_Button(60, 60, 35, 35, "@>");
      simulationWindow->buttonRun->tooltip("Start running simulation");
      simulationWindow->buttonRun->labelcolor((Fl_Color)24);
      simulationWindow->buttonRun->callback((Fl_Callback*)cb_simulationWindow);
    } // Fl_Button* simulationWindow->buttonRun
    { simulationWindow->buttonStep = new Fl_Button(20, 60, 35, 35, "@|>");
      simulationWindow->buttonStep->tooltip("Run simulation one step");
      simulationWindow->buttonStep->labelcolor((Fl_Color)24);
      simulationWindow->buttonStep->callback((Fl_Callback*)cb_simulationWindow1);
    } // Fl_Button* simulationWindow->buttonStep
    { simulationWindow->buttonPause = new Fl_Button(100, 60, 35, 35, "@||");
      simulationWindow->buttonPause->tooltip("Pause simulation");
      simulationWindow->buttonPause->labelcolor((Fl_Color)24);
      simulationWindow->buttonPause->callback((Fl_Callback*)cb_simulationWindow2);
      simulationWindow->buttonPause->deactivate();
    } // Fl_Button* simulationWindow->buttonPause
    { simulationWindow->outputTime = new Fl_Output(45, 25, 75, 25, "time");
      simulationWindow->outputTime->tooltip("Current time step");
      simulationWindow->outputTime->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->outputTime->labelfont(2);
      simulationWindow->outputTime->textsize(12);
      simulationWindow->outputTime->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* simulationWindow->outputTime
    { simulationWindow->outputEValue = new Fl_Output(155, 25, 80, 25, "e-value");
      simulationWindow->outputEValue->tooltip("Current E-value of configuration");
      simulationWindow->outputEValue->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->outputEValue->labelfont(2);
      simulationWindow->outputEValue->textsize(12);
      simulationWindow->outputEValue->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* simulationWindow->outputEValue
    { simulationWindow->outputEValueDelta = new Fl_Output(245, 25, 80, 25, "e-value \342\210\206");
      simulationWindow->outputEValueDelta->tooltip("Current E-value of configuration minus E-value at time step 0");
      simulationWindow->outputEValueDelta->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->outputEValueDelta->labelfont(2);
      simulationWindow->outputEValueDelta->textsize(12);
      simulationWindow->outputEValueDelta->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* simulationWindow->outputEValueDelta
    { simulationWindow->choiceLogLevel = new Fl_Choice(240, 70, 100, 25, "Log:");
      simulationWindow->choiceLogLevel->down_box(FL_BORDER_BOX);
      simulationWindow->choiceLogLevel->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->choiceLogLevel->labelfont(2);
      simulationWindow->choiceLogLevel->menu(menu_simulationWindow);
    } // Fl_Choice* simulationWindow->choiceLogLevel
    { simulationWindow->outputLog = new Fl_Text_Display(5, 110, 580, 245);
      simulationWindow->outputLog->box(FL_DOWN_BOX);
    } // Fl_Text_Display* simulationWindow->outputLog
    { Fl_Button* o = new Fl_Button(385, 70, 85, 25, "Cancel");
      o->tooltip("Exit without applying changes made during evolution");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel);
    } // Fl_Button* o
    { simulationWindow->buttonRewind = new Fl_Button(140, 60, 35, 35, "@|<");
      simulationWindow->buttonRewind->tooltip("Reset statistics variables and time to 0");
      simulationWindow->buttonRewind->labelcolor((Fl_Color)24);
      simulationWindow->buttonRewind->callback((Fl_Callback*)cb_simulationWindow3);
    } // Fl_Button* simulationWindow->buttonRewind
    { Apply = new Fl_Return_Button(480, 70, 90, 25, "Apply");
      Apply->tooltip("Apply changes made during society evolution");
      Apply->labeltype(FL_ENGRAVED_LABEL);
      Apply->labelfont(1);
      Apply->callback((Fl_Callback*)cb_Apply);
    } // Fl_Return_Button* Apply
    { simulationWindow->outputPolarisation = new Fl_Output(360, 25, 80, 25, "polarisation");
      simulationWindow->outputPolarisation->tooltip("Current E-value of configuration");
      simulationWindow->outputPolarisation->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->outputPolarisation->labelfont(2);
      simulationWindow->outputPolarisation->textsize(12);
      simulationWindow->outputPolarisation->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* simulationWindow->outputPolarisation
    { simulationWindow->outputPolarisationDelta = new Fl_Output(450, 25, 80, 25, "polarisation \342\210\206");
      simulationWindow->outputPolarisationDelta->tooltip("Current E-value of configuration minus E-value at time step 0");
      simulationWindow->outputPolarisationDelta->labeltype(FL_ENGRAVED_LABEL);
      simulationWindow->outputPolarisationDelta->labelfont(2);
      simulationWindow->outputPolarisationDelta->textsize(12);
      simulationWindow->outputPolarisationDelta->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Output* simulationWindow->outputPolarisationDelta
    { Fl_Button* o = new Fl_Button(549, 27, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_2);
    } // Fl_Button* o
    simulationWindow->set_modal();
    simulationWindow->clear_border();
    simulationWindow->end();
  } // SimulationWindow* simulationWindow
  { distributionWindow = new DistributionWindow(810, 656, "Distribution");
    distributionWindow->box(FL_UP_BOX);
    distributionWindow->color(FL_BACKGROUND_COLOR);
    distributionWindow->selection_color(FL_BACKGROUND_COLOR);
    distributionWindow->labeltype(FL_NO_LABEL);
    distributionWindow->labelfont(0);
    distributionWindow->labelsize(14);
    distributionWindow->labelcolor(FL_FOREGROUND_COLOR);
    distributionWindow->user_data((void*)(this));
    distributionWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    distributionWindow->when(FL_WHEN_RELEASE);
    { Fl_Box* o = new Fl_Box(20, 44, 772, 260);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { Fl_Return_Button* o = new Fl_Return_Button(705, 610, 85, 25, "OK");
      o->tooltip("Exit and save changes");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(610, 610, 85, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel1);
    } // Fl_Button* o
    { distributionWindow->view = new DistributionViewEditable(22, 46, 768, 256);
      distributionWindow->view->box(FL_NO_BOX);
      distributionWindow->view->color(FL_BACKGROUND_COLOR);
      distributionWindow->view->selection_color(FL_BACKGROUND_COLOR);
      distributionWindow->view->labeltype(FL_NORMAL_LABEL);
      distributionWindow->view->labelfont(0);
      distributionWindow->view->labelsize(14);
      distributionWindow->view->labelcolor(FL_FOREGROUND_COLOR);
      distributionWindow->view->align(Fl_Align(FL_ALIGN_CENTER));
      distributionWindow->view->when(FL_WHEN_RELEASE);
    } // DistributionViewEditable* distributionWindow->view
    { distributionWindow->boxLabel[0] = new Fl_Box(20, 305, 60, 20, "0");
      distributionWindow->boxLabel[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* distributionWindow->boxLabel[0]
    { distributionWindow->boxLabel[1] = new Fl_Box(182, 305, 60, 20, "0");
      distributionWindow->boxLabel[1]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* distributionWindow->boxLabel[1]
    { distributionWindow->boxLabel[2] = new Fl_Box(376, 305, 60, 20, "0");
      distributionWindow->boxLabel[2]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* distributionWindow->boxLabel[2]
    { distributionWindow->boxLabel[3] = new Fl_Box(568, 305, 60, 20, "0");
      distributionWindow->boxLabel[3]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* distributionWindow->boxLabel[3]
    { distributionWindow->boxLabel[4] = new Fl_Box(732, 305, 60, 20, "0");
      distributionWindow->boxLabel[4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* distributionWindow->boxLabel[4]
    { distributionWindow->choiceFilter = new Fl_Choice(573, 20, 180, 20, "Show");
      distributionWindow->choiceFilter->down_box(FL_BORDER_BOX);
      distributionWindow->choiceFilter->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->choiceFilter->labelfont(2);
      distributionWindow->choiceFilter->menu(menu_distributionWindow);
    } // Fl_Choice* distributionWindow->choiceFilter
    { distributionWindow->buttonSave = new Fl_Button(510, 610, 85, 25, "Save...");
      distributionWindow->buttonSave->tooltip("Save this distribution under a new name");
      distributionWindow->buttonSave->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->buttonSave->labelfont(1);
      distributionWindow->buttonSave->callback((Fl_Callback*)cb_distributionWindow);
    } // Fl_Button* distributionWindow->buttonSave
    { distributionWindow->buttonLoad = new Fl_Button(415, 610, 85, 25, "Load...");
      distributionWindow->buttonLoad->tooltip("Delete this distribution");
      distributionWindow->buttonLoad->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->buttonLoad->labelfont(1);
      distributionWindow->buttonLoad->callback((Fl_Callback*)cb_distributionWindow1);
    } // Fl_Button* distributionWindow->buttonLoad
    { Fl_Box* o = new Fl_Box(20, 23, 170, 22, "Probability Distribution");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Group* o = new Fl_Group(20, 350, 375, 65, "Point Distribution Aspect");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { distributionWindow->sliderPtValue = new Fl_Value_Slider(75, 385, 285, 20, "Value");
        distributionWindow->sliderPtValue->type(5);
        distributionWindow->sliderPtValue->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderPtValue->labelfont(2);
        distributionWindow->sliderPtValue->step(0.001);
        distributionWindow->sliderPtValue->value(0.01);
        distributionWindow->sliderPtValue->callback((Fl_Callback*)cb_distributionWindow2);
        distributionWindow->sliderPtValue->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderPtValue
      { Fl_Button* o = new Fl_Button(365, 385, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow5);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(365, 360, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow6);
      } // Fl_Button* o
      { distributionWindow->sliderWeight[DISTR_POINT] = new Fl_Value_Slider(75, 360, 285, 20, "Weight");
        distributionWindow->sliderWeight[DISTR_POINT]->type(5);
        distributionWindow->sliderWeight[DISTR_POINT]->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderWeight[DISTR_POINT]->labelfont(2);
        distributionWindow->sliderWeight[DISTR_POINT]->step(0.001);
        distributionWindow->sliderWeight[DISTR_POINT]->value(0.01);
        distributionWindow->sliderWeight[DISTR_POINT]->callback((Fl_Callback*)cb_distributionWindow3);
        distributionWindow->sliderWeight[DISTR_POINT]->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderWeight[DISTR_POINT]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(415, 350, 375, 90, "Interval Distribution Aspect");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { distributionWindow->sliderIntLower = new Fl_Value_Slider(470, 385, 285, 20, "Lower");
        distributionWindow->sliderIntLower->type(5);
        distributionWindow->sliderIntLower->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderIntLower->labelfont(2);
        distributionWindow->sliderIntLower->step(0.001);
        distributionWindow->sliderIntLower->value(0.01);
        distributionWindow->sliderIntLower->callback((Fl_Callback*)cb_distributionWindow4);
        distributionWindow->sliderIntLower->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderIntLower
      { Fl_Button* o = new Fl_Button(760, 385, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow7);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(760, 360, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow8);
      } // Fl_Button* o
      { distributionWindow->sliderWeight[DISTR_INTERVAL] = new Fl_Value_Slider(470, 360, 285, 20, "Weight");
        distributionWindow->sliderWeight[DISTR_INTERVAL]->type(5);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->labelfont(2);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->step(0.001);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->value(0.01);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->callback((Fl_Callback*)cb_distributionWindow5);
        distributionWindow->sliderWeight[DISTR_INTERVAL]->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderWeight[DISTR_INTERVAL]
      { distributionWindow->sliderIntUpper = new Fl_Value_Slider(470, 410, 285, 20, "Upper");
        distributionWindow->sliderIntUpper->type(5);
        distributionWindow->sliderIntUpper->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderIntUpper->labelfont(2);
        distributionWindow->sliderIntUpper->step(0.001);
        distributionWindow->sliderIntUpper->value(0.01);
        distributionWindow->sliderIntUpper->callback((Fl_Callback*)cb_distributionWindow6);
        distributionWindow->sliderIntUpper->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderIntUpper
      { Fl_Button* o = new Fl_Button(760, 410, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow9);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(20, 440, 375, 90, "Truncated Normal Distribution Aspect");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { distributionWindow->sliderNrmMidpt = new Fl_Value_Slider(75, 475, 285, 20, "Mean");
        distributionWindow->sliderNrmMidpt->type(5);
        distributionWindow->sliderNrmMidpt->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderNrmMidpt->labelfont(2);
        distributionWindow->sliderNrmMidpt->step(0.001);
        distributionWindow->sliderNrmMidpt->value(0.01);
        distributionWindow->sliderNrmMidpt->callback((Fl_Callback*)cb_distributionWindow7);
        distributionWindow->sliderNrmMidpt->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderNrmMidpt
      { Fl_Button* o = new Fl_Button(365, 475, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowa);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(365, 450, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowb);
      } // Fl_Button* o
      { distributionWindow->sliderWeight[DISTR_NORMAL] = new Fl_Value_Slider(75, 450, 285, 20, "Weight");
        distributionWindow->sliderWeight[DISTR_NORMAL]->type(5);
        distributionWindow->sliderWeight[DISTR_NORMAL]->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderWeight[DISTR_NORMAL]->labelfont(2);
        distributionWindow->sliderWeight[DISTR_NORMAL]->step(0.001);
        distributionWindow->sliderWeight[DISTR_NORMAL]->callback((Fl_Callback*)cb_distributionWindow8);
        distributionWindow->sliderWeight[DISTR_NORMAL]->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderWeight[DISTR_NORMAL]
      { distributionWindow->sliderNrmStddev = new Fl_Value_Slider(75, 500, 285, 20, "StdDev");
        distributionWindow->sliderNrmStddev->type(5);
        distributionWindow->sliderNrmStddev->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderNrmStddev->labelfont(2);
        distributionWindow->sliderNrmStddev->minimum(0.001);
        distributionWindow->sliderNrmStddev->maximum(3);
        distributionWindow->sliderNrmStddev->step(0.001);
        distributionWindow->sliderNrmStddev->value(0.01);
        distributionWindow->sliderNrmStddev->callback((Fl_Callback*)cb_distributionWindow9);
        distributionWindow->sliderNrmStddev->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderNrmStddev
      { Fl_Button* o = new Fl_Button(365, 500, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowc);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(415, 466, 375, 90, "Beta Distribution Aspect");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { distributionWindow->sliderBtAlpha = new Fl_Value_Slider(470, 501, 285, 20, "Alpha");
        distributionWindow->sliderBtAlpha->type(5);
        distributionWindow->sliderBtAlpha->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderBtAlpha->labelfont(2);
        distributionWindow->sliderBtAlpha->minimum(0.001);
        distributionWindow->sliderBtAlpha->maximum(10);
        distributionWindow->sliderBtAlpha->step(0.001);
        distributionWindow->sliderBtAlpha->value(1);
        distributionWindow->sliderBtAlpha->callback((Fl_Callback*)cb_distributionWindowa);
        distributionWindow->sliderBtAlpha->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderBtAlpha
      { Fl_Button* o = new Fl_Button(760, 501, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowd);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(760, 476, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowe);
      } // Fl_Button* o
      { distributionWindow->sliderWeight[DISTR_BETA] = new Fl_Value_Slider(470, 476, 285, 20, "Weight");
        distributionWindow->sliderWeight[DISTR_BETA]->type(5);
        distributionWindow->sliderWeight[DISTR_BETA]->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderWeight[DISTR_BETA]->labelfont(2);
        distributionWindow->sliderWeight[DISTR_BETA]->step(0.001);
        distributionWindow->sliderWeight[DISTR_BETA]->value(0.01);
        distributionWindow->sliderWeight[DISTR_BETA]->callback((Fl_Callback*)cb_distributionWindowb);
        distributionWindow->sliderWeight[DISTR_BETA]->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderWeight[DISTR_BETA]
      { distributionWindow->sliderBtBeta = new Fl_Value_Slider(470, 526, 285, 20, "Beta");
        distributionWindow->sliderBtBeta->type(5);
        distributionWindow->sliderBtBeta->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderBtBeta->labelfont(2);
        distributionWindow->sliderBtBeta->minimum(0.001);
        distributionWindow->sliderBtBeta->maximum(10);
        distributionWindow->sliderBtBeta->step(0.001);
        distributionWindow->sliderBtBeta->value(0.01);
        distributionWindow->sliderBtBeta->callback((Fl_Callback*)cb_distributionWindowc);
        distributionWindow->sliderBtBeta->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderBtBeta
      { Fl_Button* o = new Fl_Button(760, 526, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrowf);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(20, 555, 375, 70, "Freeform Distribution Aspect");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { Fl_Button* o = new Fl_Button(365, 565, 20, 20, "@returnarrow");
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_returnarrow10);
      } // Fl_Button* o
      { distributionWindow->sliderWeight[DISTR_FREEFORM] = new Fl_Value_Slider(75, 565, 285, 20, "Weight");
        distributionWindow->sliderWeight[DISTR_FREEFORM]->type(5);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->labelfont(2);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->step(0.001);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->value(0.01);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->callback((Fl_Callback*)cb_distributionWindowd);
        distributionWindow->sliderWeight[DISTR_FREEFORM]->align(Fl_Align(FL_ALIGN_LEFT));
      } // Fl_Value_Slider* distributionWindow->sliderWeight[DISTR_FREEFORM]
      { distributionWindow->buttonValues = new Fl_Button(140, 590, 100, 25, "Set Values...");
        distributionWindow->buttonValues->tooltip("Set parameters of the simulation numerically");
        distributionWindow->buttonValues->labeltype(FL_ENGRAVED_LABEL);
        distributionWindow->buttonValues->callback((Fl_Callback*)cb_distributionWindowe);
      } // Fl_Button* distributionWindow->buttonValues
      { Fl_Button* o = new Fl_Button(30, 590, 25, 25, "@<-");
        o->tooltip("Set parameters of the simulation numerically");
        o->labelcolor((Fl_Color)16);
        o->callback((Fl_Callback*)cb_3);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(60, 590, 25, 25, "@->");
        o->tooltip("Set parameters of the simulation numerically");
        o->labelcolor((Fl_Color)16);
        o->callback((Fl_Callback*)cb_4);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(90, 590, 45, 25, "Clear");
        o->tooltip("Set parameters of the simulation numerically");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->callback((Fl_Callback*)cb_Clear);
      } // Fl_Button* o
      { Fl_Button* o = new Fl_Button(245, 590, 140, 25, "Set To Expression...");
        o->tooltip("Set parameters of the simulation numerically");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->callback((Fl_Callback*)cb_Set2);
      } // Fl_Button* o
      o->end();
    } // Fl_Group* o
    { distributionWindow->inputResolution = new Fl_Spinner(710, 568, 75, 24, "Resolution");
      distributionWindow->inputResolution->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->inputResolution->labelfont(2);
      distributionWindow->inputResolution->minimum(16);
      distributionWindow->inputResolution->maximum(768);
      distributionWindow->inputResolution->step(16);
      distributionWindow->inputResolution->value(64);
      distributionWindow->inputResolution->callback((Fl_Callback*)cb_distributionWindowf);
    } // Fl_Spinner* distributionWindow->inputResolution
    { Fl_Button* o = new Fl_Button(175, 332, 20, 19, "@>");
      o->box(FL_NO_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->labelcolor(FL_INACTIVE_COLOR);
      o->callback((Fl_Callback*)cb_5);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(583, 332, 20, 19, "@>");
      o->box(FL_NO_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->labelcolor(FL_INACTIVE_COLOR);
      o->callback((Fl_Callback*)cb_6);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(255, 422, 20, 19, "@>");
      o->box(FL_NO_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->labelcolor(FL_INACTIVE_COLOR);
      o->callback((Fl_Callback*)cb_7);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(567, 448, 20, 19, "@>");
      o->box(FL_NO_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->labelcolor(FL_INACTIVE_COLOR);
      o->callback((Fl_Callback*)cb_8);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(199, 537, 20, 19, "@>");
      o->box(FL_NO_BOX);
      o->down_box(FL_DOWN_BOX);
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(10);
      o->labelcolor(FL_INACTIVE_COLOR);
      o->callback((Fl_Callback*)cb_9);
    } // Fl_Button* o
    { distributionWindow->buttonAlphaBeta = new Fl_Light_Button(705, 449, 85, 18, "Alpha/Beta");
      distributionWindow->buttonAlphaBeta->box(FL_THIN_UP_BOX);
      distributionWindow->buttonAlphaBeta->down_box(FL_THIN_DOWN_BOX);
      distributionWindow->buttonAlphaBeta->value(1);
      distributionWindow->buttonAlphaBeta->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->buttonAlphaBeta->labelfont(2);
      distributionWindow->buttonAlphaBeta->labelsize(12);
      distributionWindow->buttonAlphaBeta->callback((Fl_Callback*)cb_distributionWindow10);
    } // Fl_Light_Button* distributionWindow->buttonAlphaBeta
    { distributionWindow->buttonMeanDev = new Fl_Light_Button(620, 449, 85, 18, "Mean/Dev");
      distributionWindow->buttonMeanDev->box(FL_THIN_UP_BOX);
      distributionWindow->buttonMeanDev->down_box(FL_THIN_DOWN_BOX);
      distributionWindow->buttonMeanDev->labeltype(FL_ENGRAVED_LABEL);
      distributionWindow->buttonMeanDev->labelfont(2);
      distributionWindow->buttonMeanDev->labelsize(12);
      distributionWindow->buttonMeanDev->callback((Fl_Callback*)cb_distributionWindow11);
    } // Fl_Light_Button* distributionWindow->buttonMeanDev
    { Fl_Button* o = new Fl_Button(780, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_a);
    } // Fl_Button* o
    distributionWindow->set_modal();
    distributionWindow->clear_border();
    distributionWindow->end();
  } // DistributionWindow* distributionWindow
  { createInquirerPrefsWindow = new CreateInquirerPrefsWindow(452, 266, "Inquirer Creation Preferences");
    createInquirerPrefsWindow->box(FL_UP_BOX);
    createInquirerPrefsWindow->color(FL_BACKGROUND_COLOR);
    createInquirerPrefsWindow->selection_color(FL_BACKGROUND_COLOR);
    createInquirerPrefsWindow->labeltype(FL_NO_LABEL);
    createInquirerPrefsWindow->labelfont(0);
    createInquirerPrefsWindow->labelsize(14);
    createInquirerPrefsWindow->labelcolor(FL_FOREGROUND_COLOR);
    createInquirerPrefsWindow->user_data((void*)(this));
    createInquirerPrefsWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    createInquirerPrefsWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(355, 220, 70, 25, "OK");
      o->tooltip("Save and exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK1);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(280, 220, 70, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel2);
    } // Fl_Button* o
    { createInquirerPrefsWindow->buttonIncludeInStatistics = new Fl_Check_Button(20, 200, 20, 25, "Get Statistics");
      createInquirerPrefsWindow->buttonIncludeInStatistics->tooltip("Include inquirer in statistics");
      createInquirerPrefsWindow->buttonIncludeInStatistics->down_box(FL_DOWN_BOX);
      createInquirerPrefsWindow->buttonIncludeInStatistics->labeltype(FL_ENGRAVED_LABEL);
      createInquirerPrefsWindow->buttonIncludeInStatistics->labelfont(2);
      createInquirerPrefsWindow->buttonIncludeInStatistics->callback((Fl_Callback*)cb_createInquirerPrefsWindow);
      createInquirerPrefsWindow->buttonIncludeInStatistics->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Check_Button* createInquirerPrefsWindow->buttonIncludeInStatistics
    { Fl_Box* o = new Fl_Box(20, 31, 196, 68, "Starting Belief ");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createInquirerPrefsWindow->viewBelief = new DistributionView(22, 33, 192, 64);
      createInquirerPrefsWindow->viewBelief->tooltip("Degree of belief distribution");
      createInquirerPrefsWindow->viewBelief->box(FL_NO_BOX);
      createInquirerPrefsWindow->viewBelief->color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewBelief->selection_color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewBelief->labeltype(FL_NORMAL_LABEL);
      createInquirerPrefsWindow->viewBelief->labelfont(0);
      createInquirerPrefsWindow->viewBelief->labelsize(14);
      createInquirerPrefsWindow->viewBelief->labelcolor(FL_FOREGROUND_COLOR);
      createInquirerPrefsWindow->viewBelief->callback((Fl_Callback*)cb_createInquirerPrefsWindow1);
      createInquirerPrefsWindow->viewBelief->align(Fl_Align(FL_ALIGN_CENTER));
      createInquirerPrefsWindow->viewBelief->when(FL_WHEN_RELEASE);
    } // DistributionView* createInquirerPrefsWindow->viewBelief
    { Fl_Box* o = new Fl_Box(235, 32, 196, 68, "Inquiry Accuracy");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createInquirerPrefsWindow->viewInquiryAccuracy = new DistributionView(237, 34, 192, 64);
      createInquirerPrefsWindow->viewInquiryAccuracy->tooltip("Inquiry accuracy chance distribution");
      createInquirerPrefsWindow->viewInquiryAccuracy->box(FL_NO_BOX);
      createInquirerPrefsWindow->viewInquiryAccuracy->color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryAccuracy->selection_color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryAccuracy->labeltype(FL_NORMAL_LABEL);
      createInquirerPrefsWindow->viewInquiryAccuracy->labelfont(0);
      createInquirerPrefsWindow->viewInquiryAccuracy->labelsize(14);
      createInquirerPrefsWindow->viewInquiryAccuracy->labelcolor(FL_FOREGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryAccuracy->callback((Fl_Callback*)cb_createInquirerPrefsWindow2);
      createInquirerPrefsWindow->viewInquiryAccuracy->align(Fl_Align(FL_ALIGN_CENTER));
      createInquirerPrefsWindow->viewInquiryAccuracy->when(FL_WHEN_RELEASE);
    } // DistributionView* createInquirerPrefsWindow->viewInquiryAccuracy
    { Fl_Box* o = new Fl_Box(235, 122, 196, 68, "Inquiry Trust");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createInquirerPrefsWindow->viewInquiryTrust = new MetaDistributionView(237, 124, 192, 64);
      createInquirerPrefsWindow->viewInquiryTrust->tooltip("Inquiry trust function metadistribution");
      createInquirerPrefsWindow->viewInquiryTrust->box(FL_NO_BOX);
      createInquirerPrefsWindow->viewInquiryTrust->color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryTrust->selection_color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryTrust->labeltype(FL_NORMAL_LABEL);
      createInquirerPrefsWindow->viewInquiryTrust->labelfont(0);
      createInquirerPrefsWindow->viewInquiryTrust->labelsize(14);
      createInquirerPrefsWindow->viewInquiryTrust->labelcolor(FL_FOREGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryTrust->callback((Fl_Callback*)cb_createInquirerPrefsWindow3);
      createInquirerPrefsWindow->viewInquiryTrust->align(Fl_Align(FL_ALIGN_CENTER));
      createInquirerPrefsWindow->viewInquiryTrust->when(FL_WHEN_RELEASE);
    } // MetaDistributionView* createInquirerPrefsWindow->viewInquiryTrust
    { Fl_Box* o = new Fl_Box(20, 122, 196, 68, "Inquiry Chance");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createInquirerPrefsWindow->viewInquiryChance = new DistributionView(22, 124, 192, 64);
      createInquirerPrefsWindow->viewInquiryChance->tooltip("Inquiry chance distribution");
      createInquirerPrefsWindow->viewInquiryChance->box(FL_NO_BOX);
      createInquirerPrefsWindow->viewInquiryChance->color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryChance->selection_color(FL_BACKGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryChance->labeltype(FL_NORMAL_LABEL);
      createInquirerPrefsWindow->viewInquiryChance->labelfont(0);
      createInquirerPrefsWindow->viewInquiryChance->labelsize(14);
      createInquirerPrefsWindow->viewInquiryChance->labelcolor(FL_FOREGROUND_COLOR);
      createInquirerPrefsWindow->viewInquiryChance->callback((Fl_Callback*)cb_createInquirerPrefsWindow4);
      createInquirerPrefsWindow->viewInquiryChance->align(Fl_Align(FL_ALIGN_CENTER));
      createInquirerPrefsWindow->viewInquiryChance->when(FL_WHEN_RELEASE);
    } // DistributionView* createInquirerPrefsWindow->viewInquiryChance
    { createInquirerPrefsWindow->buttonUpdateInquiryTrust = new Fl_Check_Button(20, 220, 20, 25, "Update Inquiry Trust");
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->tooltip("Update inquirer\'s inquiry trust function when getting results from inquiry");
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->down_box(FL_DOWN_BOX);
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->labeltype(FL_ENGRAVED_LABEL);
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->labelfont(2);
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->callback((Fl_Callback*)cb_createInquirerPrefsWindow5);
      createInquirerPrefsWindow->buttonUpdateInquiryTrust->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Check_Button* createInquirerPrefsWindow->buttonUpdateInquiryTrust
    createInquirerPrefsWindow->set_modal();
    createInquirerPrefsWindow->clear_border();
    createInquirerPrefsWindow->end();
  } // CreateInquirerPrefsWindow* createInquirerPrefsWindow
  { createLinkPrefsWindow = new CreateLinkPrefsWindow(448, 249, "Linking Preferences");
    createLinkPrefsWindow->box(FL_UP_BOX);
    createLinkPrefsWindow->color(FL_BACKGROUND_COLOR);
    createLinkPrefsWindow->selection_color(FL_BACKGROUND_COLOR);
    createLinkPrefsWindow->labeltype(FL_NO_LABEL);
    createLinkPrefsWindow->labelfont(0);
    createLinkPrefsWindow->labelsize(14);
    createLinkPrefsWindow->labelcolor(FL_FOREGROUND_COLOR);
    createLinkPrefsWindow->user_data((void*)(this));
    createLinkPrefsWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    createLinkPrefsWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(360, 210, 70, 25, "OK");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK2);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(280, 210, 70, 25, "Cancel");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel3);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(20, 27, 196, 68, "Comunication Chance ");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createLinkPrefsWindow->viewListenChance = new DistributionView(22, 29, 192, 64);
      createLinkPrefsWindow->viewListenChance->tooltip("Communication chance distribution");
      createLinkPrefsWindow->viewListenChance->box(FL_NO_BOX);
      createLinkPrefsWindow->viewListenChance->color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewListenChance->selection_color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewListenChance->labeltype(FL_NORMAL_LABEL);
      createLinkPrefsWindow->viewListenChance->labelfont(0);
      createLinkPrefsWindow->viewListenChance->labelsize(14);
      createLinkPrefsWindow->viewListenChance->labelcolor(FL_FOREGROUND_COLOR);
      createLinkPrefsWindow->viewListenChance->callback((Fl_Callback*)cb_createLinkPrefsWindow);
      createLinkPrefsWindow->viewListenChance->align(Fl_Align(FL_ALIGN_CENTER));
      createLinkPrefsWindow->viewListenChance->when(FL_WHEN_RELEASE);
    } // DistributionView* createLinkPrefsWindow->viewListenChance
    { Fl_Box* o = new Fl_Box(235, 27, 196, 68, "Threshold");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createLinkPrefsWindow->viewThreshold = new DistributionView(237, 29, 192, 64);
      createLinkPrefsWindow->viewThreshold->tooltip("Distribution of communication belief threshold");
      createLinkPrefsWindow->viewThreshold->box(FL_NO_BOX);
      createLinkPrefsWindow->viewThreshold->color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewThreshold->selection_color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewThreshold->labeltype(FL_NORMAL_LABEL);
      createLinkPrefsWindow->viewThreshold->labelfont(0);
      createLinkPrefsWindow->viewThreshold->labelsize(14);
      createLinkPrefsWindow->viewThreshold->labelcolor(FL_FOREGROUND_COLOR);
      createLinkPrefsWindow->viewThreshold->callback((Fl_Callback*)cb_createLinkPrefsWindow1);
      createLinkPrefsWindow->viewThreshold->align(Fl_Align(FL_ALIGN_CENTER));
      createLinkPrefsWindow->viewThreshold->when(FL_WHEN_RELEASE);
    } // DistributionView* createLinkPrefsWindow->viewThreshold
    { Fl_Box* o = new Fl_Box(20, 121, 196, 68, "Trust");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* o
    { createLinkPrefsWindow->viewTrust = new MetaDistributionView(22, 123, 192, 64);
      createLinkPrefsWindow->viewTrust->tooltip("Trust function metadistribution");
      createLinkPrefsWindow->viewTrust->box(FL_NO_BOX);
      createLinkPrefsWindow->viewTrust->color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewTrust->selection_color(FL_BACKGROUND_COLOR);
      createLinkPrefsWindow->viewTrust->labeltype(FL_NORMAL_LABEL);
      createLinkPrefsWindow->viewTrust->labelfont(0);
      createLinkPrefsWindow->viewTrust->labelsize(14);
      createLinkPrefsWindow->viewTrust->labelcolor(FL_FOREGROUND_COLOR);
      createLinkPrefsWindow->viewTrust->callback((Fl_Callback*)cb_createLinkPrefsWindow2);
      createLinkPrefsWindow->viewTrust->align(Fl_Align(FL_ALIGN_CENTER));
      createLinkPrefsWindow->viewTrust->when(FL_WHEN_RELEASE);
    } // MetaDistributionView* createLinkPrefsWindow->viewTrust
    { createLinkPrefsWindow->buttonUpdateTrust = new Fl_Check_Button(200, 103, 20, 20, "Update");
      createLinkPrefsWindow->buttonUpdateTrust->tooltip("Update trust function when link is used");
      createLinkPrefsWindow->buttonUpdateTrust->down_box(FL_DOWN_BOX);
      createLinkPrefsWindow->buttonUpdateTrust->labeltype(FL_ENGRAVED_LABEL);
      createLinkPrefsWindow->buttonUpdateTrust->labelfont(2);
      createLinkPrefsWindow->buttonUpdateTrust->callback((Fl_Callback*)cb_createLinkPrefsWindow3);
      createLinkPrefsWindow->buttonUpdateTrust->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Check_Button* createLinkPrefsWindow->buttonUpdateTrust
    { Fl_Group* o = new Fl_Group(235, 123, 195, 68, "New Evidence Requirement");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      { createLinkPrefsWindow->buttonEvidencePolicy[0] = new Fl_Round_Button(240, 127, 75, 20, "None");
        createLinkPrefsWindow->buttonEvidencePolicy[0]->tooltip("Can communicate without having received any new evidence");
        createLinkPrefsWindow->buttonEvidencePolicy[0]->type(102);
        createLinkPrefsWindow->buttonEvidencePolicy[0]->down_box(FL_ROUND_DOWN_BOX);
        createLinkPrefsWindow->buttonEvidencePolicy[0]->labeltype(FL_ENGRAVED_LABEL);
        createLinkPrefsWindow->buttonEvidencePolicy[0]->labelfont(2);
        createLinkPrefsWindow->buttonEvidencePolicy[0]->callback((Fl_Callback*)cb_createLinkPrefsWindow4);
      } // Fl_Round_Button* createLinkPrefsWindow->buttonEvidencePolicy[0]
      { createLinkPrefsWindow->buttonEvidencePolicy[1] = new Fl_Round_Button(240, 147, 75, 20, "Inquiry");
        createLinkPrefsWindow->buttonEvidencePolicy[1]->tooltip("Must have received a result from inquiry since last to communicate");
        createLinkPrefsWindow->buttonEvidencePolicy[1]->type(102);
        createLinkPrefsWindow->buttonEvidencePolicy[1]->down_box(FL_ROUND_DOWN_BOX);
        createLinkPrefsWindow->buttonEvidencePolicy[1]->labeltype(FL_ENGRAVED_LABEL);
        createLinkPrefsWindow->buttonEvidencePolicy[1]->labelfont(2);
        createLinkPrefsWindow->buttonEvidencePolicy[1]->callback((Fl_Callback*)cb_createLinkPrefsWindow5);
      } // Fl_Round_Button* createLinkPrefsWindow->buttonEvidencePolicy[1]
      { createLinkPrefsWindow->buttonEvidencePolicy[2] = new Fl_Round_Button(240, 167, 75, 20, "Any");
        createLinkPrefsWindow->buttonEvidencePolicy[2]->tooltip("Must have received a result from inquiry or a message from someone else to co\
mmunicate");
        createLinkPrefsWindow->buttonEvidencePolicy[2]->type(102);
        createLinkPrefsWindow->buttonEvidencePolicy[2]->down_box(FL_ROUND_DOWN_BOX);
        createLinkPrefsWindow->buttonEvidencePolicy[2]->labeltype(FL_ENGRAVED_LABEL);
        createLinkPrefsWindow->buttonEvidencePolicy[2]->labelfont(2);
        createLinkPrefsWindow->buttonEvidencePolicy[2]->callback((Fl_Callback*)cb_createLinkPrefsWindow6);
      } // Fl_Round_Button* createLinkPrefsWindow->buttonEvidencePolicy[2]
      o->end();
    } // Fl_Group* o
    { createLinkPrefsWindow->buttonExcludePrior = new Fl_Check_Button(325, 147, 20, 20, "as fulfilling");
      createLinkPrefsWindow->buttonExcludePrior->tooltip("Allow communication once based just on prior, i.e. before receiving new infor\
mation");
      createLinkPrefsWindow->buttonExcludePrior->down_box(FL_DOWN_BOX);
      createLinkPrefsWindow->buttonExcludePrior->labeltype(FL_ENGRAVED_LABEL);
      createLinkPrefsWindow->buttonExcludePrior->labelfont(2);
      createLinkPrefsWindow->buttonExcludePrior->callback((Fl_Callback*)cb_createLinkPrefsWindow7);
      createLinkPrefsWindow->buttonExcludePrior->align(Fl_Align(FL_ALIGN_RIGHT));
    } // Fl_Check_Button* createLinkPrefsWindow->buttonExcludePrior
    { Fl_Box* o = new Fl_Box(345, 129, 85, 20, "Treat prior");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(345, 165, 85, 20, "requirement");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    createLinkPrefsWindow->set_modal();
    createLinkPrefsWindow->clear_border();
    createLinkPrefsWindow->end();
  } // CreateLinkPrefsWindow* createLinkPrefsWindow
  { batchSimulationWindow = new BatchSimulationWindow(640, 334, "Simulation");
    batchSimulationWindow->box(FL_UP_BOX);
    batchSimulationWindow->color(FL_BACKGROUND_COLOR);
    batchSimulationWindow->selection_color(FL_BACKGROUND_COLOR);
    batchSimulationWindow->labeltype(FL_NO_LABEL);
    batchSimulationWindow->labelfont(2);
    batchSimulationWindow->labelsize(14);
    batchSimulationWindow->labelcolor(FL_FOREGROUND_COLOR);
    batchSimulationWindow->user_data((void*)(this));
    batchSimulationWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    batchSimulationWindow->when(FL_WHEN_RELEASE);
    { batchSimulationWindow->buttonCancel = new Fl_Button(525, 245, 95, 25, "Cancel");
      batchSimulationWindow->buttonCancel->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->buttonCancel->labelfont(1);
      batchSimulationWindow->buttonCancel->callback((Fl_Callback*)cb_batchSimulationWindow);
    } // Fl_Button* batchSimulationWindow->buttonCancel
    { Fl_Return_Button* o = new Fl_Return_Button(525, 280, 95, 25, "OK");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK3);
    } // Fl_Return_Button* o
    { batchSimulationWindow->buttonLoad = new Fl_Button(525, 165, 95, 25, "Load...");
      batchSimulationWindow->buttonLoad->tooltip("Load a batch simulation");
      batchSimulationWindow->buttonLoad->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->buttonLoad->labelfont(1);
      batchSimulationWindow->buttonLoad->callback((Fl_Callback*)cb_batchSimulationWindow1);
    } // Fl_Button* batchSimulationWindow->buttonLoad
    { batchSimulationWindow->buttonSave = new Fl_Button(525, 200, 95, 25, "Save...");
      batchSimulationWindow->buttonSave->tooltip("Save this batch simulation to a file");
      batchSimulationWindow->buttonSave->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->buttonSave->labelfont(1);
      batchSimulationWindow->buttonSave->callback((Fl_Callback*)cb_batchSimulationWindow2);
    } // Fl_Button* batchSimulationWindow->buttonSave
    { batchSimulationWindow->groupTabs = new Fl_Tabs(65, 20, 440, 290);
      { batchSimulationWindow->groupStage = new Fl_Group(65, 45, 440, 265, "Stage");
        batchSimulationWindow->groupStage->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupStage->labelfont(2);
        batchSimulationWindow->groupStage->hide();
        { batchSimulationWindow->inputStepsPerTrial = new Fl_Value_Input(250, 150, 80, 25, "Number of Steps");
          batchSimulationWindow->inputStepsPerTrial->tooltip("Number of time steps in stage");
          batchSimulationWindow->inputStepsPerTrial->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->inputStepsPerTrial->labelfont(2);
          batchSimulationWindow->inputStepsPerTrial->minimum(1);
          batchSimulationWindow->inputStepsPerTrial->maximum(1e+06);
          batchSimulationWindow->inputStepsPerTrial->step(1);
          batchSimulationWindow->inputStepsPerTrial->value(100);
          batchSimulationWindow->inputStepsPerTrial->callback((Fl_Callback*)cb_batchSimulationWindow3);
          batchSimulationWindow->inputStepsPerTrial->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Value_Input* batchSimulationWindow->inputStepsPerTrial
        batchSimulationWindow->groupStage->end();
        Fl_Group::current()->resizable(batchSimulationWindow->groupStage);
      } // Fl_Group* batchSimulationWindow->groupStage
      { batchSimulationWindow->groupNetwork = new Fl_Group(65, 45, 440, 265, "Network");
        batchSimulationWindow->groupNetwork->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupNetwork->labelfont(2);
        batchSimulationWindow->groupNetwork->hide();
        { batchSimulationWindow->buttonVaryPopulation = new Fl_Check_Button(248, 54, 20, 20, "Create");
          batchSimulationWindow->buttonVaryPopulation->tooltip("Should simulation generate a whole new society at the start of the stage?");
          batchSimulationWindow->buttonVaryPopulation->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryPopulation->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryPopulation->labelfont(2);
          batchSimulationWindow->buttonVaryPopulation->callback((Fl_Callback*)cb_batchSimulationWindow4);
          batchSimulationWindow->buttonVaryPopulation->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryPopulation
        { batchSimulationWindow->inputPopulationMin = new Fl_Value_Input(73, 151, 40, 18, "Min");
          batchSimulationWindow->inputPopulationMin->tooltip("Minimum population");
          batchSimulationWindow->inputPopulationMin->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->inputPopulationMin->labelfont(2);
          batchSimulationWindow->inputPopulationMin->minimum(1);
          batchSimulationWindow->inputPopulationMin->maximum(999);
          batchSimulationWindow->inputPopulationMin->step(1);
          batchSimulationWindow->inputPopulationMin->callback((Fl_Callback*)cb_batchSimulationWindow5);
          batchSimulationWindow->inputPopulationMin->align(Fl_Align(FL_ALIGN_BOTTOM));
        } // Fl_Value_Input* batchSimulationWindow->inputPopulationMin
        { batchSimulationWindow->inputPopulationMax = new Fl_Value_Input(233, 151, 40, 18, "Max");
          batchSimulationWindow->inputPopulationMax->tooltip("Maximum population");
          batchSimulationWindow->inputPopulationMax->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->inputPopulationMax->labelfont(2);
          batchSimulationWindow->inputPopulationMax->minimum(1);
          batchSimulationWindow->inputPopulationMax->maximum(999);
          batchSimulationWindow->inputPopulationMax->step(1);
          batchSimulationWindow->inputPopulationMax->callback((Fl_Callback*)cb_batchSimulationWindow6);
          batchSimulationWindow->inputPopulationMax->align(Fl_Align(FL_ALIGN_BOTTOM));
        } // Fl_Value_Input* batchSimulationWindow->inputPopulationMax
        { batchSimulationWindow->buttonVaryLinks = new Fl_Check_Button(470, 53, 20, 20, "Create");
          batchSimulationWindow->buttonVaryLinks->tooltip("Should simulation generate a whole new link network at the start of this stag\
e?");
          batchSimulationWindow->buttonVaryLinks->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryLinks->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryLinks->labelfont(2);
          batchSimulationWindow->buttonVaryLinks->callback((Fl_Callback*)cb_batchSimulationWindow7);
          batchSimulationWindow->buttonVaryLinks->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryLinks
        { batchSimulationWindow->boxPopulation = new Fl_Box(80, 72, 184, 68, "Population");
          batchSimulationWindow->boxPopulation->box(FL_DOWN_BOX);
          batchSimulationWindow->boxPopulation->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxPopulation->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxPopulation->labelfont(2);
          batchSimulationWindow->boxPopulation->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxPopulation
        { batchSimulationWindow->viewPopulation = new DistributionView(82, 74, 180, 64);
          batchSimulationWindow->viewPopulation->tooltip("Distribution of total number of inquirers");
          batchSimulationWindow->viewPopulation->box(FL_NO_BOX);
          batchSimulationWindow->viewPopulation->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewPopulation->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewPopulation->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewPopulation->labelfont(0);
          batchSimulationWindow->viewPopulation->labelsize(14);
          batchSimulationWindow->viewPopulation->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewPopulation->callback((Fl_Callback*)cb_batchSimulationWindow8);
          batchSimulationWindow->viewPopulation->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewPopulation->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewPopulation
        { Fl_Box* o = new Fl_Box(284, 57, 2, 238);
          o->box(FL_THIN_DOWN_BOX);
        } // Fl_Box* o
        { batchSimulationWindow->boxLinks = new Fl_Box(302, 71, 184, 68, "Link Density");
          batchSimulationWindow->boxLinks->box(FL_DOWN_BOX);
          batchSimulationWindow->boxLinks->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxLinks->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxLinks->labelfont(2);
          batchSimulationWindow->boxLinks->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxLinks
        { batchSimulationWindow->viewLinkDensity = new DistributionView(304, 73, 180, 64);
          batchSimulationWindow->viewLinkDensity->tooltip("Distribution of link density / number of links");
          batchSimulationWindow->viewLinkDensity->box(FL_NO_BOX);
          batchSimulationWindow->viewLinkDensity->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewLinkDensity->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewLinkDensity->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewLinkDensity->labelfont(0);
          batchSimulationWindow->viewLinkDensity->labelsize(14);
          batchSimulationWindow->viewLinkDensity->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewLinkDensity->callback((Fl_Callback*)cb_batchSimulationWindow9);
          batchSimulationWindow->viewLinkDensity->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewLinkDensity->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewLinkDensity
        { batchSimulationWindow->buttonLimitLinksToOnePerPair = new Fl_Check_Button(302, 173, 85, 22, "\342\211\244""1 / pair");
          batchSimulationWindow->buttonLimitLinksToOnePerPair->tooltip("Limit links to at most one per ordered pair");
          batchSimulationWindow->buttonLimitLinksToOnePerPair->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonLimitLinksToOnePerPair->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonLimitLinksToOnePerPair->labelfont(2);
          batchSimulationWindow->buttonLimitLinksToOnePerPair->callback((Fl_Callback*)cb_batchSimulationWindowa);
        } // Fl_Check_Button* batchSimulationWindow->buttonLimitLinksToOnePerPair
        { batchSimulationWindow->groupWeights = new Fl_Group(305, 200, 180, 97, "Weights");
          batchSimulationWindow->groupWeights->box(FL_ENGRAVED_FRAME);
          batchSimulationWindow->groupWeights->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->groupWeights->labelfont(2);
          batchSimulationWindow->groupWeights->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          { batchSimulationWindow->inputLinkWeights[WT_SYMMETRY] = new Fl_Value_Input(425, 228, 55, 19, "Symmetry:");
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->tooltip("Additional weight for inquirers that are listeners of the current one");
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->labelfont(2);
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->minimum(-9999);
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->maximum(9999);
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->step(0.001);
            batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]->callback((Fl_Callback*)cb_batchSimulationWindowb);
          } // Fl_Value_Input* batchSimulationWindow->inputLinkWeights[WT_SYMMETRY]
          { batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY] = new Fl_Value_Input(425, 250, 55, 19, "Transitivity:");
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->tooltip("Additional weight for inquirers that are linked to inquirers linked to the cu\
rrent one");
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->labelfont(2);
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->minimum(-9999);
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->maximum(9999);
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->step(0.001);
            batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]->callback((Fl_Callback*)cb_batchSimulationWindowc);
          } // Fl_Value_Input* batchSimulationWindow->inputLinkWeights[WT_TRANSITIVITY]
          { batchSimulationWindow->inputLinkWeights[WT_CLUSTERING] = new Fl_Value_Input(425, 272, 55, 18, "Clustering:");
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->tooltip("Additional weight per listener");
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->labelfont(2);
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->minimum(-9999);
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->maximum(9999);
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->step(0.001);
            batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]->callback((Fl_Callback*)cb_batchSimulationWindowd);
          } // Fl_Value_Input* batchSimulationWindow->inputLinkWeights[WT_CLUSTERING]
          { batchSimulationWindow->inputLinkWeights[WT_BASE] = new Fl_Value_Input(425, 206, 55, 19, "Base:");
            batchSimulationWindow->inputLinkWeights[WT_BASE]->tooltip("Base weight for each inquirer");
            batchSimulationWindow->inputLinkWeights[WT_BASE]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputLinkWeights[WT_BASE]->labelfont(2);
            batchSimulationWindow->inputLinkWeights[WT_BASE]->maximum(9999);
            batchSimulationWindow->inputLinkWeights[WT_BASE]->step(0.001);
            batchSimulationWindow->inputLinkWeights[WT_BASE]->value(1);
            batchSimulationWindow->inputLinkWeights[WT_BASE]->callback((Fl_Callback*)cb_batchSimulationWindowe);
          } // Fl_Value_Input* batchSimulationWindow->inputLinkWeights[WT_BASE]
          batchSimulationWindow->groupWeights->end();
        } // Fl_Group* batchSimulationWindow->groupWeights
        { Fl_Box* o = new Fl_Box(84, 140, 2, 11);
          o->box(FL_THIN_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
        } // Fl_Box* o
        { Fl_Box* o = new Fl_Box(259, 140, 2, 11);
          o->box(FL_THIN_DOWN_BOX);
          o->labeltype(FL_ENGRAVED_LABEL);
        } // Fl_Box* o
        { batchSimulationWindow->linkDensityViewLabel[0] = new Fl_Box(292, 139, 30, 16, "0");
          batchSimulationWindow->linkDensityViewLabel[0]->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->linkDensityViewLabel[0]->labelsize(12);
        } // Fl_Box* batchSimulationWindow->linkDensityViewLabel[0]
        { batchSimulationWindow->linkDensityViewLabel[2] = new Fl_Box(460, 139, 45, 16, "1.0");
          batchSimulationWindow->linkDensityViewLabel[2]->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->linkDensityViewLabel[2]->labelsize(12);
        } // Fl_Box* batchSimulationWindow->linkDensityViewLabel[2]
        { batchSimulationWindow->linkDensityViewLabel[1] = new Fl_Box(370, 139, 50, 16, "0.5");
          batchSimulationWindow->linkDensityViewLabel[1]->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->linkDensityViewLabel[1]->labelsize(12);
        } // Fl_Box* batchSimulationWindow->linkDensityViewLabel[1]
        { batchSimulationWindow->choiceLinkApplication = new Fl_Choice(390, 155, 97, 20);
          batchSimulationWindow->choiceLinkApplication->tooltip("Determines how link density distribution is interpreted");
          batchSimulationWindow->choiceLinkApplication->down_box(FL_BORDER_BOX);
          batchSimulationWindow->choiceLinkApplication->menu(menu_batchSimulationWindow);
        } // Fl_Choice* batchSimulationWindow->choiceLinkApplication
        { batchSimulationWindow->groupGrowth = new Fl_Group(80, 209, 185, 90, "Growth");
          batchSimulationWindow->groupGrowth->box(FL_ENGRAVED_FRAME);
          batchSimulationWindow->groupGrowth->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->groupGrowth->labelfont(2);
          batchSimulationWindow->groupGrowth->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { batchSimulationWindow->sliderInitialPopulationPart = new Fl_Value_Slider(90, 231, 165, 20, "Grown population part");
            batchSimulationWindow->sliderInitialPopulationPart->tooltip("Part of population grown");
            batchSimulationWindow->sliderInitialPopulationPart->type(5);
            batchSimulationWindow->sliderInitialPopulationPart->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->sliderInitialPopulationPart->labelfont(2);
            batchSimulationWindow->sliderInitialPopulationPart->value(0.23);
            batchSimulationWindow->sliderInitialPopulationPart->textsize(14);
            batchSimulationWindow->sliderInitialPopulationPart->callback((Fl_Callback*)cb_batchSimulationWindowf);
            batchSimulationWindow->sliderInitialPopulationPart->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Slider* batchSimulationWindow->sliderInitialPopulationPart
          { batchSimulationWindow->sliderGrowthBalance = new Fl_Value_Slider(90, 271, 165, 19, "In / Out Link Balance");
            batchSimulationWindow->sliderGrowthBalance->tooltip("Balance of links to / from grown inquirers. 0 = all incoming, 1 = all outgoin\
g.");
            batchSimulationWindow->sliderGrowthBalance->type(5);
            batchSimulationWindow->sliderGrowthBalance->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->sliderGrowthBalance->labelfont(2);
            batchSimulationWindow->sliderGrowthBalance->value(0.5);
            batchSimulationWindow->sliderGrowthBalance->textsize(14);
            batchSimulationWindow->sliderGrowthBalance->callback((Fl_Callback*)cb_batchSimulationWindow10);
            batchSimulationWindow->sliderGrowthBalance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          } // Fl_Value_Slider* batchSimulationWindow->sliderGrowthBalance
          batchSimulationWindow->groupGrowth->end();
        } // Fl_Group* batchSimulationWindow->groupGrowth
        { batchSimulationWindow->buttonGrowPopulation = new Fl_Check_Button(249, 191, 20, 20, "On");
          batchSimulationWindow->buttonGrowPopulation->tooltip("Grow part of population organically");
          batchSimulationWindow->buttonGrowPopulation->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonGrowPopulation->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonGrowPopulation->labelfont(2);
          batchSimulationWindow->buttonGrowPopulation->callback((Fl_Callback*)cb_batchSimulationWindow11);
          batchSimulationWindow->buttonGrowPopulation->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonGrowPopulation
        { batchSimulationWindow->choiceLinkCountMethod = new Fl_Choice(304, 155, 80, 20);
          batchSimulationWindow->choiceLinkCountMethod->tooltip("Determines how link density distribution is interpreted");
          batchSimulationWindow->choiceLinkCountMethod->down_box(FL_BORDER_BOX);
          batchSimulationWindow->choiceLinkCountMethod->menu(menu_batchSimulationWindow1);
        } // Fl_Choice* batchSimulationWindow->choiceLinkCountMethod
        batchSimulationWindow->groupNetwork->end();
      } // Fl_Group* batchSimulationWindow->groupNetwork
      { batchSimulationWindow->groupInquirers = new Fl_Group(65, 45, 440, 265, "Inquirers");
        batchSimulationWindow->groupInquirers->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupInquirers->labelfont(2);
        batchSimulationWindow->groupInquirers->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        batchSimulationWindow->groupInquirers->hide();
        { batchSimulationWindow->buttonVaryBelief = new Fl_Check_Button(261, 68, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryBelief->tooltip("Should inquirers\' starting degree of belief be randomized at the start of th\
is stage?");
          batchSimulationWindow->buttonVaryBelief->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryBelief->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryBelief->labelfont(2);
          batchSimulationWindow->buttonVaryBelief->callback((Fl_Callback*)cb_batchSimulationWindow12);
          batchSimulationWindow->buttonVaryBelief->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryBelief
        { batchSimulationWindow->boxBelief = new Fl_Box(80, 86, 196, 68, "Starting Belief ");
          batchSimulationWindow->boxBelief->box(FL_DOWN_BOX);
          batchSimulationWindow->boxBelief->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxBelief->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxBelief->labelfont(2);
          batchSimulationWindow->boxBelief->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxBelief
        { batchSimulationWindow->viewBelief = new DistributionView(82, 88, 192, 64);
          batchSimulationWindow->viewBelief->tooltip("Distribution of starting degrees of belief");
          batchSimulationWindow->viewBelief->box(FL_NO_BOX);
          batchSimulationWindow->viewBelief->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewBelief->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewBelief->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewBelief->labelfont(0);
          batchSimulationWindow->viewBelief->labelsize(14);
          batchSimulationWindow->viewBelief->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewBelief->callback((Fl_Callback*)cb_batchSimulationWindow13);
          batchSimulationWindow->viewBelief->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewBelief->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewBelief
        { batchSimulationWindow->buttonVaryInquiryAccuracy = new Fl_Check_Button(475, 69, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryInquiryAccuracy->tooltip("Should inquirers\' inquiry accuracy be randomized at the start of this stage?");
          batchSimulationWindow->buttonVaryInquiryAccuracy->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryInquiryAccuracy->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryInquiryAccuracy->labelfont(2);
          batchSimulationWindow->buttonVaryInquiryAccuracy->callback((Fl_Callback*)cb_batchSimulationWindow14);
          batchSimulationWindow->buttonVaryInquiryAccuracy->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryInquiryAccuracy
        { batchSimulationWindow->boxInquiryAccuracy = new Fl_Box(295, 87, 196, 68, "Inquiry Accuracy");
          batchSimulationWindow->boxInquiryAccuracy->box(FL_DOWN_BOX);
          batchSimulationWindow->boxInquiryAccuracy->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxInquiryAccuracy->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxInquiryAccuracy->labelfont(2);
          batchSimulationWindow->boxInquiryAccuracy->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxInquiryAccuracy
        { batchSimulationWindow->viewInquiryAccuracy = new DistributionView(297, 89, 192, 64);
          batchSimulationWindow->viewInquiryAccuracy->tooltip("Distribution of inquiry accuracy");
          batchSimulationWindow->viewInquiryAccuracy->box(FL_NO_BOX);
          batchSimulationWindow->viewInquiryAccuracy->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryAccuracy->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryAccuracy->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewInquiryAccuracy->labelfont(0);
          batchSimulationWindow->viewInquiryAccuracy->labelsize(14);
          batchSimulationWindow->viewInquiryAccuracy->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewInquiryAccuracy->callback((Fl_Callback*)cb_batchSimulationWindow15);
          batchSimulationWindow->viewInquiryAccuracy->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewInquiryAccuracy->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewInquiryAccuracy
        { batchSimulationWindow->buttonVaryInquiryTrust = new Fl_Check_Button(260, 174, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryInquiryTrust->tooltip("Should inquirers\' trust functions be randomized at the start of this stage?");
          batchSimulationWindow->buttonVaryInquiryTrust->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryInquiryTrust->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryInquiryTrust->labelfont(2);
          batchSimulationWindow->buttonVaryInquiryTrust->callback((Fl_Callback*)cb_batchSimulationWindow16);
          batchSimulationWindow->buttonVaryInquiryTrust->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryInquiryTrust
        { batchSimulationWindow->boxInquiryTrust = new Fl_Box(80, 192, 196, 68, "Inquiry Trust");
          batchSimulationWindow->boxInquiryTrust->box(FL_DOWN_BOX);
          batchSimulationWindow->boxInquiryTrust->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxInquiryTrust->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxInquiryTrust->labelfont(2);
          batchSimulationWindow->boxInquiryTrust->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxInquiryTrust
        { batchSimulationWindow->viewInquiryTrust = new MetaDistributionView(82, 194, 192, 64);
          batchSimulationWindow->viewInquiryTrust->tooltip("Inquiry trust function metadistribution");
          batchSimulationWindow->viewInquiryTrust->box(FL_NO_BOX);
          batchSimulationWindow->viewInquiryTrust->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryTrust->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryTrust->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewInquiryTrust->labelfont(0);
          batchSimulationWindow->viewInquiryTrust->labelsize(14);
          batchSimulationWindow->viewInquiryTrust->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewInquiryTrust->callback((Fl_Callback*)cb_batchSimulationWindow17);
          batchSimulationWindow->viewInquiryTrust->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewInquiryTrust->when(FL_WHEN_RELEASE);
        } // MetaDistributionView* batchSimulationWindow->viewInquiryTrust
        { batchSimulationWindow->boxInquiryChance = new Fl_Box(295, 192, 196, 68, "Inquiry Chance");
          batchSimulationWindow->boxInquiryChance->box(FL_DOWN_BOX);
          batchSimulationWindow->boxInquiryChance->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxInquiryChance->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxInquiryChance->labelfont(2);
          batchSimulationWindow->boxInquiryChance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxInquiryChance
        { batchSimulationWindow->viewInquiryChance = new DistributionView(297, 194, 192, 64);
          batchSimulationWindow->viewInquiryChance->tooltip("Distribution of inquiry chance");
          batchSimulationWindow->viewInquiryChance->box(FL_NO_BOX);
          batchSimulationWindow->viewInquiryChance->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryChance->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewInquiryChance->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewInquiryChance->labelfont(0);
          batchSimulationWindow->viewInquiryChance->labelsize(14);
          batchSimulationWindow->viewInquiryChance->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewInquiryChance->callback((Fl_Callback*)cb_batchSimulationWindow18);
          batchSimulationWindow->viewInquiryChance->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewInquiryChance->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewInquiryChance
        { batchSimulationWindow->buttonVaryInquiryChance = new Fl_Check_Button(475, 174, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryInquiryChance->tooltip("Should inquirers\' inquiry chance be randomized at the start of this stage?");
          batchSimulationWindow->buttonVaryInquiryChance->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryInquiryChance->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryInquiryChance->labelfont(2);
          batchSimulationWindow->buttonVaryInquiryChance->callback((Fl_Callback*)cb_batchSimulationWindow19);
          batchSimulationWindow->buttonVaryInquiryChance->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryInquiryChance
        batchSimulationWindow->groupInquirers->end();
      } // Fl_Group* batchSimulationWindow->groupInquirers
      { batchSimulationWindow->groupLinks = new Fl_Group(65, 45, 440, 265, "Links");
        batchSimulationWindow->groupLinks->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupLinks->labelfont(2);
        batchSimulationWindow->groupLinks->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        batchSimulationWindow->groupLinks->hide();
        { batchSimulationWindow->buttonVaryListenChance = new Fl_Check_Button(260, 68, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryListenChance->tooltip("Should links\' communication chance be randomized at the start of this stage?");
          batchSimulationWindow->buttonVaryListenChance->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryListenChance->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryListenChance->labelfont(2);
          batchSimulationWindow->buttonVaryListenChance->callback((Fl_Callback*)cb_batchSimulationWindow1a);
          batchSimulationWindow->buttonVaryListenChance->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryListenChance
        { batchSimulationWindow->boxListenChance = new Fl_Box(80, 86, 196, 68, "Comm. Chance ");
          batchSimulationWindow->boxListenChance->box(FL_DOWN_BOX);
          batchSimulationWindow->boxListenChance->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxListenChance->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxListenChance->labelfont(2);
          batchSimulationWindow->boxListenChance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxListenChance
        { batchSimulationWindow->viewListenChance = new DistributionView(82, 88, 192, 64);
          batchSimulationWindow->viewListenChance->tooltip("Distribution of communication chance");
          batchSimulationWindow->viewListenChance->box(FL_NO_BOX);
          batchSimulationWindow->viewListenChance->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewListenChance->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewListenChance->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewListenChance->labelfont(0);
          batchSimulationWindow->viewListenChance->labelsize(14);
          batchSimulationWindow->viewListenChance->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewListenChance->callback((Fl_Callback*)cb_batchSimulationWindow1b);
          batchSimulationWindow->viewListenChance->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewListenChance->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewListenChance
        { batchSimulationWindow->buttonVaryThreshold = new Fl_Check_Button(475, 69, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryThreshold->tooltip("Should links\' communication threshold degree of belief be randomized at the \
start of this stage?");
          batchSimulationWindow->buttonVaryThreshold->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryThreshold->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryThreshold->labelfont(2);
          batchSimulationWindow->buttonVaryThreshold->callback((Fl_Callback*)cb_batchSimulationWindow1c);
          batchSimulationWindow->buttonVaryThreshold->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryThreshold
        { batchSimulationWindow->boxThreshold = new Fl_Box(295, 87, 196, 68, "Belief Threshold");
          batchSimulationWindow->boxThreshold->tooltip("Distribution of belief threshold");
          batchSimulationWindow->boxThreshold->box(FL_DOWN_BOX);
          batchSimulationWindow->boxThreshold->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxThreshold->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxThreshold->labelfont(2);
          batchSimulationWindow->boxThreshold->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxThreshold
        { batchSimulationWindow->viewThreshold = new DistributionView(297, 89, 192, 64);
          batchSimulationWindow->viewThreshold->tooltip("Distribution of belief threshold");
          batchSimulationWindow->viewThreshold->box(FL_NO_BOX);
          batchSimulationWindow->viewThreshold->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewThreshold->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewThreshold->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewThreshold->labelfont(0);
          batchSimulationWindow->viewThreshold->labelsize(14);
          batchSimulationWindow->viewThreshold->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewThreshold->callback((Fl_Callback*)cb_batchSimulationWindow1d);
          batchSimulationWindow->viewThreshold->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewThreshold->when(FL_WHEN_RELEASE);
        } // DistributionView* batchSimulationWindow->viewThreshold
        { batchSimulationWindow->buttonVaryTrust = new Fl_Check_Button(260, 174, 20, 20, "Vary");
          batchSimulationWindow->buttonVaryTrust->tooltip("Should links\' trust functions be randomized at the start of this stage?");
          batchSimulationWindow->buttonVaryTrust->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonVaryTrust->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonVaryTrust->labelfont(2);
          batchSimulationWindow->buttonVaryTrust->callback((Fl_Callback*)cb_batchSimulationWindow1e);
          batchSimulationWindow->buttonVaryTrust->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Check_Button* batchSimulationWindow->buttonVaryTrust
        { batchSimulationWindow->boxTrust = new Fl_Box(80, 192, 196, 68, "Trust");
          batchSimulationWindow->boxTrust->box(FL_DOWN_BOX);
          batchSimulationWindow->boxTrust->color(FL_BACKGROUND2_COLOR);
          batchSimulationWindow->boxTrust->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxTrust->labelfont(2);
          batchSimulationWindow->boxTrust->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        } // Fl_Box* batchSimulationWindow->boxTrust
        { batchSimulationWindow->viewTrust = new MetaDistributionView(82, 194, 192, 64);
          batchSimulationWindow->viewTrust->tooltip("Trust function metadistribution");
          batchSimulationWindow->viewTrust->box(FL_NO_BOX);
          batchSimulationWindow->viewTrust->color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewTrust->selection_color(FL_BACKGROUND_COLOR);
          batchSimulationWindow->viewTrust->labeltype(FL_NORMAL_LABEL);
          batchSimulationWindow->viewTrust->labelfont(0);
          batchSimulationWindow->viewTrust->labelsize(14);
          batchSimulationWindow->viewTrust->labelcolor(FL_FOREGROUND_COLOR);
          batchSimulationWindow->viewTrust->callback((Fl_Callback*)cb_batchSimulationWindow1f);
          batchSimulationWindow->viewTrust->align(Fl_Align(FL_ALIGN_CENTER));
          batchSimulationWindow->viewTrust->when(FL_WHEN_RELEASE);
        } // MetaDistributionView* batchSimulationWindow->viewTrust
        { batchSimulationWindow->boxEvidencePolicy = new Fl_Group(295, 193, 195, 67, "New Evidence Requirement");
          batchSimulationWindow->boxEvidencePolicy->box(FL_ENGRAVED_FRAME);
          batchSimulationWindow->boxEvidencePolicy->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->boxEvidencePolicy->labelfont(2);
          batchSimulationWindow->boxEvidencePolicy->align(Fl_Align(FL_ALIGN_TOP_LEFT));
          { batchSimulationWindow->buttonEvidencePolicy[0] = new Fl_Round_Button(300, 197, 75, 20, "None");
            batchSimulationWindow->buttonEvidencePolicy[0]->tooltip("Can communicate without having received any new evidence");
            batchSimulationWindow->buttonEvidencePolicy[0]->type(102);
            batchSimulationWindow->buttonEvidencePolicy[0]->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->buttonEvidencePolicy[0]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->buttonEvidencePolicy[0]->labelfont(2);
            batchSimulationWindow->buttonEvidencePolicy[0]->callback((Fl_Callback*)cb_batchSimulationWindow20);
          } // Fl_Round_Button* batchSimulationWindow->buttonEvidencePolicy[0]
          { batchSimulationWindow->buttonEvidencePolicy[1] = new Fl_Round_Button(300, 217, 75, 20, "Inquiry");
            batchSimulationWindow->buttonEvidencePolicy[1]->tooltip("Must have received a result from inquiry since last to communicate");
            batchSimulationWindow->buttonEvidencePolicy[1]->type(102);
            batchSimulationWindow->buttonEvidencePolicy[1]->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->buttonEvidencePolicy[1]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->buttonEvidencePolicy[1]->labelfont(2);
            batchSimulationWindow->buttonEvidencePolicy[1]->callback((Fl_Callback*)cb_batchSimulationWindow21);
          } // Fl_Round_Button* batchSimulationWindow->buttonEvidencePolicy[1]
          { batchSimulationWindow->buttonEvidencePolicy[2] = new Fl_Round_Button(300, 237, 75, 20, "Any");
            batchSimulationWindow->buttonEvidencePolicy[2]->tooltip("Must have received a result from inquiry or a message from someone else to co\
mmunicate");
            batchSimulationWindow->buttonEvidencePolicy[2]->type(102);
            batchSimulationWindow->buttonEvidencePolicy[2]->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->buttonEvidencePolicy[2]->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->buttonEvidencePolicy[2]->labelfont(2);
            batchSimulationWindow->buttonEvidencePolicy[2]->callback((Fl_Callback*)cb_batchSimulationWindow22);
          } // Fl_Round_Button* batchSimulationWindow->buttonEvidencePolicy[2]
          batchSimulationWindow->boxEvidencePolicy->end();
        } // Fl_Group* batchSimulationWindow->boxEvidencePolicy
        { batchSimulationWindow->buttonExcludePrior = new Fl_Check_Button(385, 217, 20, 20, "as fulfilling");
          batchSimulationWindow->buttonExcludePrior->tooltip("Allow communication once based just on prior, i.e. before receiving new infor\
mation");
          batchSimulationWindow->buttonExcludePrior->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonExcludePrior->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonExcludePrior->labelfont(2);
          batchSimulationWindow->buttonExcludePrior->callback((Fl_Callback*)cb_batchSimulationWindow23);
          batchSimulationWindow->buttonExcludePrior->align(Fl_Align(FL_ALIGN_RIGHT));
        } // Fl_Check_Button* batchSimulationWindow->buttonExcludePrior
        { batchSimulationWindow->labelBox1 = new Fl_Box(405, 199, 85, 20, "Treat prior");
          batchSimulationWindow->labelBox1->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->labelBox1->labelfont(2);
          batchSimulationWindow->labelBox1->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* batchSimulationWindow->labelBox1
        { batchSimulationWindow->labelBox2 = new Fl_Box(405, 235, 85, 20, "requirement");
          batchSimulationWindow->labelBox2->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->labelBox2->labelfont(2);
          batchSimulationWindow->labelBox2->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* batchSimulationWindow->labelBox2
        batchSimulationWindow->groupLinks->end();
      } // Fl_Group* batchSimulationWindow->groupLinks
      { batchSimulationWindow->groupEValues = new Fl_Group(65, 45, 440, 265, "E-Values");
        batchSimulationWindow->groupEValues->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupEValues->labelfont(2);
        batchSimulationWindow->groupEValues->hide();
        { Fl_Group* o = new Fl_Group(135, 95, 145, 180, "Apply evaluation");
          o->box(FL_ENGRAVED_FRAME);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          { batchSimulationWindow->btnInqIndividually = new Fl_Round_Button(145, 109, 90, 25, "Individually");
            batchSimulationWindow->btnInqIndividually->tooltip("Apply E-value calculation to each inquirer in society and then average");
            batchSimulationWindow->btnInqIndividually->type(102);
            batchSimulationWindow->btnInqIndividually->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->btnInqIndividually->value(1);
            batchSimulationWindow->btnInqIndividually->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnInqIndividually->labelfont(2);
            batchSimulationWindow->btnInqIndividually->callback((Fl_Callback*)cb_batchSimulationWindow24);
          } // Fl_Round_Button* batchSimulationWindow->btnInqIndividually
          { batchSimulationWindow->btnInqMajority = new Fl_Round_Button(145, 159, 90, 25, "To Majority");
            batchSimulationWindow->btnInqMajority->tooltip("Apply E-value calculation to what the majority believes");
            batchSimulationWindow->btnInqMajority->type(102);
            batchSimulationWindow->btnInqMajority->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->btnInqMajority->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnInqMajority->labelfont(2);
            batchSimulationWindow->btnInqMajority->callback((Fl_Callback*)cb_batchSimulationWindow25);
          } // Fl_Round_Button* batchSimulationWindow->btnInqMajority
          { batchSimulationWindow->inputMajorityAmount = new Fl_Value_Input(215, 183, 40, 22, "%");
            batchSimulationWindow->inputMajorityAmount->tooltip("How big a majority is needed?");
            batchSimulationWindow->inputMajorityAmount->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputMajorityAmount->labelfont(2);
            batchSimulationWindow->inputMajorityAmount->minimum(50);
            batchSimulationWindow->inputMajorityAmount->maximum(100);
            batchSimulationWindow->inputMajorityAmount->step(0.1);
            batchSimulationWindow->inputMajorityAmount->value(50);
            batchSimulationWindow->inputMajorityAmount->callback((Fl_Callback*)cb_batchSimulationWindow26);
            batchSimulationWindow->inputMajorityAmount->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Value_Input* batchSimulationWindow->inputMajorityAmount
          { batchSimulationWindow->inputMajorityPCertainty = new Fl_Value_Input(215, 208, 40, 22, "%");
            batchSimulationWindow->inputMajorityPCertainty->tooltip("How certain do inquirers have to be to count as believing p?");
            batchSimulationWindow->inputMajorityPCertainty->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputMajorityPCertainty->labelfont(2);
            batchSimulationWindow->inputMajorityPCertainty->maximum(100);
            batchSimulationWindow->inputMajorityPCertainty->step(0.1);
            batchSimulationWindow->inputMajorityPCertainty->value(50);
            batchSimulationWindow->inputMajorityPCertainty->callback((Fl_Callback*)cb_batchSimulationWindow27);
            batchSimulationWindow->inputMajorityPCertainty->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Value_Input* batchSimulationWindow->inputMajorityPCertainty
          { batchSimulationWindow->btnInqAverage = new Fl_Round_Button(145, 134, 110, 25, "To Average");
            batchSimulationWindow->btnInqAverage->tooltip("Apply E-value calculation to average degree of belief in society");
            batchSimulationWindow->btnInqAverage->type(102);
            batchSimulationWindow->btnInqAverage->down_box(FL_ROUND_DOWN_BOX);
            batchSimulationWindow->btnInqAverage->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnInqAverage->labelfont(2);
            batchSimulationWindow->btnInqAverage->callback((Fl_Callback*)cb_batchSimulationWindow28);
          } // Fl_Round_Button* batchSimulationWindow->btnInqAverage
          { batchSimulationWindow->btnAmtMethod = new Fl_Button(193, 184, 20, 20, ">");
            batchSimulationWindow->btnAmtMethod->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnAmtMethod->labelfont(1);
            batchSimulationWindow->btnAmtMethod->callback((Fl_Callback*)cb_batchSimulationWindow29);
          } // Fl_Button* batchSimulationWindow->btnAmtMethod
          { batchSimulationWindow->btnBlfPMethod = new Fl_Button(193, 209, 20, 20, ">");
            batchSimulationWindow->btnBlfPMethod->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnBlfPMethod->labelfont(1);
            batchSimulationWindow->btnBlfPMethod->callback((Fl_Callback*)cb_batchSimulationWindow2a);
          } // Fl_Button* batchSimulationWindow->btnBlfPMethod
          { batchSimulationWindow->boxAmt = new Fl_Box(160, 188, 35, 16, "amt.");
            batchSimulationWindow->boxAmt->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->boxAmt->labelfont(2);
          } // Fl_Box* batchSimulationWindow->boxAmt
          { batchSimulationWindow->boxBlfP = new Fl_Box(155, 213, 35, 16, "blf. p");
            batchSimulationWindow->boxBlfP->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->boxBlfP->labelfont(2);
          } // Fl_Box* batchSimulationWindow->boxBlfP
          { batchSimulationWindow->inputMajorityNotPCertainty = new Fl_Value_Input(215, 233, 40, 22, "%");
            batchSimulationWindow->inputMajorityNotPCertainty->tooltip("How certain do inquirers have to be to believe not-p?");
            batchSimulationWindow->inputMajorityNotPCertainty->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputMajorityNotPCertainty->labelfont(2);
            batchSimulationWindow->inputMajorityNotPCertainty->maximum(100);
            batchSimulationWindow->inputMajorityNotPCertainty->step(0.1);
            batchSimulationWindow->inputMajorityNotPCertainty->value(50);
            batchSimulationWindow->inputMajorityNotPCertainty->callback((Fl_Callback*)cb_batchSimulationWindow2b);
            batchSimulationWindow->inputMajorityNotPCertainty->align(Fl_Align(FL_ALIGN_RIGHT));
          } // Fl_Value_Input* batchSimulationWindow->inputMajorityNotPCertainty
          { batchSimulationWindow->btnBlfNotPMethod = new Fl_Button(193, 234, 20, 20, "<");
            batchSimulationWindow->btnBlfNotPMethod->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->btnBlfNotPMethod->labelfont(1);
            batchSimulationWindow->btnBlfNotPMethod->callback((Fl_Callback*)cb_batchSimulationWindow2c);
          } // Fl_Button* batchSimulationWindow->btnBlfNotPMethod
          { batchSimulationWindow->boxBlfNotP = new Fl_Box(155, 238, 35, 16, "blf. ~p");
            batchSimulationWindow->boxBlfNotP->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->boxBlfNotP->labelfont(2);
          } // Fl_Box* batchSimulationWindow->boxBlfNotP
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(290, 95, 145, 180, "Individual utilities");
          o->box(FL_ENGRAVED_FRAME);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          { batchSimulationWindow->inputBeliefPValue = new Fl_Value_Input(320, 118, 85, 21, "Believe p");
            batchSimulationWindow->inputBeliefPValue->tooltip("Epistemic utility of an inquirer believing p");
            batchSimulationWindow->inputBeliefPValue->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputBeliefPValue->labelfont(2);
            batchSimulationWindow->inputBeliefPValue->minimum(-10000);
            batchSimulationWindow->inputBeliefPValue->maximum(10000);
            batchSimulationWindow->inputBeliefPValue->step(0.001);
            batchSimulationWindow->inputBeliefPValue->value(1);
            batchSimulationWindow->inputBeliefPValue->callback((Fl_Callback*)cb_batchSimulationWindow2d);
            batchSimulationWindow->inputBeliefPValue->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Value_Input* batchSimulationWindow->inputBeliefPValue
          { batchSimulationWindow->inputBeliefNoneValue = new Fl_Value_Input(320, 159, 85, 21, "Believe p V ~p");
            batchSimulationWindow->inputBeliefNoneValue->tooltip("Epistemic utility of an inquirer believing neither p nor not-p");
            batchSimulationWindow->inputBeliefNoneValue->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputBeliefNoneValue->labelfont(2);
            batchSimulationWindow->inputBeliefNoneValue->minimum(-10000);
            batchSimulationWindow->inputBeliefNoneValue->maximum(10000);
            batchSimulationWindow->inputBeliefNoneValue->step(0.001);
            batchSimulationWindow->inputBeliefNoneValue->value(0.5);
            batchSimulationWindow->inputBeliefNoneValue->callback((Fl_Callback*)cb_batchSimulationWindow2e);
            batchSimulationWindow->inputBeliefNoneValue->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Value_Input* batchSimulationWindow->inputBeliefNoneValue
          { batchSimulationWindow->inputBeliefNotPValue = new Fl_Value_Input(320, 199, 85, 21, " Believe ~p");
            batchSimulationWindow->inputBeliefNotPValue->tooltip("Epistemic utility of an inquirer believing not-p");
            batchSimulationWindow->inputBeliefNotPValue->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputBeliefNotPValue->labelfont(2);
            batchSimulationWindow->inputBeliefNotPValue->minimum(-10000);
            batchSimulationWindow->inputBeliefNotPValue->maximum(10000);
            batchSimulationWindow->inputBeliefNotPValue->step(0.001);
            batchSimulationWindow->inputBeliefNotPValue->callback((Fl_Callback*)cb_batchSimulationWindow2f);
            batchSimulationWindow->inputBeliefNotPValue->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Value_Input* batchSimulationWindow->inputBeliefNotPValue
          { batchSimulationWindow->inputExponent = new Fl_Value_Input(320, 239, 85, 21, " Exponent");
            batchSimulationWindow->inputExponent->tooltip("Exponent of E-value");
            batchSimulationWindow->inputExponent->labeltype(FL_ENGRAVED_LABEL);
            batchSimulationWindow->inputExponent->labelfont(2);
            batchSimulationWindow->inputExponent->minimum(0.1);
            batchSimulationWindow->inputExponent->maximum(100);
            batchSimulationWindow->inputExponent->step(0.001);
            batchSimulationWindow->inputExponent->value(1);
            batchSimulationWindow->inputExponent->callback((Fl_Callback*)cb_batchSimulationWindow30);
            batchSimulationWindow->inputExponent->align(Fl_Align(FL_ALIGN_TOP));
          } // Fl_Value_Input* batchSimulationWindow->inputExponent
          o->end();
        } // Fl_Group* o
        batchSimulationWindow->groupEValues->end();
      } // Fl_Group* batchSimulationWindow->groupEValues
      { batchSimulationWindow->groupRecord = new Fl_Group(70, 45, 435, 265, "Record");
        batchSimulationWindow->groupRecord->labeltype(FL_ENGRAVED_LABEL);
        batchSimulationWindow->groupRecord->labelfont(2);
        { batchSimulationWindow->buttonRecordEValues = new Fl_Check_Button(90, 65, 180, 20, "Record E-values");
          batchSimulationWindow->buttonRecordEValues->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonRecordEValues->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonRecordEValues->labelfont(2);
          batchSimulationWindow->buttonRecordEValues->callback((Fl_Callback*)cb_batchSimulationWindow31);
        } // Fl_Check_Button* batchSimulationWindow->buttonRecordEValues
        { batchSimulationWindow->fieldSocietiesPerEValue = new Fl_Value_Input(130, 96, 40, 24, "Every");
          batchSimulationWindow->fieldSocietiesPerEValue->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->fieldSocietiesPerEValue->labelfont(2);
          batchSimulationWindow->fieldSocietiesPerEValue->minimum(1);
          batchSimulationWindow->fieldSocietiesPerEValue->maximum(1000);
          batchSimulationWindow->fieldSocietiesPerEValue->step(1);
          batchSimulationWindow->fieldSocietiesPerEValue->value(1);
          batchSimulationWindow->fieldSocietiesPerEValue->callback((Fl_Callback*)cb_batchSimulationWindow32);
          batchSimulationWindow->fieldSocietiesPerEValue->deactivate();
        } // Fl_Value_Input* batchSimulationWindow->fieldSocietiesPerEValue
        { batchSimulationWindow->labelEValueSocieties = new Fl_Box(170, 95, 65, 26, "societies");
          batchSimulationWindow->labelEValueSocieties->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->labelEValueSocieties->labelfont(2);
          batchSimulationWindow->labelEValueSocieties->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          batchSimulationWindow->labelEValueSocieties->deactivate();
        } // Fl_Box* batchSimulationWindow->labelEValueSocieties
        { batchSimulationWindow->fieldTimePerEValue = new Fl_Value_Input(130, 130, 40, 24, "Every");
          batchSimulationWindow->fieldTimePerEValue->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->fieldTimePerEValue->labelfont(2);
          batchSimulationWindow->fieldTimePerEValue->minimum(1);
          batchSimulationWindow->fieldTimePerEValue->maximum(1000);
          batchSimulationWindow->fieldTimePerEValue->step(1);
          batchSimulationWindow->fieldTimePerEValue->value(1);
          batchSimulationWindow->fieldTimePerEValue->callback((Fl_Callback*)cb_batchSimulationWindow33);
          batchSimulationWindow->fieldTimePerEValue->deactivate();
        } // Fl_Value_Input* batchSimulationWindow->fieldTimePerEValue
        { batchSimulationWindow->labelEValueTimeSteps = new Fl_Box(170, 129, 82, 26, "time steps");
          batchSimulationWindow->labelEValueTimeSteps->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->labelEValueTimeSteps->labelfont(2);
          batchSimulationWindow->labelEValueTimeSteps->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          batchSimulationWindow->labelEValueTimeSteps->deactivate();
        } // Fl_Box* batchSimulationWindow->labelEValueTimeSteps
        { batchSimulationWindow->buttonRecordTopologies = new Fl_Check_Button(315, 65, 180, 20, "Record Topologies");
          batchSimulationWindow->buttonRecordTopologies->down_box(FL_DOWN_BOX);
          batchSimulationWindow->buttonRecordTopologies->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->buttonRecordTopologies->labelfont(2);
          batchSimulationWindow->buttonRecordTopologies->callback((Fl_Callback*)cb_batchSimulationWindow34);
        } // Fl_Check_Button* batchSimulationWindow->buttonRecordTopologies
        { batchSimulationWindow->fieldSocietiesPerTopology = new Fl_Value_Input(355, 96, 40, 24, "Every");
          batchSimulationWindow->fieldSocietiesPerTopology->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->fieldSocietiesPerTopology->labelfont(2);
          batchSimulationWindow->fieldSocietiesPerTopology->minimum(1);
          batchSimulationWindow->fieldSocietiesPerTopology->maximum(1000);
          batchSimulationWindow->fieldSocietiesPerTopology->step(1);
          batchSimulationWindow->fieldSocietiesPerTopology->value(1);
          batchSimulationWindow->fieldSocietiesPerTopology->callback((Fl_Callback*)cb_batchSimulationWindow35);
          batchSimulationWindow->fieldSocietiesPerTopology->deactivate();
        } // Fl_Value_Input* batchSimulationWindow->fieldSocietiesPerTopology
        { batchSimulationWindow->labelTopologySocieties = new Fl_Box(395, 95, 65, 26, "societies");
          batchSimulationWindow->labelTopologySocieties->labeltype(FL_ENGRAVED_LABEL);
          batchSimulationWindow->labelTopologySocieties->labelfont(2);
          batchSimulationWindow->labelTopologySocieties->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
          batchSimulationWindow->labelTopologySocieties->deactivate();
        } // Fl_Box* batchSimulationWindow->labelTopologySocieties
        { Fl_Box* o = new Fl_Box(282, 58, 2, 236);
          o->box(FL_THIN_DOWN_BOX);
        } // Fl_Box* o
        batchSimulationWindow->groupRecord->end();
      } // Fl_Group* batchSimulationWindow->groupRecord
      batchSimulationWindow->groupTabs->end();
    } // Fl_Tabs* batchSimulationWindow->groupTabs
    { batchSimulationWindow->inputNumStages = new Fl_Spinner(15, 25, 35, 35, "Stages");
      batchSimulationWindow->inputNumStages->tooltip("Number of stages in simulation");
      batchSimulationWindow->inputNumStages->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->inputNumStages->labelfont(2);
      batchSimulationWindow->inputNumStages->maximum(4);
      batchSimulationWindow->inputNumStages->callback((Fl_Callback*)cb_batchSimulationWindow36);
      batchSimulationWindow->inputNumStages->align(Fl_Align(FL_ALIGN_BOTTOM));
    } // Fl_Spinner* batchSimulationWindow->inputNumStages
    { batchSimulationWindow->btnCopyStageToNext[0] = new Fl_Button(15, 125, 15, 15, "@2>");
      batchSimulationWindow->btnCopyStageToNext[0]->tooltip("Copy stage 1 to stage 2");
      batchSimulationWindow->btnCopyStageToNext[0]->labelsize(9);
      batchSimulationWindow->btnCopyStageToNext[0]->callback((Fl_Callback*)cb_batchSimulationWindow37);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToNext[0]
    { batchSimulationWindow->btnCopyStageToPrev[0] = new Fl_Button(35, 125, 15, 15, "@2<");
      batchSimulationWindow->btnCopyStageToPrev[0]->tooltip("Copy stage 2 to stage 1");
      batchSimulationWindow->btnCopyStageToPrev[0]->labelsize(8);
      batchSimulationWindow->btnCopyStageToPrev[0]->callback((Fl_Callback*)cb_batchSimulationWindow38);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToPrev[0]
    { batchSimulationWindow->btnCopyStageToNext[1] = new Fl_Button(15, 185, 15, 15, "@2>");
      batchSimulationWindow->btnCopyStageToNext[1]->tooltip("Copy stage 2 to stage 3");
      batchSimulationWindow->btnCopyStageToNext[1]->labelsize(9);
      batchSimulationWindow->btnCopyStageToNext[1]->callback((Fl_Callback*)cb_batchSimulationWindow39);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToNext[1]
    { batchSimulationWindow->btnCopyStageToPrev[1] = new Fl_Button(35, 185, 15, 15, "@2<");
      batchSimulationWindow->btnCopyStageToPrev[1]->tooltip("Copy stage 3 to stage 2");
      batchSimulationWindow->btnCopyStageToPrev[1]->labelsize(8);
      batchSimulationWindow->btnCopyStageToPrev[1]->callback((Fl_Callback*)cb_batchSimulationWindow3a);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToPrev[1]
    { batchSimulationWindow->btnCopyStageToNext[2] = new Fl_Button(15, 245, 15, 15, "@2>");
      batchSimulationWindow->btnCopyStageToNext[2]->tooltip("Copy stage 3 to stage 4");
      batchSimulationWindow->btnCopyStageToNext[2]->labelsize(9);
      batchSimulationWindow->btnCopyStageToNext[2]->callback((Fl_Callback*)cb_batchSimulationWindow3b);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToNext[2]
    { batchSimulationWindow->btnCopyStageToPrev[2] = new Fl_Button(35, 245, 15, 15, "@2<");
      batchSimulationWindow->btnCopyStageToPrev[2]->tooltip("Copy stage 4 to stage 3");
      batchSimulationWindow->btnCopyStageToPrev[2]->labelsize(8);
      batchSimulationWindow->btnCopyStageToPrev[2]->callback((Fl_Callback*)cb_batchSimulationWindow3c);
    } // Fl_Button* batchSimulationWindow->btnCopyStageToPrev[2]
    { batchSimulationWindow->btnStage[0] = new Fl_Light_Button(15, 85, 35, 35, "1");
      batchSimulationWindow->btnStage[0]->tooltip("Edit stage 1");
      batchSimulationWindow->btnStage[0]->value(1);
      batchSimulationWindow->btnStage[0]->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->btnStage[0]->labelfont(1);
      batchSimulationWindow->btnStage[0]->callback((Fl_Callback*)cb_batchSimulationWindow3d);
    } // Fl_Light_Button* batchSimulationWindow->btnStage[0]
    { batchSimulationWindow->btnStage[1] = new Fl_Light_Button(15, 145, 35, 35, "2");
      batchSimulationWindow->btnStage[1]->tooltip("Edit stage 2");
      batchSimulationWindow->btnStage[1]->labelfont(1);
      batchSimulationWindow->btnStage[1]->callback((Fl_Callback*)cb_batchSimulationWindow3e);
    } // Fl_Light_Button* batchSimulationWindow->btnStage[1]
    { batchSimulationWindow->btnStage[2] = new Fl_Light_Button(15, 205, 35, 35, "3");
      batchSimulationWindow->btnStage[2]->tooltip("Edit stage 3");
      batchSimulationWindow->btnStage[2]->labelfont(1);
      batchSimulationWindow->btnStage[2]->callback((Fl_Callback*)cb_batchSimulationWindow3f);
    } // Fl_Light_Button* batchSimulationWindow->btnStage[2]
    { batchSimulationWindow->btnStage[3] = new Fl_Light_Button(15, 265, 35, 35, "4");
      batchSimulationWindow->btnStage[3]->tooltip("Edit stage 4");
      batchSimulationWindow->btnStage[3]->labelfont(1);
      batchSimulationWindow->btnStage[3]->callback((Fl_Callback*)cb_batchSimulationWindow40);
    } // Fl_Light_Button* batchSimulationWindow->btnStage[3]
    { batchSimulationWindow->inputNumTrials = new Fl_Value_Input(525, 45, 95, 25, "# Trials");
      batchSimulationWindow->inputNumTrials->tooltip("Number of simulations to run");
      batchSimulationWindow->inputNumTrials->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->inputNumTrials->labelfont(2);
      batchSimulationWindow->inputNumTrials->minimum(1);
      batchSimulationWindow->inputNumTrials->maximum(1e+06);
      batchSimulationWindow->inputNumTrials->step(1);
      batchSimulationWindow->inputNumTrials->value(100);
      batchSimulationWindow->inputNumTrials->callback((Fl_Callback*)cb_batchSimulationWindow41);
      batchSimulationWindow->inputNumTrials->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Value_Input* batchSimulationWindow->inputNumTrials
    { batchSimulationWindow->boxPosition = new Fl_Box(525, 95, 95, 95, "Position");
      batchSimulationWindow->boxPosition->box(FL_DOWN_BOX);
      batchSimulationWindow->boxPosition->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->boxPosition->labelfont(2);
      batchSimulationWindow->boxPosition->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Box* batchSimulationWindow->boxPosition
    { batchSimulationWindow->selectorPosition = new CoordinateSelector(527, 97, 91, 91);
      batchSimulationWindow->selectorPosition->box(FL_FLAT_BOX);
      batchSimulationWindow->selectorPosition->color(FL_BACKGROUND2_COLOR);
      batchSimulationWindow->selectorPosition->selection_color(FL_BACKGROUND_COLOR);
      batchSimulationWindow->selectorPosition->labeltype(FL_ENGRAVED_LABEL);
      batchSimulationWindow->selectorPosition->labelfont(2);
      batchSimulationWindow->selectorPosition->labelsize(14);
      batchSimulationWindow->selectorPosition->labelcolor(FL_FOREGROUND_COLOR);
      batchSimulationWindow->selectorPosition->callback((Fl_Callback*)cb_batchSimulationWindow42);
      batchSimulationWindow->selectorPosition->align(Fl_Align(FL_ALIGN_TOP));
      batchSimulationWindow->selectorPosition->when(FL_WHEN_RELEASE);
    } // CoordinateSelector* batchSimulationWindow->selectorPosition
    { Fl_Button* o = new Fl_Button(610, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_b);
    } // Fl_Button* o
    batchSimulationWindow->set_modal();
    batchSimulationWindow->clear_border();
    batchSimulationWindow->end();
  } // BatchSimulationWindow* batchSimulationWindow
  { progressWindow = new ProgressWindow(747, 40, "Progress");
    progressWindow->box(FL_UP_BOX);
    progressWindow->color(FL_BACKGROUND_COLOR);
    progressWindow->selection_color(FL_BACKGROUND_COLOR);
    progressWindow->labeltype(FL_NO_LABEL);
    progressWindow->labelfont(0);
    progressWindow->labelsize(14);
    progressWindow->labelcolor(FL_FOREGROUND_COLOR);
    progressWindow->user_data((void*)(this));
    progressWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    progressWindow->when(FL_WHEN_RELEASE);
    { progressWindow->barProgress = new Fl_Progress(10, 10, 645, 20);
      progressWindow->barProgress->selection_color((Fl_Color)12);
      progressWindow->barProgress->labeltype(FL_ENGRAVED_LABEL);
      progressWindow->barProgress->labelfont(2);
      progressWindow->barProgress->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Progress* progressWindow->barProgress
    { Fl_Button* o = new Fl_Button(665, 10, 70, 20, "Cancel");
      o->tooltip("Cancel simulation in progress");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel4);
    } // Fl_Button* o
    progressWindow->set_modal();
    progressWindow->clear_border();
    progressWindow->end();
  } // ProgressWindow* progressWindow
  { statisticsWindow = new StatisticsWindow(682, 576);
    statisticsWindow->box(FL_UP_BOX);
    statisticsWindow->color(FL_BACKGROUND_COLOR);
    statisticsWindow->selection_color(FL_BACKGROUND_COLOR);
    statisticsWindow->labeltype(FL_NO_LABEL);
    statisticsWindow->labelfont(2);
    statisticsWindow->labelsize(14);
    statisticsWindow->labelcolor(FL_FOREGROUND_COLOR);
    statisticsWindow->user_data((void*)(this));
    statisticsWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    statisticsWindow->when(FL_WHEN_RELEASE);
    { Fl_Box* o = new Fl_Box(40, 42, 604, 204);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_BOTTOM));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(575, 520, 85, 30, "Close");
      o->tooltip("Close window");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { statisticsWindow->boxDiagramYValue[0] = new Fl_Box(-15, 42, 55, 20, "0");
      statisticsWindow->boxDiagramYValue[0]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramYValue[0]
    { statisticsWindow->boxDiagramYValue[1] = new Fl_Box(-15, 87, 55, 20, "0");
      statisticsWindow->boxDiagramYValue[1]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramYValue[1]
    { statisticsWindow->boxDiagramYValue[3] = new Fl_Box(-15, 177, 55, 20, "0");
      statisticsWindow->boxDiagramYValue[3]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramYValue[3]
    { statisticsWindow->viewDiagram = new StatisticsView(42, 44, 600, 200);
      statisticsWindow->viewDiagram->tooltip("Average evolution of societies\'  e-values over time");
      statisticsWindow->viewDiagram->box(FL_NO_BOX);
      statisticsWindow->viewDiagram->color(FL_BACKGROUND_COLOR);
      statisticsWindow->viewDiagram->selection_color(FL_BACKGROUND_COLOR);
      statisticsWindow->viewDiagram->labeltype(FL_NORMAL_LABEL);
      statisticsWindow->viewDiagram->labelfont(0);
      statisticsWindow->viewDiagram->labelsize(14);
      statisticsWindow->viewDiagram->labelcolor(FL_FOREGROUND_COLOR);
      statisticsWindow->viewDiagram->align(Fl_Align(FL_ALIGN_CENTER));
      statisticsWindow->viewDiagram->when(FL_WHEN_RELEASE);
    } // StatisticsView* statisticsWindow->viewDiagram
    { statisticsWindow->outputAvgEValue = new Fl_Output(145, 285, 66, 20, "Average E-Value");
      statisticsWindow->outputAvgEValue->tooltip("Average E-value of all societies");
      statisticsWindow->outputAvgEValue->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputAvgEValue->labelfont(2);
    } // Fl_Output* statisticsWindow->outputAvgEValue
    { statisticsWindow->outputEValueDelta = new Fl_Output(145, 310, 65, 20, "Avg. E-Value \342\210\206");
      statisticsWindow->outputEValueDelta->tooltip("Average E-value change from starting position for all societies");
      statisticsWindow->outputEValueDelta->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputEValueDelta->labelfont(2);
    } // Fl_Output* statisticsWindow->outputEValueDelta
    { statisticsWindow->outputNumSocieties = new Fl_Output(585, 375, 60, 20, "# Simulations run");
      statisticsWindow->outputNumSocieties->tooltip("Number of simulations run");
      statisticsWindow->outputNumSocieties->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputNumSocieties->labelfont(2);
    } // Fl_Output* statisticsWindow->outputNumSocieties
    { statisticsWindow->outputNumSteps = new Fl_Output(585, 400, 60, 20, "# Steps / Society");
      statisticsWindow->outputNumSteps->tooltip("Number of time steps of each simulation");
      statisticsWindow->outputNumSteps->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputNumSteps->labelfont(2);
    } // Fl_Output* statisticsWindow->outputNumSteps
    { statisticsWindow->boxDiagramYValue[2] = new Fl_Box(-15, 132, 55, 20, "0");
      statisticsWindow->boxDiagramYValue[2]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramYValue[2]
    { statisticsWindow->boxDiagramXValue[0] = new Fl_Box(40, 246, 60, 20, "0");
      statisticsWindow->boxDiagramXValue[0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramXValue[0]
    { statisticsWindow->boxDiagramXValue[1] = new Fl_Box(164, 245, 60, 20, "0");
      statisticsWindow->boxDiagramXValue[1]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramXValue[1]
    { statisticsWindow->boxDiagramXValue[2] = new Fl_Box(312, 246, 60, 20, "0");
      statisticsWindow->boxDiagramXValue[2]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramXValue[2]
    { statisticsWindow->boxDiagramXValue[4] = new Fl_Box(590, 246, 60, 20, "0");
      statisticsWindow->boxDiagramXValue[4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramXValue[4]
    { statisticsWindow->outputAvgEValueMargin = new Fl_Output(225, 285, 55, 20, "\302\261");
      statisticsWindow->outputAvgEValueMargin->tooltip("Confidence interval");
      statisticsWindow->outputAvgEValueMargin->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputAvgEValueMargin->labelfont(2);
    } // Fl_Output* statisticsWindow->outputAvgEValueMargin
    { statisticsWindow->outputEValueDeltaMargin = new Fl_Output(225, 310, 55, 20, "\302\261");
      statisticsWindow->outputEValueDeltaMargin->tooltip("Confidence interval");
      statisticsWindow->outputEValueDeltaMargin->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputEValueDeltaMargin->labelfont(2);
    } // Fl_Output* statisticsWindow->outputEValueDeltaMargin
    { statisticsWindow->choiceConfidenceLevel = new Fl_Choice(215, 385, 65, 20, "Confidence Level");
      statisticsWindow->choiceConfidenceLevel->down_box(FL_BORDER_BOX);
      statisticsWindow->choiceConfidenceLevel->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->choiceConfidenceLevel->labelfont(2);
      statisticsWindow->choiceConfidenceLevel->menu(menu_statisticsWindow);
    } // Fl_Choice* statisticsWindow->choiceConfidenceLevel
    { statisticsWindow->outputMessagesSentTotal = new Fl_Output(490, 305, 75, 20, "Avg. # Messages Sent");
      statisticsWindow->outputMessagesSentTotal->tooltip("Average total number of messages sent during simulation");
      statisticsWindow->outputMessagesSentTotal->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputMessagesSentTotal->labelfont(2);
    } // Fl_Output* statisticsWindow->outputMessagesSentTotal
    { statisticsWindow->outputInquiryResultsTotal = new Fl_Output(490, 330, 75, 20, "Avg. # Inquiry Results");
      statisticsWindow->outputInquiryResultsTotal->tooltip("Average total number of inquiry results obtained during simulation");
      statisticsWindow->outputInquiryResultsTotal->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputInquiryResultsTotal->labelfont(2);
    } // Fl_Output* statisticsWindow->outputInquiryResultsTotal
    { statisticsWindow->outputMessagesSentPerInquirer = new Fl_Output(570, 305, 75, 20);
      statisticsWindow->outputMessagesSentPerInquirer->tooltip("Average number of messages sent during simulation per inquirer");
      statisticsWindow->outputMessagesSentPerInquirer->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputMessagesSentPerInquirer->labelfont(2);
    } // Fl_Output* statisticsWindow->outputMessagesSentPerInquirer
    { statisticsWindow->outputInquiryResultsPerInquirer = new Fl_Output(570, 330, 75, 20);
      statisticsWindow->outputInquiryResultsPerInquirer->tooltip("Average number of inquiry results obtained during simulation per inquirer");
      statisticsWindow->outputInquiryResultsPerInquirer->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputInquiryResultsPerInquirer->labelfont(2);
    } // Fl_Output* statisticsWindow->outputInquiryResultsPerInquirer
    { Fl_Box* o = new Fl_Box(495, 284, 60, 24, "total");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(580, 284, 60, 24, "per inq.");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { statisticsWindow->outputBWToPPerc = new Fl_Output(165, 440, 45, 20, "Towards p");
      statisticsWindow->outputBWToPPerc->tooltip("Percent of times an individual\'s degree of belief have been nudged towards p\
 by outside causes");
      statisticsWindow->outputBWToPPerc->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputBWToPPerc->labelfont(2);
    } // Fl_Output* statisticsWindow->outputBWToPPerc
    { statisticsWindow->outputBWToNotPPerc = new Fl_Output(165, 465, 45, 20, "Towards -p");
      statisticsWindow->outputBWToNotPPerc->tooltip("Percent of times an individual\'s degree of belief have been nudged towards n\
ot-p by outside causes");
      statisticsWindow->outputBWToNotPPerc->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputBWToNotPPerc->labelfont(2);
    } // Fl_Output* statisticsWindow->outputBWToNotPPerc
    { statisticsWindow->outputBWToPEffect = new Fl_Output(215, 440, 65, 20);
      statisticsWindow->outputBWToPEffect->tooltip("Average difference in degree of belief between actual result, and what it wou\
ld have been using only inquiry, in such cases");
      statisticsWindow->outputBWToPEffect->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputBWToPEffect->labelfont(2);
    } // Fl_Output* statisticsWindow->outputBWToPEffect
    { statisticsWindow->outputBWToNotPEffect = new Fl_Output(215, 465, 65, 20);
      statisticsWindow->outputBWToNotPEffect->tooltip("Average difference in degree of belief between actual result, and what it wou\
ld have been using only inquiry, in such cases");
      statisticsWindow->outputBWToNotPEffect->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputBWToNotPEffect->labelfont(2);
    } // Fl_Output* statisticsWindow->outputBWToNotPEffect
    { Fl_Box* o = new Fl_Box(35, 418, 135, 25, "Avg. Bandwagoning");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(158, 418, 60, 25, "%");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(218, 418, 60, 25, "effect");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { statisticsWindow->boxDiagramXValue[3] = new Fl_Box(463, 245, 60, 20, "0");
      statisticsWindow->boxDiagramXValue[3]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramXValue[3]
    { statisticsWindow->boxDiagramYValue[4] = new Fl_Box(-15, 221, 55, 20, "0");
      statisticsWindow->boxDiagramYValue[4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* statisticsWindow->boxDiagramYValue[4]
    { Fl_Box* o = new Fl_Box(40, 16, 190, 26, "Average E-Value over time");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { statisticsWindow->outputPolarisation = new Fl_Output(145, 335, 66, 20, "Avg. Polarisation");
      statisticsWindow->outputPolarisation->tooltip("Average standard deviation of E-values in all societies");
      statisticsWindow->outputPolarisation->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputPolarisation->labelfont(2);
    } // Fl_Output* statisticsWindow->outputPolarisation
    { statisticsWindow->outputPolarisationDelta = new Fl_Output(145, 360, 65, 20, "Avg. Polarisation \342\210\206");
      statisticsWindow->outputPolarisationDelta->tooltip("Average change in standard deviation of E-values in all societies");
      statisticsWindow->outputPolarisationDelta->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputPolarisationDelta->labelfont(2);
    } // Fl_Output* statisticsWindow->outputPolarisationDelta
    { statisticsWindow->outputPolarisationMargin = new Fl_Output(225, 335, 55, 20, "\302\261");
      statisticsWindow->outputPolarisationMargin->tooltip("Confidence interval");
      statisticsWindow->outputPolarisationMargin->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputPolarisationMargin->labelfont(2);
    } // Fl_Output* statisticsWindow->outputPolarisationMargin
    { statisticsWindow->outputPolarisationDeltaMargin = new Fl_Output(225, 360, 55, 20, "\302\261");
      statisticsWindow->outputPolarisationDeltaMargin->tooltip("Confidence interval");
      statisticsWindow->outputPolarisationDeltaMargin->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->outputPolarisationDeltaMargin->labelfont(2);
    } // Fl_Output* statisticsWindow->outputPolarisationDeltaMargin
    { Fl_Button* o = new Fl_Button(653, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_c);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(60, 520, 165, 30, "View Edge Degrees...");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_View);
    } // Fl_Button* o
    { statisticsWindow->buttonExportTopologies = new Fl_Button(240, 520, 155, 30, "Export Topologies...");
      statisticsWindow->buttonExportTopologies->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->buttonExportTopologies->labelfont(1);
      statisticsWindow->buttonExportTopologies->callback((Fl_Callback*)cb_statisticsWindow);
    } // Fl_Button* statisticsWindow->buttonExportTopologies
    { statisticsWindow->choiceDiagramView = new Fl_Choice(510, 18, 135, 20);
      statisticsWindow->choiceDiagramView->down_box(FL_BORDER_BOX);
      statisticsWindow->choiceDiagramView->labelfont(2);
      statisticsWindow->choiceDiagramView->callback((Fl_Callback*)cb_statisticsWindow1);
      statisticsWindow->choiceDiagramView->menu(menu_statisticsWindow1);
    } // Fl_Choice* statisticsWindow->choiceDiagramView
    { statisticsWindow->buttonExportEValues = new Fl_Button(410, 520, 150, 30, "Export E-Values...");
      statisticsWindow->buttonExportEValues->labeltype(FL_ENGRAVED_LABEL);
      statisticsWindow->buttonExportEValues->labelfont(1);
      statisticsWindow->buttonExportEValues->callback((Fl_Callback*)cb_statisticsWindow2);
    } // Fl_Button* statisticsWindow->buttonExportEValues
    { Fl_Box* o = new Fl_Box(25, 499, 635, 2);
      o->box(FL_THIN_DOWN_BOX);
    } // Fl_Box* o
    statisticsWindow->set_modal();
    statisticsWindow->clear_border();
    statisticsWindow->end();
  } // StatisticsWindow* statisticsWindow
  { aboutWindow = new AboutWindow(491, 279);
    aboutWindow->box(FL_FLAT_BOX);
    aboutWindow->color(FL_BACKGROUND2_COLOR);
    aboutWindow->selection_color(FL_BACKGROUND_COLOR);
    aboutWindow->labeltype(FL_NO_LABEL);
    aboutWindow->labelfont(0);
    aboutWindow->labelsize(14);
    aboutWindow->labelcolor(FL_FOREGROUND_COLOR);
    aboutWindow->user_data((void*)(this));
    aboutWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    aboutWindow->when(FL_WHEN_RELEASE);
    { aboutWindow->buttonAbout = new Fl_Button(1, 1, 489, 277);
      aboutWindow->buttonAbout->box(FL_FLAT_BOX);
      aboutWindow->buttonAbout->color(FL_BACKGROUND2_COLOR);
      aboutWindow->buttonAbout->callback((Fl_Callback*)cb_aboutWindow);
    } // Fl_Button* aboutWindow->buttonAbout
    aboutWindow->set_modal();
    aboutWindow->clear_border();
    aboutWindow->end();
  } // AboutWindow* aboutWindow
  { inquirerParametersWindow = new InquirerParametersWindow(595, 255, "Inquirer Simulation Parameters");
    inquirerParametersWindow->box(FL_UP_BOX);
    inquirerParametersWindow->color(FL_BACKGROUND_COLOR);
    inquirerParametersWindow->selection_color(FL_BACKGROUND_COLOR);
    inquirerParametersWindow->labeltype(FL_NO_LABEL);
    inquirerParametersWindow->labelfont(0);
    inquirerParametersWindow->labelsize(14);
    inquirerParametersWindow->labelcolor(FL_FOREGROUND_COLOR);
    inquirerParametersWindow->user_data((void*)(this));
    inquirerParametersWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    inquirerParametersWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(505, 210, 70, 25, "OK");
      o->tooltip("Save and exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK4);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(430, 210, 70, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel5);
    } // Fl_Button* o
    { inquirerParametersWindow->sliderVaryBelief = new Fl_Slider(220, 31, 20, 68);
      inquirerParametersWindow->sliderVaryBelief->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      inquirerParametersWindow->sliderVaryBelief->maximum(2);
      inquirerParametersWindow->sliderVaryBelief->step(1);
      inquirerParametersWindow->sliderVaryBelief->value(1);
      inquirerParametersWindow->sliderVaryBelief->slider_size(0.4);
      inquirerParametersWindow->sliderVaryBelief->callback((Fl_Callback*)cb_inquirerParametersWindow);
    } // Fl_Slider* inquirerParametersWindow->sliderVaryBelief
    { Fl_Box* o = new Fl_Box(240, 36, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { inquirerParametersWindow->sliderVaryInquiryChance = new Fl_Slider(220, 122, 20, 68);
      inquirerParametersWindow->sliderVaryInquiryChance->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      inquirerParametersWindow->sliderVaryInquiryChance->maximum(2);
      inquirerParametersWindow->sliderVaryInquiryChance->step(1);
      inquirerParametersWindow->sliderVaryInquiryChance->value(1);
      inquirerParametersWindow->sliderVaryInquiryChance->slider_size(0.4);
      inquirerParametersWindow->sliderVaryInquiryChance->callback((Fl_Callback*)cb_inquirerParametersWindow1);
    } // Fl_Slider* inquirerParametersWindow->sliderVaryInquiryChance
    { inquirerParametersWindow->sliderVaryVeracityChance = new Fl_Slider(505, 32, 20, 68);
      inquirerParametersWindow->sliderVaryVeracityChance->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      inquirerParametersWindow->sliderVaryVeracityChance->maximum(2);
      inquirerParametersWindow->sliderVaryVeracityChance->step(1);
      inquirerParametersWindow->sliderVaryVeracityChance->value(1);
      inquirerParametersWindow->sliderVaryVeracityChance->slider_size(0.4);
      inquirerParametersWindow->sliderVaryVeracityChance->callback((Fl_Callback*)cb_inquirerParametersWindow2);
    } // Fl_Slider* inquirerParametersWindow->sliderVaryVeracityChance
    { inquirerParametersWindow->boxBelief = new Fl_Box(20, 31, 196, 68, "Starting Belief ");
      inquirerParametersWindow->boxBelief->box(FL_DOWN_BOX);
      inquirerParametersWindow->boxBelief->color(FL_BACKGROUND2_COLOR);
      inquirerParametersWindow->boxBelief->labeltype(FL_ENGRAVED_LABEL);
      inquirerParametersWindow->boxBelief->labelfont(2);
      inquirerParametersWindow->boxBelief->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* inquirerParametersWindow->boxBelief
    { inquirerParametersWindow->viewBelief = new DistributionView(22, 33, 192, 64);
      inquirerParametersWindow->viewBelief->tooltip("Distribution of starting degree of belief");
      inquirerParametersWindow->viewBelief->box(FL_NO_BOX);
      inquirerParametersWindow->viewBelief->color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewBelief->selection_color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewBelief->labeltype(FL_NORMAL_LABEL);
      inquirerParametersWindow->viewBelief->labelfont(0);
      inquirerParametersWindow->viewBelief->labelsize(14);
      inquirerParametersWindow->viewBelief->labelcolor(FL_FOREGROUND_COLOR);
      inquirerParametersWindow->viewBelief->callback((Fl_Callback*)cb_inquirerParametersWindow3);
      inquirerParametersWindow->viewBelief->align(Fl_Align(FL_ALIGN_CENTER));
      inquirerParametersWindow->viewBelief->when(FL_WHEN_RELEASE);
    } // DistributionView* inquirerParametersWindow->viewBelief
    { inquirerParametersWindow->boxInquiryAccuracy = new Fl_Box(305, 32, 196, 68, "Inquiry Accuracy");
      inquirerParametersWindow->boxInquiryAccuracy->box(FL_DOWN_BOX);
      inquirerParametersWindow->boxInquiryAccuracy->color(FL_BACKGROUND2_COLOR);
      inquirerParametersWindow->boxInquiryAccuracy->labeltype(FL_ENGRAVED_LABEL);
      inquirerParametersWindow->boxInquiryAccuracy->labelfont(2);
      inquirerParametersWindow->boxInquiryAccuracy->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* inquirerParametersWindow->boxInquiryAccuracy
    { inquirerParametersWindow->viewInquiryAccuracy = new DistributionView(307, 34, 192, 64);
      inquirerParametersWindow->viewInquiryAccuracy->tooltip("Distribution of inquiry accuracy");
      inquirerParametersWindow->viewInquiryAccuracy->box(FL_NO_BOX);
      inquirerParametersWindow->viewInquiryAccuracy->color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryAccuracy->selection_color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryAccuracy->labeltype(FL_NORMAL_LABEL);
      inquirerParametersWindow->viewInquiryAccuracy->labelfont(0);
      inquirerParametersWindow->viewInquiryAccuracy->labelsize(14);
      inquirerParametersWindow->viewInquiryAccuracy->labelcolor(FL_FOREGROUND_COLOR);
      inquirerParametersWindow->viewInquiryAccuracy->callback((Fl_Callback*)cb_inquirerParametersWindow4);
      inquirerParametersWindow->viewInquiryAccuracy->align(Fl_Align(FL_ALIGN_CENTER));
      inquirerParametersWindow->viewInquiryAccuracy->when(FL_WHEN_RELEASE);
    } // DistributionView* inquirerParametersWindow->viewInquiryAccuracy
    { inquirerParametersWindow->boxInquiryTrust = new Fl_Box(305, 122, 196, 68, "Inquiry Trust");
      inquirerParametersWindow->boxInquiryTrust->box(FL_DOWN_BOX);
      inquirerParametersWindow->boxInquiryTrust->color(FL_BACKGROUND2_COLOR);
      inquirerParametersWindow->boxInquiryTrust->labeltype(FL_ENGRAVED_LABEL);
      inquirerParametersWindow->boxInquiryTrust->labelfont(2);
      inquirerParametersWindow->boxInquiryTrust->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* inquirerParametersWindow->boxInquiryTrust
    { inquirerParametersWindow->viewInquiryTrust = new MetaDistributionView(307, 124, 192, 64);
      inquirerParametersWindow->viewInquiryTrust->tooltip("Inquiry trust function metadistribution");
      inquirerParametersWindow->viewInquiryTrust->box(FL_NO_BOX);
      inquirerParametersWindow->viewInquiryTrust->color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryTrust->selection_color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryTrust->labeltype(FL_NORMAL_LABEL);
      inquirerParametersWindow->viewInquiryTrust->labelfont(0);
      inquirerParametersWindow->viewInquiryTrust->labelsize(14);
      inquirerParametersWindow->viewInquiryTrust->labelcolor(FL_FOREGROUND_COLOR);
      inquirerParametersWindow->viewInquiryTrust->callback((Fl_Callback*)cb_inquirerParametersWindow5);
      inquirerParametersWindow->viewInquiryTrust->align(Fl_Align(FL_ALIGN_CENTER));
      inquirerParametersWindow->viewInquiryTrust->when(FL_WHEN_RELEASE);
    } // MetaDistributionView* inquirerParametersWindow->viewInquiryTrust
    { inquirerParametersWindow->boxInquiryChance = new Fl_Box(20, 122, 196, 68, "Inquiry Chance");
      inquirerParametersWindow->boxInquiryChance->box(FL_DOWN_BOX);
      inquirerParametersWindow->boxInquiryChance->color(FL_BACKGROUND2_COLOR);
      inquirerParametersWindow->boxInquiryChance->labeltype(FL_ENGRAVED_LABEL);
      inquirerParametersWindow->boxInquiryChance->labelfont(2);
      inquirerParametersWindow->boxInquiryChance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* inquirerParametersWindow->boxInquiryChance
    { inquirerParametersWindow->viewInquiryChance = new DistributionView(22, 124, 192, 64);
      inquirerParametersWindow->viewInquiryChance->tooltip("Distribution of inquiry chance");
      inquirerParametersWindow->viewInquiryChance->box(FL_NO_BOX);
      inquirerParametersWindow->viewInquiryChance->color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryChance->selection_color(FL_BACKGROUND_COLOR);
      inquirerParametersWindow->viewInquiryChance->labeltype(FL_NORMAL_LABEL);
      inquirerParametersWindow->viewInquiryChance->labelfont(0);
      inquirerParametersWindow->viewInquiryChance->labelsize(14);
      inquirerParametersWindow->viewInquiryChance->labelcolor(FL_FOREGROUND_COLOR);
      inquirerParametersWindow->viewInquiryChance->callback((Fl_Callback*)cb_inquirerParametersWindow6);
      inquirerParametersWindow->viewInquiryChance->align(Fl_Align(FL_ALIGN_CENTER));
      inquirerParametersWindow->viewInquiryChance->when(FL_WHEN_RELEASE);
    } // DistributionView* inquirerParametersWindow->viewInquiryChance
    { Fl_Box* o = new Fl_Box(240, 57, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 78, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 127, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 148, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 169, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 37, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 58, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 79, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { inquirerParametersWindow->sliderVaryInquiryTrust = new Fl_Slider(505, 122, 20, 68);
      inquirerParametersWindow->sliderVaryInquiryTrust->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      inquirerParametersWindow->sliderVaryInquiryTrust->maximum(2);
      inquirerParametersWindow->sliderVaryInquiryTrust->step(1);
      inquirerParametersWindow->sliderVaryInquiryTrust->value(1);
      inquirerParametersWindow->sliderVaryInquiryTrust->slider_size(0.4);
      inquirerParametersWindow->sliderVaryInquiryTrust->callback((Fl_Callback*)cb_inquirerParametersWindow7);
    } // Fl_Slider* inquirerParametersWindow->sliderVaryInquiryTrust
    { Fl_Box* o = new Fl_Box(525, 127, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 148, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 169, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(565, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_d);
    } // Fl_Button* o
    inquirerParametersWindow->set_modal();
    inquirerParametersWindow->clear_border();
    inquirerParametersWindow->end();
  } // InquirerParametersWindow* inquirerParametersWindow
  { linkParametersWindow = new LinkParametersWindow(599, 219, "Link Simulation Parameters");
    linkParametersWindow->box(FL_UP_BOX);
    linkParametersWindow->color(FL_BACKGROUND_COLOR);
    linkParametersWindow->selection_color(FL_BACKGROUND_COLOR);
    linkParametersWindow->labeltype(FL_NO_LABEL);
    linkParametersWindow->labelfont(0);
    linkParametersWindow->labelsize(14);
    linkParametersWindow->labelcolor(FL_FOREGROUND_COLOR);
    linkParametersWindow->user_data((void*)(this));
    linkParametersWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    linkParametersWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(505, 170, 70, 25, "OK");
      o->tooltip("Save and exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK5);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(430, 170, 70, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel6);
    } // Fl_Button* o
    { linkParametersWindow->sliderVaryListenChance = new Fl_Slider(220, 31, 20, 68);
      linkParametersWindow->sliderVaryListenChance->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      linkParametersWindow->sliderVaryListenChance->maximum(2);
      linkParametersWindow->sliderVaryListenChance->step(1);
      linkParametersWindow->sliderVaryListenChance->value(1);
      linkParametersWindow->sliderVaryListenChance->slider_size(0.4);
      linkParametersWindow->sliderVaryListenChance->callback((Fl_Callback*)cb_linkParametersWindow);
    } // Fl_Slider* linkParametersWindow->sliderVaryListenChance
    { Fl_Box* o = new Fl_Box(240, 36, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { linkParametersWindow->sliderVaryThreshold = new Fl_Slider(505, 32, 20, 68);
      linkParametersWindow->sliderVaryThreshold->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      linkParametersWindow->sliderVaryThreshold->maximum(2);
      linkParametersWindow->sliderVaryThreshold->step(1);
      linkParametersWindow->sliderVaryThreshold->value(1);
      linkParametersWindow->sliderVaryThreshold->slider_size(0.4);
      linkParametersWindow->sliderVaryThreshold->callback((Fl_Callback*)cb_linkParametersWindow1);
    } // Fl_Slider* linkParametersWindow->sliderVaryThreshold
    { linkParametersWindow->boxListenChance = new Fl_Box(20, 31, 196, 68, "Communication Chance");
      linkParametersWindow->boxListenChance->box(FL_DOWN_BOX);
      linkParametersWindow->boxListenChance->color(FL_BACKGROUND2_COLOR);
      linkParametersWindow->boxListenChance->labeltype(FL_ENGRAVED_LABEL);
      linkParametersWindow->boxListenChance->labelfont(2);
      linkParametersWindow->boxListenChance->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* linkParametersWindow->boxListenChance
    { linkParametersWindow->viewListenChance = new DistributionView(22, 33, 192, 64);
      linkParametersWindow->viewListenChance->tooltip("Distribution of communication chance");
      linkParametersWindow->viewListenChance->box(FL_NO_BOX);
      linkParametersWindow->viewListenChance->color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewListenChance->selection_color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewListenChance->labeltype(FL_NORMAL_LABEL);
      linkParametersWindow->viewListenChance->labelfont(0);
      linkParametersWindow->viewListenChance->labelsize(14);
      linkParametersWindow->viewListenChance->labelcolor(FL_FOREGROUND_COLOR);
      linkParametersWindow->viewListenChance->callback((Fl_Callback*)cb_linkParametersWindow2);
      linkParametersWindow->viewListenChance->align(Fl_Align(FL_ALIGN_CENTER));
      linkParametersWindow->viewListenChance->when(FL_WHEN_RELEASE);
    } // DistributionView* linkParametersWindow->viewListenChance
    { linkParametersWindow->boxThreshold = new Fl_Box(305, 32, 196, 68, "Belief Threshold");
      linkParametersWindow->boxThreshold->box(FL_DOWN_BOX);
      linkParametersWindow->boxThreshold->color(FL_BACKGROUND2_COLOR);
      linkParametersWindow->boxThreshold->labeltype(FL_ENGRAVED_LABEL);
      linkParametersWindow->boxThreshold->labelfont(2);
      linkParametersWindow->boxThreshold->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* linkParametersWindow->boxThreshold
    { linkParametersWindow->viewThreshold = new DistributionView(307, 34, 192, 64);
      linkParametersWindow->viewThreshold->tooltip("Distribution of belief threshold");
      linkParametersWindow->viewThreshold->box(FL_NO_BOX);
      linkParametersWindow->viewThreshold->color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewThreshold->selection_color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewThreshold->labeltype(FL_NORMAL_LABEL);
      linkParametersWindow->viewThreshold->labelfont(0);
      linkParametersWindow->viewThreshold->labelsize(14);
      linkParametersWindow->viewThreshold->labelcolor(FL_FOREGROUND_COLOR);
      linkParametersWindow->viewThreshold->callback((Fl_Callback*)cb_linkParametersWindow3);
      linkParametersWindow->viewThreshold->align(Fl_Align(FL_ALIGN_CENTER));
      linkParametersWindow->viewThreshold->when(FL_WHEN_RELEASE);
    } // DistributionView* linkParametersWindow->viewThreshold
    { linkParametersWindow->boxTrust = new Fl_Box(20, 122, 196, 68, "Trust");
      linkParametersWindow->boxTrust->box(FL_DOWN_BOX);
      linkParametersWindow->boxTrust->color(FL_BACKGROUND2_COLOR);
      linkParametersWindow->boxTrust->labeltype(FL_ENGRAVED_LABEL);
      linkParametersWindow->boxTrust->labelfont(2);
      linkParametersWindow->boxTrust->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Box* linkParametersWindow->boxTrust
    { linkParametersWindow->viewTrust = new MetaDistributionView(22, 124, 192, 64);
      linkParametersWindow->viewTrust->tooltip("Trust function metadistribution");
      linkParametersWindow->viewTrust->box(FL_NO_BOX);
      linkParametersWindow->viewTrust->color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewTrust->selection_color(FL_BACKGROUND_COLOR);
      linkParametersWindow->viewTrust->labeltype(FL_NORMAL_LABEL);
      linkParametersWindow->viewTrust->labelfont(0);
      linkParametersWindow->viewTrust->labelsize(14);
      linkParametersWindow->viewTrust->labelcolor(FL_FOREGROUND_COLOR);
      linkParametersWindow->viewTrust->callback((Fl_Callback*)cb_linkParametersWindow4);
      linkParametersWindow->viewTrust->align(Fl_Align(FL_ALIGN_CENTER));
      linkParametersWindow->viewTrust->when(FL_WHEN_RELEASE);
    } // MetaDistributionView* linkParametersWindow->viewTrust
    { Fl_Box* o = new Fl_Box(240, 57, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 78, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 37, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 58, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(525, 79, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { linkParametersWindow->sliderVaryTrust = new Fl_Slider(220, 122, 20, 68);
      linkParametersWindow->sliderVaryTrust->tooltip("Set policy for varying this variable during a batch simulation. Variable: alw\
ays vary, according to this distribution. Default: vary according to batch sim\
ulation\'s parameters. Constant: never vary.");
      linkParametersWindow->sliderVaryTrust->maximum(2);
      linkParametersWindow->sliderVaryTrust->step(1);
      linkParametersWindow->sliderVaryTrust->value(1);
      linkParametersWindow->sliderVaryTrust->slider_size(0.4);
      linkParametersWindow->sliderVaryTrust->callback((Fl_Callback*)cb_linkParametersWindow5);
    } // Fl_Slider* linkParametersWindow->sliderVaryTrust
    { Fl_Box* o = new Fl_Box(240, 127, 60, 20, "Variable");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 148, 60, 20, "Default");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(240, 169, 60, 20, "Constant");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->labelsize(12);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(570, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_e);
    } // Fl_Button* o
    linkParametersWindow->set_modal();
    linkParametersWindow->clear_border();
    linkParametersWindow->end();
  } // LinkParametersWindow* linkParametersWindow
  { distributionFreeformValuesWindow = new DistributionFreeformValuesWindow(238, 331, "Values");
    distributionFreeformValuesWindow->box(FL_UP_BOX);
    distributionFreeformValuesWindow->color(FL_BACKGROUND_COLOR);
    distributionFreeformValuesWindow->selection_color(FL_BACKGROUND_COLOR);
    distributionFreeformValuesWindow->labeltype(FL_NO_LABEL);
    distributionFreeformValuesWindow->labelfont(0);
    distributionFreeformValuesWindow->labelsize(14);
    distributionFreeformValuesWindow->labelcolor(FL_FOREGROUND_COLOR);
    distributionFreeformValuesWindow->user_data((void*)(this));
    distributionFreeformValuesWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    distributionFreeformValuesWindow->when(FL_WHEN_RELEASE);
    { distributionFreeformValuesWindow->fieldValue = new Fl_Value_Input(55, 15, 90, 25, "Value");
      distributionFreeformValuesWindow->fieldValue->labeltype(FL_ENGRAVED_LABEL);
      distributionFreeformValuesWindow->fieldValue->labelfont(2);
    } // Fl_Value_Input* distributionFreeformValuesWindow->fieldValue
    { Fl_Return_Button* o = new Fl_Return_Button(150, 15, 70, 25, "Set");
      o->tooltip("Save value");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Set3);
    } // Fl_Return_Button* o
    { distributionFreeformValuesWindow->listValues = new Fl_Multi_Browser(15, 55, 205, 220);
      distributionFreeformValuesWindow->listValues->type(3);
      distributionFreeformValuesWindow->listValues->box(FL_NO_BOX);
      distributionFreeformValuesWindow->listValues->color(FL_BACKGROUND2_COLOR);
      distributionFreeformValuesWindow->listValues->selection_color(FL_SELECTION_COLOR);
      distributionFreeformValuesWindow->listValues->labeltype(FL_NORMAL_LABEL);
      distributionFreeformValuesWindow->listValues->labelfont(0);
      distributionFreeformValuesWindow->listValues->labelsize(14);
      distributionFreeformValuesWindow->listValues->labelcolor(FL_FOREGROUND_COLOR);
      distributionFreeformValuesWindow->listValues->callback((Fl_Callback*)cb_distributionFreeformValuesWindow);
      distributionFreeformValuesWindow->listValues->align(Fl_Align(FL_ALIGN_BOTTOM));
      distributionFreeformValuesWindow->listValues->when(FL_WHEN_RELEASE_ALWAYS);
    } // Fl_Multi_Browser* distributionFreeformValuesWindow->listValues
    { Fl_Button* o = new Fl_Button(90, 290, 65, 25, "Done");
      o->tooltip("Exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Done);
    } // Fl_Button* o
    distributionFreeformValuesWindow->set_modal();
    distributionFreeformValuesWindow->clear_border();
    distributionFreeformValuesWindow->end();
  } // DistributionFreeformValuesWindow* distributionFreeformValuesWindow
  { metaDistributionWindow = new MetaDistributionWindow(468, 426, "Metadistribution");
    metaDistributionWindow->box(FL_UP_BOX);
    metaDistributionWindow->color(FL_BACKGROUND_COLOR);
    metaDistributionWindow->selection_color(FL_BACKGROUND_COLOR);
    metaDistributionWindow->labeltype(FL_NO_LABEL);
    metaDistributionWindow->labelfont(0);
    metaDistributionWindow->labelsize(14);
    metaDistributionWindow->labelcolor(FL_FOREGROUND_COLOR);
    metaDistributionWindow->user_data((void*)(this));
    metaDistributionWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    metaDistributionWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(370, 380, 75, 25, "OK");
      o->tooltip("Save and exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK6);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(370, 346, 75, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel7);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(245, 36, 196, 68, "Upper Distribution");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(25, 36, 196, 68, "Lower Distribution");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_TOP));
    } // Fl_Box* o
    { metaDistributionWindow->viewZero = new DistributionView(27, 38, 192, 64);
      metaDistributionWindow->viewZero->tooltip("Lower distribution");
      metaDistributionWindow->viewZero->box(FL_NO_BOX);
      metaDistributionWindow->viewZero->color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewZero->selection_color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewZero->labeltype(FL_NORMAL_LABEL);
      metaDistributionWindow->viewZero->labelfont(0);
      metaDistributionWindow->viewZero->labelsize(14);
      metaDistributionWindow->viewZero->labelcolor(FL_FOREGROUND_COLOR);
      metaDistributionWindow->viewZero->callback((Fl_Callback*)cb_metaDistributionWindow);
      metaDistributionWindow->viewZero->align(Fl_Align(FL_ALIGN_CENTER));
      metaDistributionWindow->viewZero->when(FL_WHEN_RELEASE);
    } // DistributionView* metaDistributionWindow->viewZero
    { metaDistributionWindow->viewOne = new DistributionView(247, 38, 192, 64);
      metaDistributionWindow->viewOne->tooltip("Upper distribution");
      metaDistributionWindow->viewOne->box(FL_NO_BOX);
      metaDistributionWindow->viewOne->color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewOne->selection_color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewOne->labeltype(FL_NORMAL_LABEL);
      metaDistributionWindow->viewOne->labelfont(0);
      metaDistributionWindow->viewOne->labelsize(14);
      metaDistributionWindow->viewOne->labelcolor(FL_FOREGROUND_COLOR);
      metaDistributionWindow->viewOne->callback((Fl_Callback*)cb_metaDistributionWindow1);
      metaDistributionWindow->viewOne->align(Fl_Align(FL_ALIGN_CENTER));
      metaDistributionWindow->viewOne->when(FL_WHEN_RELEASE);
    } // DistributionView* metaDistributionWindow->viewOne
    { Fl_Box* o = new Fl_Box(134, 131, 196, 68);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* o
    { metaDistributionWindow->viewMixture = new DistributionView(136, 133, 192, 64);
      metaDistributionWindow->viewMixture->tooltip("Lower distribution");
      metaDistributionWindow->viewMixture->box(FL_NO_BOX);
      metaDistributionWindow->viewMixture->color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewMixture->selection_color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewMixture->labeltype(FL_NORMAL_LABEL);
      metaDistributionWindow->viewMixture->labelfont(0);
      metaDistributionWindow->viewMixture->labelsize(14);
      metaDistributionWindow->viewMixture->labelcolor(FL_FOREGROUND_COLOR);
      metaDistributionWindow->viewMixture->callback((Fl_Callback*)cb_metaDistributionWindow2);
      metaDistributionWindow->viewMixture->align(Fl_Align(FL_ALIGN_LEFT_TOP));
      metaDistributionWindow->viewMixture->when(FL_WHEN_RELEASE);
    } // DistributionView* metaDistributionWindow->viewMixture
    { Fl_Box* o = new Fl_Box(110, 107, 30, 28, "@+23->");
      o->labelcolor((Fl_Color)16);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(324, 107, 30, 28, "@+21->");
      o->labelcolor((Fl_Color)16);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(134, 226, 196, 68);
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* o
    { metaDistributionWindow->viewMetaDistribution = new MetaDistributionView(136, 228, 192, 64);
      metaDistributionWindow->viewMetaDistribution->tooltip("Lower distribution");
      metaDistributionWindow->viewMetaDistribution->box(FL_NO_BOX);
      metaDistributionWindow->viewMetaDistribution->color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewMetaDistribution->selection_color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewMetaDistribution->labeltype(FL_NORMAL_LABEL);
      metaDistributionWindow->viewMetaDistribution->labelfont(0);
      metaDistributionWindow->viewMetaDistribution->labelsize(14);
      metaDistributionWindow->viewMetaDistribution->labelcolor(FL_FOREGROUND_COLOR);
      metaDistributionWindow->viewMetaDistribution->align(Fl_Align(FL_ALIGN_CENTER));
      metaDistributionWindow->viewMetaDistribution->when(FL_WHEN_RELEASE);
    } // MetaDistributionView* metaDistributionWindow->viewMetaDistribution
    { Fl_Box* o = new Fl_Box(217, 202, 30, 28, "@+22->");
      o->labelcolor((Fl_Color)16);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(135, 322, 196, 68, "Preview");
      o->box(FL_DOWN_BOX);
      o->color(FL_BACKGROUND2_COLOR);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Box* o
    { metaDistributionWindow->viewPreview = new DistributionView(137, 324, 192, 64);
      metaDistributionWindow->viewPreview->tooltip("Lower distribution");
      metaDistributionWindow->viewPreview->box(FL_NO_BOX);
      metaDistributionWindow->viewPreview->color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewPreview->selection_color(FL_BACKGROUND_COLOR);
      metaDistributionWindow->viewPreview->labeltype(FL_NORMAL_LABEL);
      metaDistributionWindow->viewPreview->labelfont(0);
      metaDistributionWindow->viewPreview->labelsize(14);
      metaDistributionWindow->viewPreview->labelcolor(FL_FOREGROUND_COLOR);
      metaDistributionWindow->viewPreview->align(Fl_Align(FL_ALIGN_CENTER));
      metaDistributionWindow->viewPreview->when(FL_WHEN_RELEASE);
    } // DistributionView* metaDistributionWindow->viewPreview
    { Fl_Box* o = new Fl_Box(218, 297, 30, 28, "@+22->");
      o->labelcolor((Fl_Color)16);
    } // Fl_Box* o
    { metaDistributionWindow->sliderParameter = new Fl_Slider(135, 390, 195, 15);
      metaDistributionWindow->sliderParameter->type(1);
      metaDistributionWindow->sliderParameter->step(0.001);
      metaDistributionWindow->sliderParameter->value(0.5);
      metaDistributionWindow->sliderParameter->slider_size(0.060606);
      metaDistributionWindow->sliderParameter->callback((Fl_Callback*)cb_metaDistributionWindow3);
    } // Fl_Slider* metaDistributionWindow->sliderParameter
    { Fl_Button* o = new Fl_Button(440, 9, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_f);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(43, 149, 90, 19, "Mixture");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(43, 166, 90, 19, "Distribution");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(43, 242, 90, 19, "Resulting");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(23, 259, 110, 19, "Metadistribution");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    metaDistributionWindow->set_modal();
    metaDistributionWindow->clear_border();
    metaDistributionWindow->end();
  } // MetaDistributionWindow* metaDistributionWindow
  { setValuesWindow = new SetValuesWindow(175, 109);
    setValuesWindow->box(FL_UP_BOX);
    setValuesWindow->color(FL_BACKGROUND_COLOR);
    setValuesWindow->selection_color(FL_BACKGROUND_COLOR);
    setValuesWindow->labeltype(FL_NO_LABEL);
    setValuesWindow->labelfont(0);
    setValuesWindow->labelsize(14);
    setValuesWindow->labelcolor(FL_FOREGROUND_COLOR);
    setValuesWindow->user_data((void*)(this));
    setValuesWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    setValuesWindow->when(FL_WHEN_RELEASE);
    { setValuesWindow->inputValue = new Fl_Value_Input(15, 30, 140, 25, "Value");
      setValuesWindow->inputValue->labeltype(FL_ENGRAVED_LABEL);
      setValuesWindow->inputValue->labelfont(2);
      setValuesWindow->inputValue->align(Fl_Align(FL_ALIGN_TOP_LEFT));
    } // Fl_Value_Input* setValuesWindow->inputValue
    { Fl_Return_Button* o = new Fl_Return_Button(90, 65, 65, 25, "Set");
      o->tooltip("Save and exit");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Set4);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(15, 65, 65, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel8);
    } // Fl_Button* o
    setValuesWindow->set_modal();
    setValuesWindow->clear_border();
    setValuesWindow->end();
  } // SetValuesWindow* setValuesWindow
  { multiBatchWindow = new MultiBatchWindow(441, 254, "Multibatch Simulation");
    multiBatchWindow->box(FL_UP_BOX);
    multiBatchWindow->color(FL_BACKGROUND_COLOR);
    multiBatchWindow->selection_color(FL_BACKGROUND_COLOR);
    multiBatchWindow->labeltype(FL_NO_LABEL);
    multiBatchWindow->labelfont(0);
    multiBatchWindow->labelsize(14);
    multiBatchWindow->labelcolor(FL_FOREGROUND_COLOR);
    multiBatchWindow->user_data((void*)(this));
    multiBatchWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    multiBatchWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(355, 211, 70, 25, "OK");
      o->tooltip("Run multibatch simulation");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK7);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(280, 211, 70, 25, "Cancel");
      o->tooltip("Exit without starting simulation");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancel9);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(20, 32, 405, 159, "Multiple Batch Generation");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      { multiBatchWindow->btnSetBatchA = new Fl_Button(95, 76, 135, 30, "Set Batch (0, 0) ...");
        multiBatchWindow->btnSetBatchA->tooltip("Set starting batch for X and Y axis");
        multiBatchWindow->btnSetBatchA->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnSetBatchA->callback((Fl_Callback*)cb_multiBatchWindow);
      } // Fl_Button* multiBatchWindow->btnSetBatchA
      { multiBatchWindow->btnSetBatchB = new Fl_Button(270, 76, 135, 30, "Set Batch (0, 1) ...");
        multiBatchWindow->btnSetBatchB->tooltip("Set final batch for X axis");
        multiBatchWindow->btnSetBatchB->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnSetBatchB->callback((Fl_Callback*)cb_multiBatchWindow1);
      } // Fl_Button* multiBatchWindow->btnSetBatchB
      { multiBatchWindow->btnSetBatchC = new Fl_Button(95, 146, 135, 30, "Set Batch (1, 0) ...");
        multiBatchWindow->btnSetBatchC->tooltip("Set final batch for Y axis");
        multiBatchWindow->btnSetBatchC->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnSetBatchC->callback((Fl_Callback*)cb_multiBatchWindow2);
      } // Fl_Button* multiBatchWindow->btnSetBatchC
      { multiBatchWindow->btnCopyBatch[3] = new Fl_Button(155, 126, 20, 15, "@2>");
        multiBatchWindow->btnCopyBatch[3]->tooltip("Copy batch A to batch C");
        multiBatchWindow->btnCopyBatch[3]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[3]->callback((Fl_Callback*)cb_multiBatchWindow3);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[3]
      { multiBatchWindow->btnCopyBatch[2] = new Fl_Button(155, 111, 20, 15, "@2<");
        multiBatchWindow->btnCopyBatch[2]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[2]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[2]->callback((Fl_Callback*)cb_multiBatchWindow4);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[2]
      { multiBatchWindow->inputStepsAtoC = new Fl_Spinner(35, 157, 50, 24, "to (1,0)");
        multiBatchWindow->inputStepsAtoC->tooltip("X value of batch simulation to preview");
        multiBatchWindow->inputStepsAtoC->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->inputStepsAtoC->labelfont(2);
        multiBatchWindow->inputStepsAtoC->callback((Fl_Callback*)cb_multiBatchWindow5);
        multiBatchWindow->inputStepsAtoC->align(Fl_Align(FL_ALIGN_TOP));
      } // Fl_Spinner* multiBatchWindow->inputStepsAtoC
      { multiBatchWindow->inputStepsAtoB = new Fl_Spinner(360, 42, 50, 24, "Steps from (0, 0) to (0, 1)");
        multiBatchWindow->inputStepsAtoB->tooltip("Y value of batch simulation to preview");
        multiBatchWindow->inputStepsAtoB->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->inputStepsAtoB->labelfont(2);
        multiBatchWindow->inputStepsAtoB->callback((Fl_Callback*)cb_multiBatchWindow6);
      } // Fl_Spinner* multiBatchWindow->inputStepsAtoB
      { multiBatchWindow->btnSetBatchD = new Fl_Button(270, 146, 135, 30, "Set Batch (1, 1) ...");
        multiBatchWindow->btnSetBatchD->tooltip("Set final batch for Y axis");
        multiBatchWindow->btnSetBatchD->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnSetBatchD->callback((Fl_Callback*)cb_multiBatchWindow7);
      } // Fl_Button* multiBatchWindow->btnSetBatchD
      { multiBatchWindow->btnCopyBatch[1] = new Fl_Button(250, 80, 15, 20, "@>");
        multiBatchWindow->btnCopyBatch[1]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[1]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[1]->callback((Fl_Callback*)cb_multiBatchWindow8);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[1]
      { multiBatchWindow->btnCopyBatch[0] = new Fl_Button(235, 80, 15, 20, "@<");
        multiBatchWindow->btnCopyBatch[0]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[0]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[0]->callback((Fl_Callback*)cb_multiBatchWindow9);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[0]
      { multiBatchWindow->btnCopyBatch[5] = new Fl_Button(330, 126, 20, 15, "@2>");
        multiBatchWindow->btnCopyBatch[5]->tooltip("Copy batch A to batch C");
        multiBatchWindow->btnCopyBatch[5]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[5]->callback((Fl_Callback*)cb_multiBatchWindowa);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[5]
      { multiBatchWindow->btnCopyBatch[4] = new Fl_Button(330, 111, 20, 15, "@2<");
        multiBatchWindow->btnCopyBatch[4]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[4]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[4]->callback((Fl_Callback*)cb_multiBatchWindowb);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[4]
      { multiBatchWindow->btnCopyBatch[7] = new Fl_Button(250, 151, 15, 20, "@>");
        multiBatchWindow->btnCopyBatch[7]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[7]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[7]->callback((Fl_Callback*)cb_multiBatchWindowc);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[7]
      { multiBatchWindow->btnCopyBatch[6] = new Fl_Button(235, 151, 15, 20, "@<");
        multiBatchWindow->btnCopyBatch[6]->tooltip("Copy batch C to batch A");
        multiBatchWindow->btnCopyBatch[6]->labelcolor((Fl_Color)16);
        multiBatchWindow->btnCopyBatch[6]->callback((Fl_Callback*)cb_multiBatchWindowd);
      } // Fl_Button* multiBatchWindow->btnCopyBatch[6]
      { multiBatchWindow->btnOneDimension = new Fl_Light_Button(110, 42, 35, 24, "1");
        multiBatchWindow->btnOneDimension->tooltip("Change variables in only one dimension");
        multiBatchWindow->btnOneDimension->type(102);
        multiBatchWindow->btnOneDimension->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnOneDimension->labelfont(1);
        multiBatchWindow->btnOneDimension->callback((Fl_Callback*)cb_multiBatchWindowe);
      } // Fl_Light_Button* multiBatchWindow->btnOneDimension
      { multiBatchWindow->btnTwoDimensions = new Fl_Light_Button(145, 42, 35, 24, "2");
        multiBatchWindow->btnTwoDimensions->tooltip("Change variables in two dimensions");
        multiBatchWindow->btnTwoDimensions->type(102);
        multiBatchWindow->btnTwoDimensions->value(1);
        multiBatchWindow->btnTwoDimensions->labeltype(FL_ENGRAVED_LABEL);
        multiBatchWindow->btnTwoDimensions->labelfont(1);
        multiBatchWindow->btnTwoDimensions->callback((Fl_Callback*)cb_multiBatchWindowf);
      } // Fl_Light_Button* multiBatchWindow->btnTwoDimensions
      { Fl_Box* o = new Fl_Box(30, 45, 80, 21, "Dimensons:");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
        o->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(35, 105, 50, 16, "Steps");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
      } // Fl_Box* o
      { Fl_Box* o = new Fl_Box(30, 123, 60, 16, "from (0, 0)");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
      } // Fl_Box* o
      o->end();
    } // Fl_Group* o
    { multiBatchWindow->btnPreview = new Fl_Button(20, 211, 85, 25, "Preview...");
      multiBatchWindow->btnPreview->tooltip("Show how the batch simulation X, Y will look");
      multiBatchWindow->btnPreview->labeltype(FL_ENGRAVED_LABEL);
      multiBatchWindow->btnPreview->labelfont(1);
      multiBatchWindow->btnPreview->callback((Fl_Callback*)cb_multiBatchWindow10);
    } // Fl_Button* multiBatchWindow->btnPreview
    { Fl_Button* o = new Fl_Button(120, 211, 70, 25, "Load...");
      o->tooltip("Exit without starting simulation");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Load);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(195, 211, 70, 25, "Save...");
      o->tooltip("Exit without starting simulation");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Save2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(416, 6, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_10);
    } // Fl_Button* o
    multiBatchWindow->set_modal();
    multiBatchWindow->clear_border();
    multiBatchWindow->end();
  } // MultiBatchWindow* multiBatchWindow
  { doubleProgressWindow = new DoubleProgressWindow(747, 40, "Progress");
    doubleProgressWindow->box(FL_UP_BOX);
    doubleProgressWindow->color(FL_BACKGROUND_COLOR);
    doubleProgressWindow->selection_color(FL_BACKGROUND_COLOR);
    doubleProgressWindow->labeltype(FL_NO_LABEL);
    doubleProgressWindow->labelfont(0);
    doubleProgressWindow->labelsize(14);
    doubleProgressWindow->labelcolor(FL_FOREGROUND_COLOR);
    doubleProgressWindow->user_data((void*)(this));
    doubleProgressWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    doubleProgressWindow->when(FL_WHEN_RELEASE);
    { doubleProgressWindow->barProgress = new Fl_Progress(100, 10, 560, 20);
      doubleProgressWindow->barProgress->selection_color((Fl_Color)12);
      doubleProgressWindow->barProgress->labeltype(FL_ENGRAVED_LABEL);
      doubleProgressWindow->barProgress->labelfont(2);
      doubleProgressWindow->barProgress->align(Fl_Align(FL_ALIGN_LEFT));
    } // Fl_Progress* doubleProgressWindow->barProgress
    { Fl_Button* o = new Fl_Button(665, 10, 70, 20, "Cancel");
      o->tooltip("Cancel simulation");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancela);
    } // Fl_Button* o
    { doubleProgressWindow->outputSecondProgress = new Fl_Output(15, 11, 80, 18);
    } // Fl_Output* doubleProgressWindow->outputSecondProgress
    doubleProgressWindow->set_modal();
    doubleProgressWindow->clear_border();
    doubleProgressWindow->end();
  } // DoubleProgressWindow* doubleProgressWindow
  { manualWindow = new ManualWindow(436, 386, "Laputa Manual");
    manualWindow->box(FL_UP_BOX);
    manualWindow->color(FL_BACKGROUND_COLOR);
    manualWindow->selection_color(FL_BACKGROUND_COLOR);
    manualWindow->labeltype(FL_NO_LABEL);
    manualWindow->labelfont(0);
    manualWindow->labelsize(14);
    manualWindow->labelcolor(FL_FOREGROUND_COLOR);
    manualWindow->user_data((void*)(this));
    manualWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    manualWindow->when(FL_WHEN_RELEASE);
    { manualWindow->view = new Fl_Help_View(5, 35, 580, 500);
    } // Fl_Help_View* manualWindow->view
    { manualWindow->buttonBack = new Fl_Button(5, 5, 25, 25, "@<-");
      manualWindow->buttonBack->labelcolor((Fl_Color)16);
      manualWindow->buttonBack->callback((Fl_Callback*)cb_manualWindow);
    } // Fl_Button* manualWindow->buttonBack
    { manualWindow->buttonForward = new Fl_Button(35, 5, 25, 25, "@->");
      manualWindow->buttonForward->labelcolor((Fl_Color)16);
      manualWindow->buttonForward->callback((Fl_Callback*)cb_manualWindow1);
    } // Fl_Button* manualWindow->buttonForward
    { manualWindow->buttonHome = new Fl_Button(65, 5, 25, 25, "@menu");
      manualWindow->buttonHome->labelcolor((Fl_Color)16);
      manualWindow->buttonHome->callback((Fl_Callback*)cb_manualWindow2);
    } // Fl_Button* manualWindow->buttonHome
    { manualWindow->outputFile = new Fl_Output(95, 6, 490, 24);
    } // Fl_Output* manualWindow->outputFile
    manualWindow->set_modal();
    manualWindow->size_range(400, 400);
    manualWindow->end();
  } // ManualWindow* manualWindow
  { degreeDistributionWindow = new DegreeDistributionWindow(365, 470, "Degree Distribution");
    degreeDistributionWindow->box(FL_UP_BOX);
    degreeDistributionWindow->color(FL_BACKGROUND_COLOR);
    degreeDistributionWindow->selection_color(FL_BACKGROUND_COLOR);
    degreeDistributionWindow->labeltype(FL_NO_LABEL);
    degreeDistributionWindow->labelfont(0);
    degreeDistributionWindow->labelsize(14);
    degreeDistributionWindow->labelcolor(FL_FOREGROUND_COLOR);
    degreeDistributionWindow->user_data((void*)(this));
    degreeDistributionWindow->align(Fl_Align(FL_ALIGN_CLIP|FL_ALIGN_INSIDE));
    degreeDistributionWindow->when(FL_WHEN_RELEASE);
    { Fl_Tabs* o = new Fl_Tabs(20, 10, 325, 395);
      { Fl_Group* o = new Fl_Group(20, 35, 325, 370, "In");
        o->tooltip("Lower limit at which to fit curve");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        { Fl_Box* o = new Fl_Box(73, 49, 260, 132);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          o->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Box* o
        { degreeDistributionWindow->view[DD_IN] = new StatisticsView(75, 51, 256, 128);
          degreeDistributionWindow->view[DD_IN]->tooltip("Histogram of number of inquirers having specific number of in links");
          degreeDistributionWindow->view[DD_IN]->box(FL_NO_BOX);
          degreeDistributionWindow->view[DD_IN]->color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_IN]->selection_color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_IN]->labeltype(FL_NORMAL_LABEL);
          degreeDistributionWindow->view[DD_IN]->labelfont(0);
          degreeDistributionWindow->view[DD_IN]->labelsize(14);
          degreeDistributionWindow->view[DD_IN]->labelcolor(FL_FOREGROUND_COLOR);
          degreeDistributionWindow->view[DD_IN]->align(Fl_Align(FL_ALIGN_CENTER));
          degreeDistributionWindow->view[DD_IN]->when(FL_WHEN_RELEASE);
        } // StatisticsView* degreeDistributionWindow->view[DD_IN]
        { degreeDistributionWindow->choiceFunction[DD_IN] = new Fl_Choice(70, 230, 130, 22, "Fit as");
          degreeDistributionWindow->choiceFunction[DD_IN]->down_box(FL_BORDER_BOX);
          degreeDistributionWindow->choiceFunction[DD_IN]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->choiceFunction[DD_IN]->labelfont(2);
          degreeDistributionWindow->choiceFunction[DD_IN]->callback((Fl_Callback*)cb_degreeDistributionWindow);
        } // Fl_Choice* degreeDistributionWindow->choiceFunction[DD_IN]
        { degreeDistributionWindow->outputError[DD_IN] = new Fl_Value_Output(240, 231, 95, 20, "Error");
          degreeDistributionWindow->outputError[DD_IN]->tooltip("Mean squared error of curve");
          degreeDistributionWindow->outputError[DD_IN]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->outputError[DD_IN]->labelfont(2);
        } // Fl_Value_Output* degreeDistributionWindow->outputError[DD_IN]
        { degreeDistributionWindow->labelYAxis[DD_IN][4] = new Fl_Box(28, 49, 45, 16, "1");
          degreeDistributionWindow->labelYAxis[DD_IN][4]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_IN][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_IN][4]
        { degreeDistributionWindow->labelYAxis[DD_IN][0] = new Fl_Box(28, 166, 45, 16, "0");
          degreeDistributionWindow->labelYAxis[DD_IN][0]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_IN][0]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_IN][0]
        { degreeDistributionWindow->labelYAxis[DD_IN][2] = new Fl_Box(28, 106, 45, 16, "0.5");
          degreeDistributionWindow->labelYAxis[DD_IN][2]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_IN][2]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_IN][2]
        { degreeDistributionWindow->labelYAxis[DD_IN][1] = new Fl_Box(28, 138, 45, 16, "0.25");
          degreeDistributionWindow->labelYAxis[DD_IN][1]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_IN][1]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_IN][1]
        { degreeDistributionWindow->labelYAxis[DD_IN][3] = new Fl_Box(28, 77, 45, 16, "0.75");
          degreeDistributionWindow->labelYAxis[DD_IN][3]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_IN][3]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_IN][3]
        { degreeDistributionWindow->labelXAxis[DD_IN][0] = new Fl_Box(70, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_IN][0]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_IN][0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_IN][0]
        { degreeDistributionWindow->labelXAxis[DD_IN][4] = new Fl_Box(295, 184, 42, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_IN][4]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_IN][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_IN][4]
        { degreeDistributionWindow->labelXAxis[DD_IN][2] = new Fl_Box(178, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_IN][2]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_IN][2]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_IN][2]
        { degreeDistributionWindow->labelXAxis[DD_IN][1] = new Fl_Box(116, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_IN][1]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_IN][1]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_IN][1]
        { degreeDistributionWindow->labelXAxis[DD_IN][3] = new Fl_Box(241, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_IN][3]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_IN][3]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_IN][3]
        { Fl_Box* o = new Fl_Box(31, 258, 304, 84);
          o->box(FL_DOWN_BOX);
        } // Fl_Box* o
        { degreeDistributionWindow->boxFormula[DD_IN] = new Fl_Box(33, 260, 300, 80);
          degreeDistributionWindow->boxFormula[DD_IN]->box(FL_FLAT_BOX);
          degreeDistributionWindow->boxFormula[DD_IN]->color(FL_BACKGROUND2_COLOR);
        } // Fl_Box* degreeDistributionWindow->boxFormula[DD_IN]
        { degreeDistributionWindow->outputParameter[DD_IN][0] = new Fl_Value_Output(105, 347, 95, 20, "a =");
          degreeDistributionWindow->outputParameter[DD_IN][0]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_IN][0]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_IN][0]
        { degreeDistributionWindow->outputParameter[DD_IN][1] = new Fl_Value_Output(240, 347, 95, 20, "b =");
          degreeDistributionWindow->outputParameter[DD_IN][1]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_IN][1]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_IN][1]
        { degreeDistributionWindow->outputParameter[DD_IN][2] = new Fl_Value_Output(105, 372, 95, 20, "c =");
          degreeDistributionWindow->outputParameter[DD_IN][2]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_IN][2]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_IN][2]
        { degreeDistributionWindow->outputParameter[DD_IN][3] = new Fl_Value_Output(240, 372, 95, 20, "d =");
          degreeDistributionWindow->outputParameter[DD_IN][3]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_IN][3]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_IN][3]
        { degreeDistributionWindow->sliderCutoff[DD_IN] = new Fl_Value_Slider(70, 205, 230, 20, "Cutoff");
          degreeDistributionWindow->sliderCutoff[DD_IN]->type(1);
          degreeDistributionWindow->sliderCutoff[DD_IN]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->sliderCutoff[DD_IN]->labelfont(2);
          degreeDistributionWindow->sliderCutoff[DD_IN]->maximum(100);
          degreeDistributionWindow->sliderCutoff[DD_IN]->step(1);
          degreeDistributionWindow->sliderCutoff[DD_IN]->textsize(14);
          degreeDistributionWindow->sliderCutoff[DD_IN]->callback((Fl_Callback*)cb_degreeDistributionWindow1);
          degreeDistributionWindow->sliderCutoff[DD_IN]->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* degreeDistributionWindow->sliderCutoff[DD_IN]
        { Fl_Button* o = new Fl_Button(305, 205, 30, 20, "Fit");
          o->tooltip("Find best curve for this cutoff");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->callback((Fl_Callback*)cb_Fit);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(20, 35, 325, 370, "Out");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { Fl_Box* o = new Fl_Box(73, 49, 260, 132);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          o->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Box* o
        { degreeDistributionWindow->view[DD_OUT] = new StatisticsView(75, 51, 256, 128);
          degreeDistributionWindow->view[DD_OUT]->tooltip("Histogram of number of inquirers having specific number of out links");
          degreeDistributionWindow->view[DD_OUT]->box(FL_NO_BOX);
          degreeDistributionWindow->view[DD_OUT]->color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_OUT]->selection_color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_OUT]->labeltype(FL_NORMAL_LABEL);
          degreeDistributionWindow->view[DD_OUT]->labelfont(0);
          degreeDistributionWindow->view[DD_OUT]->labelsize(14);
          degreeDistributionWindow->view[DD_OUT]->labelcolor(FL_FOREGROUND_COLOR);
          degreeDistributionWindow->view[DD_OUT]->align(Fl_Align(FL_ALIGN_CENTER));
          degreeDistributionWindow->view[DD_OUT]->when(FL_WHEN_RELEASE);
        } // StatisticsView* degreeDistributionWindow->view[DD_OUT]
        { degreeDistributionWindow->choiceFunction[DD_OUT] = new Fl_Choice(70, 230, 130, 22, "Fit as");
          degreeDistributionWindow->choiceFunction[DD_OUT]->down_box(FL_BORDER_BOX);
          degreeDistributionWindow->choiceFunction[DD_OUT]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->choiceFunction[DD_OUT]->labelfont(2);
          degreeDistributionWindow->choiceFunction[DD_OUT]->callback((Fl_Callback*)cb_degreeDistributionWindow2);
        } // Fl_Choice* degreeDistributionWindow->choiceFunction[DD_OUT]
        { degreeDistributionWindow->outputError[DD_OUT] = new Fl_Value_Output(240, 231, 95, 20, "Error");
          degreeDistributionWindow->outputError[DD_OUT]->tooltip("Mean squared error of curve");
          degreeDistributionWindow->outputError[DD_OUT]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->outputError[DD_OUT]->labelfont(2);
        } // Fl_Value_Output* degreeDistributionWindow->outputError[DD_OUT]
        { degreeDistributionWindow->labelYAxis[DD_OUT][4] = new Fl_Box(28, 49, 45, 16, "1");
          degreeDistributionWindow->labelYAxis[DD_OUT][4]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_OUT][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_OUT][4]
        { degreeDistributionWindow->labelYAxis[DD_OUT][0] = new Fl_Box(28, 166, 45, 16, "0");
          degreeDistributionWindow->labelYAxis[DD_OUT][0]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_OUT][0]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_OUT][0]
        { degreeDistributionWindow->labelYAxis[DD_OUT][2] = new Fl_Box(28, 106, 45, 16, "0.5");
          degreeDistributionWindow->labelYAxis[DD_OUT][2]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_OUT][2]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_OUT][2]
        { degreeDistributionWindow->labelYAxis[DD_OUT][1] = new Fl_Box(28, 138, 45, 16, "0.25");
          degreeDistributionWindow->labelYAxis[DD_OUT][1]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_OUT][1]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_OUT][1]
        { degreeDistributionWindow->labelYAxis[DD_OUT][3] = new Fl_Box(28, 77, 45, 16, "0.75");
          degreeDistributionWindow->labelYAxis[DD_OUT][3]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_OUT][3]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_OUT][3]
        { degreeDistributionWindow->labelXAxis[DD_OUT][0] = new Fl_Box(70, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_OUT][0]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_OUT][0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_OUT][0]
        { degreeDistributionWindow->labelXAxis[DD_OUT][4] = new Fl_Box(295, 184, 42, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_OUT][4]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_OUT][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_OUT][4]
        { degreeDistributionWindow->labelXAxis[DD_OUT][2] = new Fl_Box(178, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_OUT][2]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_OUT][2]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_OUT][2]
        { degreeDistributionWindow->labelXAxis[DD_OUT][1] = new Fl_Box(116, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_OUT][1]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_OUT][1]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_OUT][1]
        { degreeDistributionWindow->labelXAxis[DD_OUT][3] = new Fl_Box(241, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_OUT][3]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_OUT][3]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_OUT][3]
        { Fl_Box* o = new Fl_Box(31, 258, 304, 84);
          o->box(FL_DOWN_BOX);
        } // Fl_Box* o
        { degreeDistributionWindow->boxFormula[DD_OUT] = new Fl_Box(33, 260, 300, 80);
          degreeDistributionWindow->boxFormula[DD_OUT]->box(FL_FLAT_BOX);
          degreeDistributionWindow->boxFormula[DD_OUT]->color(FL_BACKGROUND2_COLOR);
        } // Fl_Box* degreeDistributionWindow->boxFormula[DD_OUT]
        { degreeDistributionWindow->outputParameter[DD_OUT][0] = new Fl_Value_Output(105, 347, 95, 20, "a =");
          degreeDistributionWindow->outputParameter[DD_OUT][0]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_OUT][0]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_OUT][0]
        { degreeDistributionWindow->outputParameter[DD_OUT][1] = new Fl_Value_Output(240, 347, 95, 20, "b =");
          degreeDistributionWindow->outputParameter[DD_OUT][1]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_OUT][1]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_OUT][1]
        { degreeDistributionWindow->outputParameter[DD_OUT][2] = new Fl_Value_Output(105, 372, 95, 20, "c =");
          degreeDistributionWindow->outputParameter[DD_OUT][2]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_OUT][2]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_OUT][2]
        { degreeDistributionWindow->outputParameter[DD_OUT][3] = new Fl_Value_Output(240, 372, 95, 20, "d =");
          degreeDistributionWindow->outputParameter[DD_OUT][3]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_OUT][3]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_OUT][3]
        { degreeDistributionWindow->sliderCutoff[DD_OUT] = new Fl_Value_Slider(70, 205, 230, 20, "Cutoff");
          degreeDistributionWindow->sliderCutoff[DD_OUT]->tooltip("Lower limit at which to fit curve");
          degreeDistributionWindow->sliderCutoff[DD_OUT]->type(1);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->labelfont(2);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->maximum(100);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->step(1);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->textsize(14);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->callback((Fl_Callback*)cb_degreeDistributionWindow3);
          degreeDistributionWindow->sliderCutoff[DD_OUT]->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* degreeDistributionWindow->sliderCutoff[DD_OUT]
        { Fl_Button* o = new Fl_Button(305, 205, 30, 20, "Fit");
          o->tooltip("Find best curve for this cutoff");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->callback((Fl_Callback*)cb_Fit1);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(20, 35, 325, 370, "Combined");
        o->labeltype(FL_ENGRAVED_LABEL);
        o->labelfont(2);
        o->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        o->hide();
        { Fl_Box* o = new Fl_Box(73, 49, 260, 132);
          o->box(FL_DOWN_BOX);
          o->color(FL_BACKGROUND2_COLOR);
          o->labeltype(FL_ENGRAVED_LABEL);
          o->labelfont(2);
          o->align(Fl_Align(FL_ALIGN_TOP));
        } // Fl_Box* o
        { degreeDistributionWindow->view[DD_TOTAL] = new StatisticsView(75, 51, 256, 128);
          degreeDistributionWindow->view[DD_TOTAL]->tooltip("Histogram of number of inquirers having specific number of in or out links");
          degreeDistributionWindow->view[DD_TOTAL]->box(FL_NO_BOX);
          degreeDistributionWindow->view[DD_TOTAL]->color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_TOTAL]->selection_color(FL_BACKGROUND_COLOR);
          degreeDistributionWindow->view[DD_TOTAL]->labeltype(FL_NORMAL_LABEL);
          degreeDistributionWindow->view[DD_TOTAL]->labelfont(0);
          degreeDistributionWindow->view[DD_TOTAL]->labelsize(14);
          degreeDistributionWindow->view[DD_TOTAL]->labelcolor(FL_FOREGROUND_COLOR);
          degreeDistributionWindow->view[DD_TOTAL]->align(Fl_Align(FL_ALIGN_CENTER));
          degreeDistributionWindow->view[DD_TOTAL]->when(FL_WHEN_RELEASE);
        } // StatisticsView* degreeDistributionWindow->view[DD_TOTAL]
        { degreeDistributionWindow->choiceFunction[DD_TOTAL] = new Fl_Choice(70, 230, 130, 22, "Fit as");
          degreeDistributionWindow->choiceFunction[DD_TOTAL]->down_box(FL_BORDER_BOX);
          degreeDistributionWindow->choiceFunction[DD_TOTAL]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->choiceFunction[DD_TOTAL]->labelfont(2);
          degreeDistributionWindow->choiceFunction[DD_TOTAL]->callback((Fl_Callback*)cb_degreeDistributionWindow4);
        } // Fl_Choice* degreeDistributionWindow->choiceFunction[DD_TOTAL]
        { degreeDistributionWindow->outputError[DD_TOTAL] = new Fl_Value_Output(240, 231, 95, 20, "Error");
          degreeDistributionWindow->outputError[DD_TOTAL]->tooltip("Mean squared error of curve");
          degreeDistributionWindow->outputError[DD_TOTAL]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->outputError[DD_TOTAL]->labelfont(2);
        } // Fl_Value_Output* degreeDistributionWindow->outputError[DD_TOTAL]
        { degreeDistributionWindow->labelYAxis[DD_TOTAL][4] = new Fl_Box(28, 49, 45, 16, "1");
          degreeDistributionWindow->labelYAxis[DD_TOTAL][4]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_TOTAL][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_TOTAL][4]
        { degreeDistributionWindow->labelYAxis[DD_TOTAL][0] = new Fl_Box(28, 166, 45, 16, "0");
          degreeDistributionWindow->labelYAxis[DD_TOTAL][0]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_TOTAL][0]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_TOTAL][0]
        { degreeDistributionWindow->labelYAxis[DD_TOTAL][2] = new Fl_Box(28, 106, 45, 16, "0.5");
          degreeDistributionWindow->labelYAxis[DD_TOTAL][2]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_TOTAL][2]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_TOTAL][2]
        { degreeDistributionWindow->labelYAxis[DD_TOTAL][1] = new Fl_Box(28, 138, 45, 16, "0.25");
          degreeDistributionWindow->labelYAxis[DD_TOTAL][1]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_TOTAL][1]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_TOTAL][1]
        { degreeDistributionWindow->labelYAxis[DD_TOTAL][3] = new Fl_Box(28, 77, 45, 16, "0.75");
          degreeDistributionWindow->labelYAxis[DD_TOTAL][3]->labelsize(12);
          degreeDistributionWindow->labelYAxis[DD_TOTAL][3]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelYAxis[DD_TOTAL][3]
        { degreeDistributionWindow->labelXAxis[DD_TOTAL][0] = new Fl_Box(70, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_TOTAL][0]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_TOTAL][0]->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_TOTAL][0]
        { degreeDistributionWindow->labelXAxis[DD_TOTAL][4] = new Fl_Box(295, 184, 42, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_TOTAL][4]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_TOTAL][4]->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_TOTAL][4]
        { degreeDistributionWindow->labelXAxis[DD_TOTAL][2] = new Fl_Box(178, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_TOTAL][2]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_TOTAL][2]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_TOTAL][2]
        { degreeDistributionWindow->labelXAxis[DD_TOTAL][1] = new Fl_Box(116, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_TOTAL][1]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_TOTAL][1]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_TOTAL][1]
        { degreeDistributionWindow->labelXAxis[DD_TOTAL][3] = new Fl_Box(241, 184, 45, 16, "0");
          degreeDistributionWindow->labelXAxis[DD_TOTAL][3]->labelsize(12);
          degreeDistributionWindow->labelXAxis[DD_TOTAL][3]->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
        } // Fl_Box* degreeDistributionWindow->labelXAxis[DD_TOTAL][3]
        { Fl_Box* o = new Fl_Box(31, 258, 304, 84);
          o->box(FL_DOWN_BOX);
        } // Fl_Box* o
        { degreeDistributionWindow->boxFormula[DD_TOTAL] = new Fl_Box(33, 260, 300, 80);
          degreeDistributionWindow->boxFormula[DD_TOTAL]->box(FL_FLAT_BOX);
          degreeDistributionWindow->boxFormula[DD_TOTAL]->color(FL_BACKGROUND2_COLOR);
        } // Fl_Box* degreeDistributionWindow->boxFormula[DD_TOTAL]
        { degreeDistributionWindow->outputParameter[DD_TOTAL][0] = new Fl_Value_Output(105, 347, 95, 20, "a =");
          degreeDistributionWindow->outputParameter[DD_TOTAL][0]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_TOTAL][0]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_TOTAL][0]
        { degreeDistributionWindow->outputParameter[DD_TOTAL][1] = new Fl_Value_Output(240, 347, 95, 20, "b =");
          degreeDistributionWindow->outputParameter[DD_TOTAL][1]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_TOTAL][1]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_TOTAL][1]
        { degreeDistributionWindow->outputParameter[DD_TOTAL][2] = new Fl_Value_Output(105, 372, 95, 20, "c =");
          degreeDistributionWindow->outputParameter[DD_TOTAL][2]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_TOTAL][2]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_TOTAL][2]
        { degreeDistributionWindow->outputParameter[DD_TOTAL][3] = new Fl_Value_Output(240, 372, 95, 20, "d =");
          degreeDistributionWindow->outputParameter[DD_TOTAL][3]->labelfont(10);
          degreeDistributionWindow->outputParameter[DD_TOTAL][3]->labelsize(16);
        } // Fl_Value_Output* degreeDistributionWindow->outputParameter[DD_TOTAL][3]
        { degreeDistributionWindow->sliderCutoff[DD_TOTAL] = new Fl_Value_Slider(70, 205, 230, 20, "Cutoff");
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->tooltip("Lower limit at which to fit curve");
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->type(1);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->labeltype(FL_ENGRAVED_LABEL);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->labelfont(2);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->maximum(100);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->step(1);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->textsize(14);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->callback((Fl_Callback*)cb_degreeDistributionWindow5);
          degreeDistributionWindow->sliderCutoff[DD_TOTAL]->align(Fl_Align(FL_ALIGN_LEFT));
        } // Fl_Value_Slider* degreeDistributionWindow->sliderCutoff[DD_TOTAL]
        { Fl_Button* o = new Fl_Button(305, 205, 30, 20, "Fit");
          o->tooltip("Find best curve for this cutoff");
          o->labeltype(FL_ENGRAVED_LABEL);
          o->callback((Fl_Callback*)cb_Fit2);
        } // Fl_Button* o
        o->end();
      } // Fl_Group* o
      o->end();
    } // Fl_Tabs* o
    { Fl_Return_Button* o = new Fl_Return_Button(275, 430, 75, 25, "Close");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(335, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_11);
    } // Fl_Button* o
    degreeDistributionWindow->set_modal();
    degreeDistributionWindow->clear_border();
    degreeDistributionWindow->end();
  } // DegreeDistributionWindow* degreeDistributionWindow
  { expressionWindow = new ExpressionWindow(536, 162);
    expressionWindow->box(FL_UP_BOX);
    expressionWindow->color(FL_BACKGROUND_COLOR);
    expressionWindow->selection_color(FL_BACKGROUND_COLOR);
    expressionWindow->labeltype(FL_NO_LABEL);
    expressionWindow->labelfont(0);
    expressionWindow->labelsize(14);
    expressionWindow->labelcolor(FL_FOREGROUND_COLOR);
    expressionWindow->user_data((void*)(this));
    expressionWindow->align(Fl_Align(FL_ALIGN_TOP));
    expressionWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(440, 125, 85, 25, "OK");
      o->tooltip("Exit and save changes");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_OK8);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(345, 125, 85, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancelb);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(505, 9, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_12);
    } // Fl_Button* o
    { expressionWindow->tabs = new Fl_Tabs(10, 10, 515, 105);
      { expressionWindow->groupPDF = new Fl_Group(10, 35, 515, 80, "By Density / Mass Function");
        expressionWindow->groupPDF->labeltype(FL_ENGRAVED_LABEL);
        expressionWindow->groupPDF->labelfont(2);
        { expressionWindow->inputFormulaPDF = new ExpressionField(90, 45, 425, 60, "P(t) = ");
          expressionWindow->inputFormulaPDF->box(FL_DOWN_FRAME);
          expressionWindow->inputFormulaPDF->color(FL_BACKGROUND2_COLOR);
          expressionWindow->inputFormulaPDF->selection_color(FL_BACKGROUND2_COLOR);
          expressionWindow->inputFormulaPDF->labeltype(FL_ENGRAVED_LABEL);
          expressionWindow->inputFormulaPDF->labelfont(8);
          expressionWindow->inputFormulaPDF->labelsize(16);
          expressionWindow->inputFormulaPDF->labelcolor(FL_FOREGROUND_COLOR);
          expressionWindow->inputFormulaPDF->textfont(8);
          expressionWindow->inputFormulaPDF->textsize(16);
          expressionWindow->inputFormulaPDF->align(Fl_Align(FL_ALIGN_LEFT_TOP));
          expressionWindow->inputFormulaPDF->when(FL_WHEN_RELEASE);
        } // ExpressionField* expressionWindow->inputFormulaPDF
        expressionWindow->groupPDF->end();
      } // Fl_Group* expressionWindow->groupPDF
      { expressionWindow->groupCDF = new Fl_Group(10, 35, 515, 80, "By Cumulative Density Function");
        expressionWindow->groupCDF->labeltype(FL_ENGRAVED_LABEL);
        expressionWindow->groupCDF->labelfont(2);
        expressionWindow->groupCDF->hide();
        { expressionWindow->inputFormulaCDF = new ExpressionField(90, 45, 425, 60, "P([0, t]) = ");
          expressionWindow->inputFormulaCDF->box(FL_DOWN_FRAME);
          expressionWindow->inputFormulaCDF->color(FL_BACKGROUND2_COLOR);
          expressionWindow->inputFormulaCDF->selection_color(FL_BACKGROUND2_COLOR);
          expressionWindow->inputFormulaCDF->labeltype(FL_ENGRAVED_LABEL);
          expressionWindow->inputFormulaCDF->labelfont(8);
          expressionWindow->inputFormulaCDF->labelsize(16);
          expressionWindow->inputFormulaCDF->labelcolor(FL_FOREGROUND_COLOR);
          expressionWindow->inputFormulaCDF->textfont(8);
          expressionWindow->inputFormulaCDF->textsize(16);
          expressionWindow->inputFormulaCDF->align(Fl_Align(FL_ALIGN_LEFT_TOP));
          expressionWindow->inputFormulaCDF->when(FL_WHEN_RELEASE);
        } // ExpressionField* expressionWindow->inputFormulaCDF
        expressionWindow->groupCDF->end();
      } // Fl_Group* expressionWindow->groupCDF
      expressionWindow->tabs->end();
    } // Fl_Tabs* expressionWindow->tabs
    expressionWindow->set_modal();
    expressionWindow->clear_border();
    expressionWindow->end();
  } // ExpressionWindow* expressionWindow
  { exportStatistics = new ExportStatisticsWindow(491, 261);
    exportStatistics->box(FL_UP_BOX);
    exportStatistics->color(FL_BACKGROUND_COLOR);
    exportStatistics->selection_color(FL_BACKGROUND_COLOR);
    exportStatistics->labeltype(FL_NO_LABEL);
    exportStatistics->labelfont(0);
    exportStatistics->labelsize(14);
    exportStatistics->labelcolor(FL_FOREGROUND_COLOR);
    exportStatistics->user_data((void*)(this));
    exportStatistics->align(Fl_Align(FL_ALIGN_TOP));
    exportStatistics->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(383, 215, 85, 25, "Save...");
      o->tooltip("Save statistics in chosen format");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Save3);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(290, 215, 85, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Cancelc);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(20, 30, 140, 165, "Columns");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      { exportStatisticsWindow->buttonVariable[0][0] = new Fl_Round_Button(28, 38, 110, 20, "Inquirers");
        exportStatisticsWindow->buttonVariable[0][0]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[0][0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[0][0]->labelfont(2);
        exportStatisticsWindow->buttonVariable[0][0]->callback((Fl_Callback*)cb_exportStatisticsWindow);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[0][0]
      { exportStatisticsWindow->buttonVariable[0][1] = new Fl_Round_Button(28, 63, 110, 20, "Time");
        exportStatisticsWindow->buttonVariable[0][1]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[0][1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[0][1]->labelfont(2);
        exportStatisticsWindow->buttonVariable[0][1]->callback((Fl_Callback*)cb_exportStatisticsWindow1);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[0][1]
      { exportStatisticsWindow->buttonVariable[0][2] = new Fl_Round_Button(28, 88, 110, 20, "Trials");
        exportStatisticsWindow->buttonVariable[0][2]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[0][2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[0][2]->labelfont(2);
        exportStatisticsWindow->buttonVariable[0][2]->callback((Fl_Callback*)cb_exportStatisticsWindow2);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[0][2]
      { exportStatisticsWindow->inputFrom[0] = new Fl_Value_Input(35, 131, 50, 24, "From");
        exportStatisticsWindow->inputFrom[0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputFrom[0]->labelfont(2);
        exportStatisticsWindow->inputFrom[0]->minimum(1);
        exportStatisticsWindow->inputFrom[0]->maximum(100);
        exportStatisticsWindow->inputFrom[0]->step(1);
        exportStatisticsWindow->inputFrom[0]->callback((Fl_Callback*)cb_exportStatisticsWindow3);
        exportStatisticsWindow->inputFrom[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputFrom[0]
      { exportStatisticsWindow->inputTo[0] = new Fl_Value_Input(90, 131, 55, 24, "To");
        exportStatisticsWindow->inputTo[0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputTo[0]->labelfont(2);
        exportStatisticsWindow->inputTo[0]->minimum(1);
        exportStatisticsWindow->inputTo[0]->maximum(100);
        exportStatisticsWindow->inputTo[0]->step(1);
        exportStatisticsWindow->inputTo[0]->callback((Fl_Callback*)cb_exportStatisticsWindow4);
        exportStatisticsWindow->inputTo[0]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputTo[0]
      { exportStatisticsWindow->buttonAverage[0] = new Fl_Check_Button(30, 165, 100, 20, "Average");
        exportStatisticsWindow->buttonAverage[0]->down_box(FL_DOWN_BOX);
        exportStatisticsWindow->buttonAverage[0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonAverage[0]->labelfont(2);
      } // Fl_Check_Button* exportStatisticsWindow->buttonAverage[0]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(175, 30, 140, 165, "Rows");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      { exportStatisticsWindow->buttonVariable[1][0] = new Fl_Round_Button(183, 38, 110, 20, "Inquirers");
        exportStatisticsWindow->buttonVariable[1][0]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[1][0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[1][0]->labelfont(2);
        exportStatisticsWindow->buttonVariable[1][0]->callback((Fl_Callback*)cb_exportStatisticsWindow5);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[1][0]
      { exportStatisticsWindow->buttonVariable[1][1] = new Fl_Round_Button(183, 63, 110, 20, "Time");
        exportStatisticsWindow->buttonVariable[1][1]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[1][1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[1][1]->labelfont(2);
        exportStatisticsWindow->buttonVariable[1][1]->callback((Fl_Callback*)cb_exportStatisticsWindow6);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[1][1]
      { exportStatisticsWindow->buttonVariable[1][2] = new Fl_Round_Button(183, 88, 110, 20, "Trials");
        exportStatisticsWindow->buttonVariable[1][2]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[1][2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[1][2]->labelfont(2);
        exportStatisticsWindow->buttonVariable[1][2]->callback((Fl_Callback*)cb_exportStatisticsWindow7);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[1][2]
      { exportStatisticsWindow->inputFrom[1] = new Fl_Value_Input(190, 131, 50, 24, "From");
        exportStatisticsWindow->inputFrom[1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputFrom[1]->labelfont(2);
        exportStatisticsWindow->inputFrom[1]->minimum(1);
        exportStatisticsWindow->inputFrom[1]->maximum(100);
        exportStatisticsWindow->inputFrom[1]->step(1);
        exportStatisticsWindow->inputFrom[1]->callback((Fl_Callback*)cb_exportStatisticsWindow8);
        exportStatisticsWindow->inputFrom[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputFrom[1]
      { exportStatisticsWindow->inputTo[1] = new Fl_Value_Input(245, 131, 55, 24, "To");
        exportStatisticsWindow->inputTo[1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputTo[1]->labelfont(2);
        exportStatisticsWindow->inputTo[1]->minimum(1);
        exportStatisticsWindow->inputTo[1]->maximum(100);
        exportStatisticsWindow->inputTo[1]->step(1);
        exportStatisticsWindow->inputTo[1]->callback((Fl_Callback*)cb_exportStatisticsWindow9);
        exportStatisticsWindow->inputTo[1]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputTo[1]
      { exportStatisticsWindow->buttonAverage[1] = new Fl_Check_Button(185, 165, 100, 20, "Final");
        exportStatisticsWindow->buttonAverage[1]->down_box(FL_DOWN_BOX);
        exportStatisticsWindow->buttonAverage[1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonAverage[1]->labelfont(2);
      } // Fl_Check_Button* exportStatisticsWindow->buttonAverage[1]
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(330, 30, 140, 165, "Sheets");
      o->box(FL_ENGRAVED_FRAME);
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      { exportStatisticsWindow->buttonVariable[2][0] = new Fl_Round_Button(338, 38, 110, 20, "Inquirers");
        exportStatisticsWindow->buttonVariable[2][0]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[2][0]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[2][0]->labelfont(2);
        exportStatisticsWindow->buttonVariable[2][0]->callback((Fl_Callback*)cb_exportStatisticsWindowa);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[2][0]
      { exportStatisticsWindow->buttonVariable[2][1] = new Fl_Round_Button(338, 63, 110, 20, "Time");
        exportStatisticsWindow->buttonVariable[2][1]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[2][1]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[2][1]->labelfont(2);
        exportStatisticsWindow->buttonVariable[2][1]->callback((Fl_Callback*)cb_exportStatisticsWindowb);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[2][1]
      { exportStatisticsWindow->buttonVariable[2][2] = new Fl_Round_Button(338, 88, 110, 20, "Trials");
        exportStatisticsWindow->buttonVariable[2][2]->down_box(FL_ROUND_DOWN_BOX);
        exportStatisticsWindow->buttonVariable[2][2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonVariable[2][2]->labelfont(2);
        exportStatisticsWindow->buttonVariable[2][2]->callback((Fl_Callback*)cb_exportStatisticsWindowc);
      } // Fl_Round_Button* exportStatisticsWindow->buttonVariable[2][2]
      { exportStatisticsWindow->inputFrom[2] = new Fl_Value_Input(345, 131, 50, 24, "From");
        exportStatisticsWindow->inputFrom[2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputFrom[2]->labelfont(2);
        exportStatisticsWindow->inputFrom[2]->minimum(1);
        exportStatisticsWindow->inputFrom[2]->maximum(100);
        exportStatisticsWindow->inputFrom[2]->step(1);
        exportStatisticsWindow->inputFrom[2]->callback((Fl_Callback*)cb_exportStatisticsWindowd);
        exportStatisticsWindow->inputFrom[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputFrom[2]
      { exportStatisticsWindow->inputTo[2] = new Fl_Value_Input(400, 131, 55, 24, "To");
        exportStatisticsWindow->inputTo[2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->inputTo[2]->labelfont(2);
        exportStatisticsWindow->inputTo[2]->minimum(1);
        exportStatisticsWindow->inputTo[2]->maximum(100);
        exportStatisticsWindow->inputTo[2]->step(1);
        exportStatisticsWindow->inputTo[2]->callback((Fl_Callback*)cb_exportStatisticsWindowe);
        exportStatisticsWindow->inputTo[2]->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      } // Fl_Value_Input* exportStatisticsWindow->inputTo[2]
      { exportStatisticsWindow->buttonAverage[2] = new Fl_Check_Button(340, 165, 100, 20, "Average");
        exportStatisticsWindow->buttonAverage[2]->down_box(FL_DOWN_BOX);
        exportStatisticsWindow->buttonAverage[2]->value(1);
        exportStatisticsWindow->buttonAverage[2]->labeltype(FL_ENGRAVED_LABEL);
        exportStatisticsWindow->buttonAverage[2]->labelfont(2);
      } // Fl_Check_Button* exportStatisticsWindow->buttonAverage[2]
      o->end();
    } // Fl_Group* o
    { Fl_Button* o = new Fl_Button(465, 5, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_13);
    } // Fl_Button* o
    exportStatistics->set_modal();
    exportStatistics->clear_border();
    exportStatistics->end();
  } // ExportStatisticsWindow* exportStatistics
  { exportTopologyWindow = new ExportTopologyWindow(260, 249, "Export Topology");
    exportTopologyWindow->box(FL_UP_BOX);
    exportTopologyWindow->color(FL_BACKGROUND_COLOR);
    exportTopologyWindow->selection_color(FL_BACKGROUND_COLOR);
    exportTopologyWindow->labeltype(FL_NO_LABEL);
    exportTopologyWindow->labelfont(0);
    exportTopologyWindow->labelsize(14);
    exportTopologyWindow->labelcolor(FL_FOREGROUND_COLOR);
    exportTopologyWindow->user_data((void*)(this));
    exportTopologyWindow->align(Fl_Align(65));
    exportTopologyWindow->when(FL_WHEN_RELEASE);
    { Fl_Return_Button* o = new Fl_Return_Button(155, 200, 85, 25, "Save...");
      o->tooltip("Save statistics in chosen format");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Save4);
    } // Fl_Return_Button* o
    { Fl_Button* o = new Fl_Button(25, 200, 85, 25, "Cancel");
      o->tooltip("Exit without saving");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_Canceld);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(230, 10, 20, 20, "?");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(1);
      o->callback((Fl_Callback*)cb_14);
    } // Fl_Button* o
    { exportTopologyWindow->fieldMinListenChance = new Fl_Value_Input(150, 91, 53, 19, "Min. listen chance:");
      exportTopologyWindow->fieldMinListenChance->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->fieldMinListenChance->labelfont(2);
    } // Fl_Value_Input* exportTopologyWindow->fieldMinListenChance
    { exportTopologyWindow->buttonWeightNone = new Fl_Round_Button(90, 23, 64, 15, "None");
      exportTopologyWindow->buttonWeightNone->down_box(FL_ROUND_DOWN_BOX);
      exportTopologyWindow->buttonWeightNone->value(1);
      exportTopologyWindow->buttonWeightNone->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->buttonWeightNone->labelfont(2);
      exportTopologyWindow->buttonWeightNone->callback((Fl_Callback*)cb_exportTopologyWindow);
    } // Fl_Round_Button* exportTopologyWindow->buttonWeightNone
    { exportTopologyWindow->buttonWeightListenChance = new Fl_Round_Button(90, 43, 120, 15, "Listen Chance");
      exportTopologyWindow->buttonWeightListenChance->down_box(FL_ROUND_DOWN_BOX);
      exportTopologyWindow->buttonWeightListenChance->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->buttonWeightListenChance->labelfont(2);
      exportTopologyWindow->buttonWeightListenChance->callback((Fl_Callback*)cb_exportTopologyWindow1);
    } // Fl_Round_Button* exportTopologyWindow->buttonWeightListenChance
    { exportTopologyWindow->buttonWeightTrust = new Fl_Round_Button(90, 63, 130, 15, "Expected Trust");
      exportTopologyWindow->buttonWeightTrust->down_box(FL_ROUND_DOWN_BOX);
      exportTopologyWindow->buttonWeightTrust->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->buttonWeightTrust->labelfont(2);
      exportTopologyWindow->buttonWeightTrust->callback((Fl_Callback*)cb_exportTopologyWindow2);
    } // Fl_Round_Button* exportTopologyWindow->buttonWeightTrust
    { Fl_Box* o = new Fl_Box(25, 22, 70, 17, "Weights:");
      o->labeltype(FL_ENGRAVED_LABEL);
      o->labelfont(2);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(23, 123, 217, 1);
      o->box(FL_THIN_DOWN_BOX);
    } // Fl_Box* o
    { exportTopologyWindow->buttonSingleFile = new Fl_Round_Button(90, 135, 105, 15, "A single file");
      exportTopologyWindow->buttonSingleFile->down_box(FL_ROUND_DOWN_BOX);
      exportTopologyWindow->buttonSingleFile->value(1);
      exportTopologyWindow->buttonSingleFile->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->buttonSingleFile->labelfont(2);
      exportTopologyWindow->buttonSingleFile->callback((Fl_Callback*)cb_exportTopologyWindow3);
    } // Fl_Round_Button* exportTopologyWindow->buttonSingleFile
    { exportTopologyWindow->buttonFolder = new Fl_Round_Button(90, 155, 120, 15, "A folder of files");
      exportTopologyWindow->buttonFolder->down_box(FL_ROUND_DOWN_BOX);
      exportTopologyWindow->buttonFolder->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->buttonFolder->labelfont(2);
      exportTopologyWindow->buttonFolder->callback((Fl_Callback*)cb_exportTopologyWindow4);
    } // Fl_Round_Button* exportTopologyWindow->buttonFolder
    { exportTopologyWindow->labelSaveAs = new Fl_Box(25, 134, 70, 17, "Save As:");
      exportTopologyWindow->labelSaveAs->labeltype(FL_ENGRAVED_LABEL);
      exportTopologyWindow->labelSaveAs->labelfont(2);
      exportTopologyWindow->labelSaveAs->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
    } // Fl_Box* exportTopologyWindow->labelSaveAs
    { Fl_Box* o = new Fl_Box(22, 182, 218, 2);
      o->box(FL_THIN_DOWN_BOX);
    } // Fl_Box* o
    exportTopologyWindow->set_modal();
    exportTopologyWindow->clear_border();
    exportTopologyWindow->size_range(260, 249, 260, 249);
    exportTopologyWindow->end();
  } // ExportTopologyWindow* exportTopologyWindow
}
